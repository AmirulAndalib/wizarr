"use strict";(self.webpackChunkwizarr=self.webpackChunkwizarr||[]).push([[697],{697:(t,i,h)=>{
/*!
 * Chart.js v3.9.1
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */
function ct(){}h.r(i),h.d(i,{A:()=>ye,B:()=>Me,P:()=>ve,a:()=>K,b:()=>D,c:()=>I,d:()=>at,e:()=>E,f:()=>ao,i:()=>T,m:()=>ne,r:()=>Zt,t:()=>$,v:()=>C});const d=function(){let t=0;return function(){return t++}}();function T(t){return null===t||typeof t>"u"}function z(t){if(Array.isArray&&Array.isArray(t))return!0;const i=Object.prototype.toString.call(t);return"[object"===i.slice(0,7)&&"Array]"===i.slice(-6)}function D(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const N=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function Q(t,i){return N(t)?t:i}function C(t,i){return typeof t>"u"?i:t}const an=(t,i)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*i:+t;function I(t,i,h){if(t&&"function"==typeof t.call)return t.apply(h,i)}function E(t,i,h,d){let u,b,_;if(z(t))if(b=t.length,d)for(u=b-1;u>=0;u--)i.call(h,t[u],u);else for(u=0;u<b;u++)i.call(h,t[u],u);else if(D(t))for(_=Object.keys(t),b=_.length,u=0;u<b;u++)i.call(h,t[_[u]],_[u])}function ze(t,i){let h,d,u,b;if(!t||!i||t.length!==i.length)return!1;for(h=0,d=t.length;h<d;++h)if(u=t[h],b=i[h],u.datasetIndex!==b.datasetIndex||u.index!==b.index)return!1;return!0}function Be(t){if(z(t))return t.map(Be);if(D(t)){const i=Object.create(null),h=Object.keys(t),d=h.length;let u=0;for(;u<d;++u)i[h[u]]=Be(t[h[u]]);return i}return t}function ln(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function vo(t,i,h,d){if(!ln(t))return;const u=i[t],b=h[t];D(u)&&D(b)?ne(u,b,d):i[t]=Be(b)}function ne(t,i,h){const d=z(i)?i:[i],u=d.length;if(!D(t))return t;const b=(h=h||{}).merger||vo;for(let _=0;_<u;++_){if(!D(i=d[_]))continue;const u=Object.keys(i);for(let d=0,_=u.length;d<_;++d)b(u[d],t,i,h)}return t}function Qt(t,i){return ne(t,i,{merger:Mo})}function Mo(t,i,h){if(!ln(t))return;const d=i[t],u=h[t];D(d)&&D(u)?Qt(d,u):Object.prototype.hasOwnProperty.call(i,t)||(i[t]=Be(u))}const u={"":t=>t,x:t=>t.x,y:t=>t.y};function _t(t,i){return(u[i]||(u[i]=function ko(t){const i=function wo(t){const i=t.split("."),h=[];let d="";for(const t of i)d+=t,d.endsWith("\\")?d=d.slice(0,-1)+".":(h.push(d),d="");return h}(t);return t=>{for(const h of i){if(""===h)break;t=t&&t[h]}return t}}(i)))(t)}function Oi(t){return t.charAt(0).toUpperCase()+t.slice(1)}const et=t=>typeof t<"u",yt=t=>"function"==typeof t,Ui=(t,i)=>{if(t.size!==i.size)return!1;for(const h of t)if(!i.has(h))return!1;return!0};const b=Math.PI,_=2*b,y=_+b,w=Number.POSITIVE_INFINITY,S=b/180,P=b/2,O=b/4,A=2*b/3,L=Math.log10,R=Math.sign;function qi(t){const i=Math.round(t);t=te(t,i,t/1e3)?i:t;const h=Math.pow(10,Math.floor(L(t))),d=t/h;return(d<=1?1:d<=2?2:d<=5?5:10)*h}function Bt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function te(t,i,h){return Math.abs(t-i)<h}function cn(t,i,h){let d,u,b;for(d=0,u=t.length;d<u;d++)b=t[d][h],isNaN(b)||(i.min=Math.min(i.min,b),i.max=Math.max(i.max,b))}function nt(t){return t*(b/180)}function Ai(t){return t*(180/b)}function Gi(t){if(!N(t))return;let i=1,h=0;for(;Math.round(t*i)/i!==t;)i*=10,h++;return h}function hn(t,i){const h=i.x-t.x,d=i.y-t.y,u=Math.sqrt(h*h+d*d);let y=Math.atan2(d,h);return y<-.5*b&&(y+=_),{angle:y,distance:u}}function bi(t,i){return Math.sqrt(Math.pow(i.x-t.x,2)+Math.pow(i.y-t.y,2))}function Ao(t,i){return(t-i+y)%_-b}function Z(t){return(t%_+_)%_}function oe(t,i,h,d){const u=Z(t),b=Z(i),_=Z(h),y=Z(b-u),w=Z(_-u),S=Z(u-b),P=Z(u-_);return u===b||u===_||d&&b===_||y>w&&S<P}function Y(t,i,h){return Math.max(i,Math.min(h,t))}function ut(t,i,h,d=1e-6){return t>=Math.min(i,h)-d&&t<=Math.max(i,h)+d}function Ti(t,i,h){h=h||(h=>t[h]<i);let d,u=t.length-1,b=0;for(;u-b>1;)d=b+u>>1,h(d)?b=d:u=d;return{lo:b,hi:u}}const ft=(t,i,h,d)=>Ti(t,h,d?d=>t[d][i]<=h:d=>t[d][i]<h),Lo=(t,i,h)=>Ti(t,h,(d=>t[d][i]>=h));const F=["push","pop","shift","splice","unshift"];function Zi(t,i){const h=t._chartjs;if(!h)return;const d=h.listeners,u=d.indexOf(i);-1!==u&&d.splice(u,1),!(d.length>0)&&(F.forEach((i=>{delete t[i]})),delete t._chartjs)}function un(t){const i=new Set;let h,d;for(h=0,d=t.length;h<d;++h)i.add(t[h]);return i.size===d?t:Array.from(i)}const V=typeof window>"u"?function(t){return t()}:window.requestAnimationFrame;function gn(t,i,h){const d=h||(t=>Array.prototype.slice.call(t));let u=!1,b=[];return function(...h){b=d(h),u||(u=!0,V.call(window,(()=>{u=!1,t.apply(i,b)})))}}const Li=t=>"start"===t?"left":"end"===t?"right":"center",U=(t,i,h)=>"start"===t?i:"end"===t?h:(i+h)/2;function pn(t,i,h){const d=i.length;let u=0,b=d;if(t._sorted){const{iScale:_,_parsed:y}=t,w=_.axis,{min:S,max:P,minDefined:O,maxDefined:A}=_.getUserBounds();O&&(u=Y(Math.min(ft(y,_.axis,S).lo,h?d:ft(i,w,_.getPixelForValue(S)).lo),0,d-1)),b=A?Y(Math.max(ft(y,_.axis,P,!0).hi+1,h?0:ft(i,w,_.getPixelForValue(P),!0).hi+1),u,d)-u:d-u}return{start:u,count:b}}function mn(t){const{xScale:i,yScale:h,_scaleRanges:d}=t,u={xmin:i.min,xmax:i.max,ymin:h.min,ymax:h.max};if(!d)return t._scaleRanges=u,!0;const b=d.xmin!==i.min||d.xmax!==i.max||d.ymin!==h.min||d.ymax!==h.max;return Object.assign(d,u),b}const we=t=>0===t||1===t,Ji=(t,i,h)=>-Math.pow(2,10*(t-=1))*Math.sin((t-i)*_/h),Qi=(t,i,h)=>Math.pow(2,-10*t)*Math.sin((t-i)*_/h)+1,B={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*P),easeOutSine:t=>Math.sin(t*P),easeInOutSine:t=>-.5*(Math.cos(b*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>we(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>we(t)?t:Ji(t,.075,.3),easeOutElastic:t=>we(t)?t:Qi(t,.075,.3),easeInOutElastic:t=>we(t)?t:t<.5?.5*Ji(2*t,.1125,.45):.5+.5*Qi(2*t-1,.1125,.45),easeInBack:t=>t*t*(2.70158*t-1.70158),easeOutBack:t=>(t-=1)*t*(2.70158*t+1.70158)+1,easeInOutBack(t){let i=1.70158;return(t/=.5)<1?t*t*((1+(i*=1.525))*t-i)*.5:.5*((t-=2)*t*((1+(i*=1.525))*t+i)+2)},easeInBounce:t=>1-B.easeOutBounce(1-t),easeOutBounce:t=>t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,easeInOutBounce:t=>t<.5?.5*B.easeInBounce(2*t):.5*B.easeOutBounce(2*t-1)+.5};
/*!
 * @kurkle/color v0.2.1
 * https://github.com/kurkle/color#readme
 * (c) 2022 Jukka Kurkela
 * Released under the MIT License
 */function he(t){return t+.5|0}const mt=(t,i,h)=>Math.max(Math.min(t,h),i);function Gt(t){return mt(he(2.55*t),0,255)}function xt(t){return mt(he(255*t),0,255)}function dt(t){return mt(he(t/2.55)/100,0,1)}function ts(t){return mt(he(100*t),0,100)}const W={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},H=[..."0123456789ABCDEF"],zo=t=>H[15&t],Bo=t=>H[(240&t)>>4]+H[15&t],Se=t=>(240&t)>>4==(15&t);function Ho(t){var i=(t=>Se(t.r)&&Se(t.g)&&Se(t.b)&&Se(t.a))(t)?zo:Bo;return t?"#"+i(t.r)+i(t.g)+i(t.b)+((t,i)=>t<255?i(t):"")(t.a,i):void 0}const j=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function bn(t,i,h){const d=i*Math.min(h,1-h),n=(i,u=(i+t/30)%12)=>h-d*Math.max(Math.min(u-3,9-u,1),-1);return[n(0),n(8),n(4)]}function $o(t,i,h){const s=(d,u=(d+t/60)%6)=>h-h*i*Math.max(Math.min(u,4-u,1),0);return[s(5),s(3),s(1)]}function Yo(t,i,h){const d=bn(t,1,.5);let u;for(i+h>1&&(u=1/(i+h),i*=u,h*=u),u=0;u<3;u++)d[u]*=1-i-h,d[u]+=i;return d}function Ri(t){const i=t.r/255,h=t.g/255,d=t.b/255,u=Math.max(i,h,d),b=Math.min(i,h,d),_=(u+b)/2;let y,w,S;return u!==b&&(S=u-b,w=_>.5?S/(2-u-b):S/(u+b),y=function Xo(t,i,h,d,u){return t===u?(i-h)/d+(i<h?6:0):i===u?(h-t)/d+2:(t-i)/d+4}(i,h,d,S,u),y=60*y+.5),[0|y,w||0,_]}function Ei(t,i,h,d){return(Array.isArray(i)?t(i[0],i[1],i[2]):t(i,h,d)).map(xt)}function Fi(t,i,h){return Ei(bn,t,i,h)}function xn(t){return(t%360+360)%360}function qo(t){const i=j.exec(t);let h,d=255;if(!i)return;i[5]!==h&&(d=i[6]?Gt(+i[5]):xt(+i[5]));const u=xn(+i[2]),b=+i[3]/100,_=+i[4]/100;return h="hwb"===i[1]?function Uo(t,i,h){return Ei(Yo,t,i,h)}(u,b,_):"hsv"===i[1]?function Ko(t,i,h){return Ei($o,t,i,h)}(u,b,_):Fi(u,b,_),{r:h[0],g:h[1],b:h[2],a:d}}const X={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},q={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let G;function Qo(t){G||(G=function Jo(){const t={},i=Object.keys(q),h=Object.keys(X);let d,u,b,_,y;for(d=0;d<i.length;d++){for(_=y=i[d],u=0;u<h.length;u++)b=h[u],y=y.replace(b,X[b]);b=parseInt(q[_],16),t[y]=[b>>16&255,b>>8&255,255&b]}return t}(),G.transparent=[0,0,0,0]);const i=G[t.toLowerCase()];return i&&{r:i[0],g:i[1],b:i[2],a:4===i.length?i[3]:255}}const J=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;const ni=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,Ft=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Ce(t,i,h){if(t){let d=Ri(t);d[i]=Math.max(0,Math.min(d[i]+d[i]*h,0===i?360:1)),d=Fi(d),t.r=d[0],t.g=d[1],t.b=d[2]}}function _n(t,i){return t&&Object.assign(i||{},t)}function ss(t){var i={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(i={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(i.a=xt(t[3]))):(i=_n(t,{r:0,g:0,b:0,a:1})).a=xt(i.a),i}function nr(t){return"r"===t.charAt(0)?function er(t){const i=J.exec(t);let h,d,u,b=255;if(i){if(i[7]!==h){const t=+i[7];b=i[8]?Gt(t):mt(255*t,0,255)}return h=+i[1],d=+i[3],u=+i[5],h=255&(i[2]?Gt(h):mt(h,0,255)),d=255&(i[4]?Gt(d):mt(d,0,255)),u=255&(i[6]?Gt(u):mt(u,0,255)),{r:h,g:d,b:u,a:b}}}(t):qo(t)}class We{constructor(t){if(t instanceof We)return t;const i=typeof t;let h;"object"===i?h=ss(t):"string"===i&&(h=function Wo(t){var i,h=t.length;return"#"===t[0]&&(4===h||5===h?i={r:255&17*W[t[1]],g:255&17*W[t[2]],b:255&17*W[t[3]],a:5===h?17*W[t[4]]:255}:(7===h||9===h)&&(i={r:W[t[1]]<<4|W[t[2]],g:W[t[3]]<<4|W[t[4]],b:W[t[5]]<<4|W[t[6]],a:9===h?W[t[7]]<<4|W[t[8]]:255})),i}(t)||Qo(t)||nr(t)),this._rgb=h,this._valid=!!h}get valid(){return this._valid}get rgb(){var t=_n(this._rgb);return t&&(t.a=dt(t.a)),t}set rgb(t){this._rgb=ss(t)}rgbString(){return this._valid?function ir(t){return t&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${dt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`)}(this._rgb):void 0}hexString(){return this._valid?Ho(this._rgb):void 0}hslString(){return this._valid?function Zo(t){if(!t)return;const i=Ri(t),h=i[0],d=ts(i[1]),u=ts(i[2]);return t.a<255?`hsla(${h}, ${d}%, ${u}%, ${dt(t.a)})`:`hsl(${h}, ${d}%, ${u}%)`}(this._rgb):void 0}mix(t,i){if(t){const h=this.rgb,d=t.rgb;let u;const b=i===u?.5:i,_=2*b-1,y=h.a-d.a,w=((_*y==-1?_:(_+y)/(1+_*y))+1)/2;u=1-w,h.r=255&w*h.r+u*d.r+.5,h.g=255&w*h.g+u*d.g+.5,h.b=255&w*h.b+u*d.b+.5,h.a=b*h.a+(1-b)*d.a,this.rgb=h}return this}interpolate(t,i){return t&&(this._rgb=function sr(t,i,h){const d=Ft(dt(t.r)),u=Ft(dt(t.g)),b=Ft(dt(t.b));return{r:xt(ni(d+h*(Ft(dt(i.r))-d))),g:xt(ni(u+h*(Ft(dt(i.g))-u))),b:xt(ni(b+h*(Ft(dt(i.b))-b))),a:t.a+h*(i.a-t.a)}}(this._rgb,t._rgb,i)),this}clone(){return new We(this.rgb)}alpha(t){return this._rgb.a=xt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,i=he(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=i,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Ce(this._rgb,2,t),this}darken(t){return Ce(this._rgb,2,-t),this}saturate(t){return Ce(this._rgb,1,t),this}desaturate(t){return Ce(this._rgb,1,-t),this}rotate(t){return function Go(t,i){var h=Ri(t);h[0]=xn(h[0]+i),h=Fi(h),t.r=h[0],t.g=h[1],t.b=h[2]}(this._rgb,t),this}}function yn(t){return new We(t)}function vn(t){if(t&&"object"==typeof t){const i=t.toString();return"[object CanvasPattern]"===i||"[object CanvasGradient]"===i}return!1}function ns(t){return vn(t)?t:yn(t)}function oi(t){return vn(t)?t:yn(t).saturate(.5).darken(.1).hexString()}const tt=Object.create(null),ot=Object.create(null);function ie(t,i){if(!i)return t;const h=i.split(".");for(let i=0,d=h.length;i<d;++i){const d=h[i];t=t[d]||(t[d]=Object.create(null))}return t}function ri(t,i,h){return"string"==typeof i?ne(ie(t,i),h):ne(ie(t,""),i)}var at=new class or{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,i)=>oi(i.backgroundColor),this.hoverBorderColor=(t,i)=>oi(i.borderColor),this.hoverColor=(t,i)=>oi(i.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,i){return ri(this,t,i)}get(t){return ie(this,t)}describe(t,i){return ri(ot,t,i)}override(t,i){return ri(tt,t,i)}route(t,i,h,d){const u=ie(this,t),b=ie(this,h),_="_"+i;Object.defineProperties(u,{[_]:{value:u[i],writable:!0},[i]:{enumerable:!0,get(){const t=this[_],i=b[d];return D(t)?Object.assign({},i,t):C(t,i)},set(t){this[_]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Ne(t,i,h,d,u){let b=i[u];return b||(b=i[u]=t.measureText(u).width,h.push(u)),b>d&&(d=b),d}function ar(t,i,h,d){let u=(d=d||{}).data=d.data||{},b=d.garbageCollect=d.garbageCollect||[];d.font!==i&&(u=d.data={},b=d.garbageCollect=[],d.font=i),t.save(),t.font=i;let _=0;const y=h.length;let w,S,P,O,A;for(w=0;w<y;w++)if(O=h[w],null!=O&&!0!==z(O))_=Ne(t,u,b,_,O);else if(z(O))for(S=0,P=O.length;S<P;S++)A=O[S],null!=A&&!z(A)&&(_=Ne(t,u,b,_,A));t.restore();const L=b.length/2;if(L>h.length){for(w=0;w<L;w++)delete u[b[w]];b.splice(0,L)}return _}function wt(t,i,h){const d=t.currentDevicePixelRatio,u=0!==h?Math.max(h/2,.5):0;return Math.round((i-u)*d)/d+u}function os(t,i){(i=i||t.getContext("2d")).save(),i.resetTransform(),i.clearRect(0,0,t.width,t.height),i.restore()}function yi(t,i,h,d){Mn(t,i,h,d,null)}function Mn(t,i,h,d,u){let y,w,L,R,F,V;const B=i.pointStyle,W=i.rotation,H=i.radius;let j=(W||0)*S;if(B&&"object"==typeof B&&(y=B.toString(),"[object HTMLImageElement]"===y||"[object HTMLCanvasElement]"===y))return t.save(),t.translate(h,d),t.rotate(j),t.drawImage(B,-B.width/2,-B.height/2,B.width,B.height),void t.restore();if(!(isNaN(H)||H<=0)){switch(t.beginPath(),B){default:u?t.ellipse(h,d,u/2,H,0,0,_):t.arc(h,d,H,0,_),t.closePath();break;case"triangle":t.moveTo(h+Math.sin(j)*H,d-Math.cos(j)*H),j+=A,t.lineTo(h+Math.sin(j)*H,d-Math.cos(j)*H),j+=A,t.lineTo(h+Math.sin(j)*H,d-Math.cos(j)*H),t.closePath();break;case"rectRounded":F=.516*H,R=H-F,w=Math.cos(j+O)*R,L=Math.sin(j+O)*R,t.arc(h-w,d-L,F,j-b,j-P),t.arc(h+L,d-w,F,j-P,j),t.arc(h+w,d+L,F,j,j+P),t.arc(h-L,d+w,F,j+P,j+b),t.closePath();break;case"rect":if(!W){R=Math.SQRT1_2*H,V=u?u/2:R,t.rect(h-V,d-R,2*V,2*R);break}j+=O;case"rectRot":w=Math.cos(j)*H,L=Math.sin(j)*H,t.moveTo(h-w,d-L),t.lineTo(h+L,d-w),t.lineTo(h+w,d+L),t.lineTo(h-L,d+w),t.closePath();break;case"crossRot":j+=O;case"cross":w=Math.cos(j)*H,L=Math.sin(j)*H,t.moveTo(h-w,d-L),t.lineTo(h+w,d+L),t.moveTo(h+L,d-w),t.lineTo(h-L,d+w);break;case"star":w=Math.cos(j)*H,L=Math.sin(j)*H,t.moveTo(h-w,d-L),t.lineTo(h+w,d+L),t.moveTo(h+L,d-w),t.lineTo(h-L,d+w),j+=O,w=Math.cos(j)*H,L=Math.sin(j)*H,t.moveTo(h-w,d-L),t.lineTo(h+w,d+L),t.moveTo(h+L,d-w),t.lineTo(h-L,d+w);break;case"line":w=u?u/2:Math.cos(j)*H,L=Math.sin(j)*H,t.moveTo(h-w,d-L),t.lineTo(h+w,d+L);break;case"dash":t.moveTo(h,d),t.lineTo(h+Math.cos(j)*H,d+Math.sin(j)*H)}t.fill(),i.borderWidth>0&&t.stroke()}}function re(t,i,h){return h=h||.5,!i||t&&t.x>i.left-h&&t.x<i.right+h&&t.y>i.top-h&&t.y<i.bottom+h}function Xe(t,i){t.save(),t.beginPath(),t.rect(i.left,i.top,i.right-i.left,i.bottom-i.top),t.clip()}function Ue(t){t.restore()}function lr(t,i,h,d,u){if(!i)return t.lineTo(h.x,h.y);if("middle"===u){const d=(i.x+h.x)/2;t.lineTo(d,i.y),t.lineTo(d,h.y)}else"after"===u!=!!d?t.lineTo(i.x,h.y):t.lineTo(h.x,i.y);t.lineTo(h.x,h.y)}function cr(t,i,h,d){if(!i)return t.lineTo(h.x,h.y);t.bezierCurveTo(d?i.cp1x:i.cp2x,d?i.cp1y:i.cp2y,d?h.cp2x:h.cp1x,d?h.cp2y:h.cp1y,h.x,h.y)}function Tt(t,i,h,d,u,b={}){const _=z(i)?i:[i],y=b.strokeWidth>0&&""!==b.strokeColor;let w,S;for(t.save(),t.font=u.string,function hr(t,i){i.translation&&t.translate(i.translation[0],i.translation[1]),T(i.rotation)||t.rotate(i.rotation),i.color&&(t.fillStyle=i.color),i.textAlign&&(t.textAlign=i.textAlign),i.textBaseline&&(t.textBaseline=i.textBaseline)}(t,b),w=0;w<_.length;++w)S=_[w],y&&(b.strokeColor&&(t.strokeStyle=b.strokeColor),T(b.strokeWidth)||(t.lineWidth=b.strokeWidth),t.strokeText(S,h,d,b.maxWidth)),t.fillText(S,h,d,b.maxWidth),dr(t,h,d,S,b),d+=u.lineHeight;t.restore()}function dr(t,i,h,d,u){if(u.strikethrough||u.underline){const b=t.measureText(d),_=i-b.actualBoundingBoxLeft,y=i+b.actualBoundingBoxRight,w=h-b.actualBoundingBoxAscent,S=h+b.actualBoundingBoxDescent,P=u.strikethrough?(w+S)/2:S;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=u.decorationWidth||2,t.moveTo(_,P),t.lineTo(y,P),t.stroke()}}function ae(t,i){const{x:h,y:d,w:u,h:_,radius:y}=i;t.arc(h+y.topLeft,d+y.topLeft,y.topLeft,-P,b,!0),t.lineTo(h,d+_-y.bottomLeft),t.arc(h+y.bottomLeft,d+_-y.bottomLeft,y.bottomLeft,b,P,!0),t.lineTo(h+u-y.bottomRight,d+_),t.arc(h+u-y.bottomRight,d+_-y.bottomRight,y.bottomRight,P,0,!0),t.lineTo(h+u,d+y.topRight),t.arc(h+u-y.topRight,d+y.topRight,y.topRight,0,-P,!0),t.lineTo(h+y.topLeft,d)}const lt=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),pt=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function gr(t,i){const h=(""+t).match(lt);if(!h||"normal"===h[1])return 1.2*i;switch(t=+h[2],h[3]){case"px":return t;case"%":t/=100}return i*t}const pr=t=>+t||0;function Ii(t,i){const h={},d=D(i),u=d?Object.keys(i):i,b=D(t)?d?h=>C(t[h],t[i[h]]):i=>t[i]:()=>t;for(const t of u)h[t]=pr(b(t));return h}function kn(t){return Ii(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Dt(t){return Ii(t,["topLeft","topRight","bottomLeft","bottomRight"])}function K(t){const i=kn(t);return i.width=i.left+i.right,i.height=i.top+i.bottom,i}function $(t,i){t=t||{},i=i||at.font;let h=C(t.size,i.size);"string"==typeof h&&(h=parseInt(h,10));let d=C(t.style,i.style);d&&!(""+d).match(pt)&&(console.warn('Invalid font style specified: "'+d+'"'),d="");const u={family:C(t.family,i.family),lineHeight:gr(C(t.lineHeight,i.lineHeight),h),size:h,style:d,weight:C(t.weight,i.weight),string:""};return u.string=function rr(t){return!t||T(t.size)||T(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(u),u}function Zt(t,i,h,d){let u,b,_,y=!0;for(u=0,b=t.length;u<b;++u)if(_=t[u],void 0!==_&&(void 0!==i&&"function"==typeof _&&(_=_(i),y=!1),void 0!==h&&z(_)&&(_=_[h%_.length],y=!1),void 0!==_))return d&&!y&&(d.cacheable=!1),_}function vt(t,i){return Object.assign(Object.create(t),i)}function zi(t,i=[""],h=t,d,u=(()=>t[0])){et(d)||(d=Cn("_fallback",t));const b={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:h,_fallback:d,_getTarget:u,override:u=>zi([u,...t],i,h,d)};return new Proxy(b,{deleteProperty:(i,h)=>(delete i[h],delete i._keys,delete t[0][h],!0),get:(h,d)=>Sn(h,d,(()=>function wr(t,i,h,d){let u;for(const b of i)if(u=Cn(br(b,t),h),et(u))return Bi(t,u)?Vi(h,d,t,u):u}(d,i,t,h))),getOwnPropertyDescriptor:(t,i)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],i),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,i)=>as(t).includes(i),ownKeys:t=>as(t),set(t,i,h){const d=t._storage||(t._storage=u());return t[i]=d[i]=h,delete t._keys,!0}})}function Vt(t,i,h,d){const u={_cacheable:!1,_proxy:t,_context:i,_subProxy:h,_stack:new Set,_descriptors:wn(t,d),setContext:i=>Vt(t,i,h,d),override:u=>Vt(t.override(u),i,h,d)};return new Proxy(u,{deleteProperty:(i,h)=>(delete i[h],delete t[h],!0),get:(t,i,h)=>Sn(t,i,(()=>function xr(t,i,h){const{_proxy:d,_context:u,_subProxy:b,_descriptors:_}=t;let y=d[i];return yt(y)&&_.isScriptable(i)&&(y=function _r(t,i,h,d){const{_proxy:u,_context:b,_subProxy:_,_stack:y}=h;if(y.has(t))throw new Error("Recursion detected: "+Array.from(y).join("->")+"->"+t);return y.add(t),i=i(b,_||d),y.delete(t),Bi(t,i)&&(i=Vi(u._scopes,u,t,i)),i}(i,y,t,h)),z(y)&&y.length&&(y=function yr(t,i,h,d){const{_proxy:u,_context:b,_subProxy:_,_descriptors:y}=h;if(et(b.index)&&d(t))i=i[b.index%i.length];else if(D(i[0])){const h=i,d=u._scopes.filter((t=>t!==h));i=[];for(const w of h){const h=Vi(d,u,t,w);i.push(Vt(h,b,_&&_[t],y))}}return i}(i,y,t,_.isIndexable)),Bi(i,y)&&(y=Vt(y,u,b&&b[i],_)),y}(t,i,h))),getOwnPropertyDescriptor:(i,h)=>i._descriptors.allKeys?Reflect.has(t,h)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,h),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(i,h)=>Reflect.has(t,h),ownKeys:()=>Reflect.ownKeys(t),set:(i,h,d)=>(t[h]=d,delete i[h],!0)})}function wn(t,i={scriptable:!0,indexable:!0}){const{_scriptable:h=i.scriptable,_indexable:d=i.indexable,_allKeys:u=i.allKeys}=t;return{allKeys:u,scriptable:h,indexable:d,isScriptable:yt(h)?h:()=>h,isIndexable:yt(d)?d:()=>d}}const br=(t,i)=>t?t+Oi(i):i,Bi=(t,i)=>D(i)&&"adapters"!==t&&(null===Object.getPrototypeOf(i)||i.constructor===Object);function Sn(t,i,h){if(Object.prototype.hasOwnProperty.call(t,i))return t[i];const d=h();return t[i]=d,d}function Pn(t,i,h){return yt(t)?t(i,h):t}const vr=(t,i)=>!0===t?i:"string"==typeof t?_t(i,t):void 0;function Mr(t,i,h,d,u){for(const b of i){const i=vr(h,b);if(i){t.add(i);const b=Pn(i._fallback,h,u);if(et(b)&&b!==h&&b!==d)return b}else if(!1===i&&et(d)&&h!==d)return null}return!1}function Vi(t,i,h,d){const u=i._rootScopes,b=Pn(i._fallback,h,d),_=[...t,...u],y=new Set;y.add(d);let w=rs(y,_,h,b||h,d);return!(null===w||et(b)&&b!==h&&(w=rs(y,_,b,w,d),null===w))&&zi(Array.from(y),[""],u,b,(()=>function kr(t,i,h){const d=t._getTarget();i in d||(d[i]={});const u=d[i];return z(u)&&D(h)?h:u}(i,h,d)))}function rs(t,i,h,d,u){for(;h;)h=Mr(t,i,h,d,u);return h}function Cn(t,i){for(const h of i){if(!h)continue;const i=h[t];if(et(i))return i}}function as(t){let i=t._keys;return i||(i=t._keys=function Sr(t){const i=new Set;for(const h of t)for(const t of Object.keys(h).filter((t=>!t.startsWith("_"))))i.add(t);return Array.from(i)}(t._scopes)),i}function Dn(t,i,h,d){const{iScale:u}=t,{key:b="r"}=this._parsing,_=new Array(d);let y,w,S,P;for(y=0,w=d;y<w;++y)S=y+h,P=i[S],_[y]={r:u.parse(_t(P,b),S)};return _}const kt=Number.EPSILON||1e-14,Wt=(t,i)=>i<t.length&&!t[i].skip&&t[i],On=t=>"x"===t?"y":"x";function Cr(t,i,h,d){const u=t.skip?i:t,b=i,_=h.skip?i:h,y=bi(b,u),w=bi(_,b);let S=y/(y+w),P=w/(y+w);S=isNaN(S)?0:S,P=isNaN(P)?0:P;const O=d*S,A=d*P;return{previous:{x:b.x-O*(_.x-u.x),y:b.y-O*(_.y-u.y)},next:{x:b.x+A*(_.x-u.x),y:b.y+A*(_.y-u.y)}}}function Ar(t,i="x"){const h=On(i),d=t.length,u=Array(d).fill(0),b=Array(d);let _,y,w,S=Wt(t,0);for(_=0;_<d;++_)if(y=w,w=S,S=Wt(t,_+1),w){if(S){const t=S[i]-w[i];u[_]=0!==t?(S[h]-w[h])/t:0}b[_]=y?S?R(u[_-1])!==R(u[_])?0:(u[_-1]+u[_])/2:u[_-1]:u[_]}(function Dr(t,i,h){const d=t.length;let u,b,_,y,w,S=Wt(t,0);for(let P=0;P<d-1;++P)if(w=S,S=Wt(t,P+1),w&&S){if(te(i[P],0,kt)){h[P]=h[P+1]=0;continue}u=h[P]/i[P],b=h[P+1]/i[P],y=Math.pow(u,2)+Math.pow(b,2),!(y<=9)&&(_=3/Math.sqrt(y),h[P]=u*_*i[P],h[P+1]=b*_*i[P])}})(t,u,b),function Or(t,i,h="x"){const d=On(h),u=t.length;let b,_,y,w=Wt(t,0);for(let S=0;S<u;++S){if(_=y,y=w,w=Wt(t,S+1),!y)continue;const u=y[h],P=y[d];_&&(b=(u-_[h])/3,y[`cp1${h}`]=u-b,y[`cp1${d}`]=P-b*i[S]),w&&(b=(w[h]-u)/3,y[`cp2${h}`]=u+b,y[`cp2${d}`]=P+b*i[S])}}(t,b,i)}function De(t,i,h){return Math.max(Math.min(t,h),i)}function Lr(t,i,h,d,u){let b,_,y,w;if(i.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===i.cubicInterpolationMode)Ar(t,u);else{let h=d?t[t.length-1]:t[0];for(b=0,_=t.length;b<_;++b)y=t[b],w=Cr(h,y,t[Math.min(b+1,_-(d?0:1))%_],i.tension),y.cp1x=w.previous.x,y.cp1y=w.previous.y,y.cp2x=w.next.x,y.cp2y=w.next.y,h=y}i.capBezierPoints&&function Tr(t,i){let h,d,u,b,_,y=re(t[0],i);for(h=0,d=t.length;h<d;++h)_=b,b=y,y=h<d-1&&re(t[h+1],i),b&&(u=t[h],_&&(u.cp1x=De(u.cp1x,i.left,i.right),u.cp1y=De(u.cp1y,i.top,i.bottom)),y&&(u.cp2x=De(u.cp2x,i.left,i.right),u.cp2y=De(u.cp2y,i.top,i.bottom)))}(t,h)}function An(){return typeof window<"u"&&typeof document<"u"}function Wi(t){let i=t.parentNode;return i&&"[object ShadowRoot]"===i.toString()&&(i=i.host),i}function He(t,i,h){let d;return"string"==typeof t?(d=parseInt(t,10),-1!==t.indexOf("%")&&(d=d/100*i.parentNode[h])):d=t,d}const Ke=t=>window.getComputedStyle(t,null);const At=["top","right","bottom","left"];function Ot(t,i,h){const d={};h=h?"-"+h:"";for(let u=0;u<4;u++){const b=At[u];d[b]=parseFloat(t[i+"-"+b+h])||0}return d.width=d.left+d.right,d.height=d.top+d.bottom,d}const Fr=(t,i,h)=>(t>0||i>0)&&(!h||!h.shadowRoot);function Pt(t,i){if("native"in t)return t;const{canvas:h,currentDevicePixelRatio:d}=i,u=Ke(h),b="border-box"===u.boxSizing,_=Ot(u,"padding"),y=Ot(u,"border","width"),{x:w,y:S,box:P}=function Ir(t,i){const h=t.touches,d=h&&h.length?h[0]:t,{offsetX:u,offsetY:b}=d;let _,y,w=!1;if(Fr(u,b,t.target))_=u,y=b;else{const t=i.getBoundingClientRect();_=d.clientX-t.left,y=d.clientY-t.top,w=!0}return{x:_,y,box:w}}(t,h),O=_.left+(P&&y.left),A=_.top+(P&&y.top);let{width:L,height:R}=i;return b&&(L-=_.width+y.width,R-=_.height+y.height),{x:Math.round((w-O)/L*h.width/d),y:Math.round((S-A)/R*h.height/d)}}const ai=t=>Math.round(10*t)/10;function Br(t,i,h,d){const u=Ke(t),b=Ot(u,"margin"),_=He(u.maxWidth,t,"clientWidth")||w,y=He(u.maxHeight,t,"clientHeight")||w,S=function zr(t,i,h){let d,u;if(void 0===i||void 0===h){const b=Wi(t);if(b){const t=b.getBoundingClientRect(),_=Ke(b),y=Ot(_,"border","width"),w=Ot(_,"padding");i=t.width-w.width-y.width,h=t.height-w.height-y.height,d=He(_.maxWidth,b,"clientWidth"),u=He(_.maxHeight,b,"clientHeight")}else i=t.clientWidth,h=t.clientHeight}return{width:i,height:h,maxWidth:d||w,maxHeight:u||w}}(t,i,h);let{width:P,height:O}=S;if("content-box"===u.boxSizing){const t=Ot(u,"border","width"),i=Ot(u,"padding");P-=i.width+t.width,O-=i.height+t.height}return P=Math.max(0,P-b.width),O=Math.max(0,d?Math.floor(P/d):O-b.height),P=ai(Math.min(P,_,S.maxWidth)),O=ai(Math.min(O,y,S.maxHeight)),P&&!O&&(O=ai(P/2)),{width:P,height:O}}function ls(t,i,h){const d=i||1,u=Math.floor(t.height*d),b=Math.floor(t.width*d);t.height=u/d,t.width=b/d;const _=t.canvas;return _.style&&(h||!_.style.height&&!_.style.width)&&(_.style.height=`${t.height}px`,_.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==d||_.height!==u||_.width!==b)&&(t.currentDevicePixelRatio=d,_.height=u,_.width=b,t.ctx.setTransform(d,0,0,d,0,0),!0)}const Et=function(){let t=!1;try{const i={get passive(){return t=!0,!1}};window.addEventListener("test",null,i),window.removeEventListener("test",null,i)}catch{}return t}();function cs(t,i){const h=function Rr(t,i){return Ke(t).getPropertyValue(i)}(t,i),d=h&&h.match(/^(\d+)(\.\d+)?px$/);return d?+d[1]:void 0}function Ct(t,i,h,d){return{x:t.x+h*(i.x-t.x),y:t.y+h*(i.y-t.y)}}function Wr(t,i,h,d){return{x:t.x+h*(i.x-t.x),y:"middle"===d?h<.5?t.y:i.y:"after"===d?h<1?t.y:i.y:h>0?i.y:t.y}}function Nr(t,i,h,d){const u={x:t.cp2x,y:t.cp2y},b={x:i.cp1x,y:i.cp1y},_=Ct(t,u,h),y=Ct(u,b,h),w=Ct(b,i,h),S=Ct(_,y,h),P=Ct(y,w,h);return Ct(S,P,h)}const Rt=new Map;function de(t,i,h){return function Hr(t,i){i=i||{};const h=t+JSON.stringify(i);let d=Rt.get(h);return d||(d=new Intl.NumberFormat(t,i),Rt.set(h,d)),d}(i,h).format(t)}function zt(t,i,h){return t?function(t,i){return{x:h=>t+t+i-h,setWidth(t){i=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,i)=>t-i,leftForLtr:(t,i)=>t-i}}(i,h):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,i)=>t+i,leftForLtr:(t,i)=>t}}function Tn(t,i){let h,d;("ltr"===i||"rtl"===i)&&(h=t.canvas.style,d=[h.getPropertyValue("direction"),h.getPropertyPriority("direction")],h.setProperty("direction",i,"important"),t.prevTextDirection=d)}function Ln(t,i){void 0!==i&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",i[0],i[1]))}function Rn(t){return"angle"===t?{between:oe,compare:Ao,normalize:Z}:{between:ut,compare:(t,i)=>t-i,normalize:t=>t}}function ds({start:t,end:i,count:h,loop:d,style:u}){return{start:t%h,end:i%h,loop:d&&(i-t+1)%h==0,style:u}}function En(t,i,h){if(!h)return[t];const{property:d,start:u,end:b}=h,_=i.length,{compare:y,between:w,normalize:S}=Rn(d),{start:P,end:O,loop:A,style:L}=function Yr(t,i,h){const{property:d,start:u,end:b}=h,{between:_,normalize:y}=Rn(d),w=i.length;let S,P,{start:O,end:A,loop:L}=t;if(L){for(O+=w,A+=w,S=0,P=w;S<P&&_(y(i[O%w][d]),u,b);++S)O--,A--;O%=w,A%=w}return A<O&&(A+=w),{start:O,end:A,loop:L,style:t.style}}(t,i,h),R=[];let F,V,B,W=!1,H=null;const M=()=>W||w(u,B,F)&&0!==y(u,B),k=()=>!W||0===y(b,F)||w(b,B,F);for(let t=P,h=P;t<=O;++t)V=i[t%_],!V.skip&&(F=S(V[d]),F!==B&&(W=w(F,u,b),null===H&&M()&&(H=0===y(F,u)?t:h),null!==H&&k()&&(R.push(ds({start:H,end:t,loop:A,count:_,style:L})),H=null),h=t,B=F));return null!==H&&R.push(ds({start:H,end:O,loop:A,count:_,style:L})),R}function Fn(t,i){const h=[],d=t.segments;for(let u=0;u<d.length;u++){const b=En(d[u],t.points,i);b.length&&h.push(...b)}return h}function us(t,i,h,d){return d&&d.setContext&&h?function qr(t,i,h,d){const u=t._chart.getContext(),b=fs(t.options),{_datasetIndex:_,options:{spanGaps:y}}=t,w=h.length,S=[];let P=b,O=i[0].start,A=O;function f(t,i,d,u){const b=y?-1:1;if(t!==i){for(t+=w;h[t%w].skip;)t-=b;for(;h[i%w].skip;)i+=b;t%w!=i%w&&(S.push({start:t%w,end:i%w,loop:d,style:u}),P=u,O=i%w)}}for(const t of i){O=y?O:t.start;let i,b=h[O%w];for(A=O+1;A<=t.end;A++){const y=h[A%w];i=fs(d.setContext(vt(u,{type:"segment",p0:b,p1:y,p0DataIndex:(A-1)%w,p1DataIndex:A%w,datasetIndex:_}))),Gr(i,P)&&f(O,A-1,t.loop,P),b=y,P=i}O<A-1&&f(O,A-1,t.loop,P)}return S}(t,i,h,d):i}function fs(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function Gr(t,i){return i&&JSON.stringify(t)!==JSON.stringify(i)}
/*!
 * Chart.js v3.9.1
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */var jt=new class Zr{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,i,h,d){const u=i.listeners[d],b=i.duration;u.forEach((d=>d({chart:t,initial:i.initial,numSteps:b,currentStep:Math.min(h-i.start,b)})))}_refresh(){this._request||(this._running=!0,this._request=V.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let i=0;this._charts.forEach(((h,d)=>{if(!h.running||!h.items.length)return;const u=h.items;let b,_=u.length-1,y=!1;for(;_>=0;--_)b=u[_],b._active?(b._total>h.duration&&(h.duration=b._total),b.tick(t),y=!0):(u[_]=u[u.length-1],u.pop());y&&(d.draw(),this._notify(d,h,t,"progress")),u.length||(h.running=!1,this._notify(d,h,t,"complete"),h.initial=!1),i+=u.length})),this._lastDate=t,0===i&&(this._running=!1)}_getAnims(t){const i=this._charts;let h=i.get(t);return h||(h={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},i.set(t,h)),h}listen(t,i,h){this._getAnims(t).listeners[i].push(h)}add(t,i){!i||!i.length||this._getAnims(t).items.push(...i)}has(t){return this._getAnims(t).items.length>0}start(t){const i=this._charts.get(t);i&&(i.running=!0,i.start=Date.now(),i.duration=i.items.reduce(((t,i)=>Math.max(t,i._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const i=this._charts.get(t);return!(!i||!i.running||!i.items.length)}stop(t){const i=this._charts.get(t);if(!i||!i.items.length)return;const h=i.items;let d=h.length-1;for(;d>=0;--d)h[d].cancel();i.items=[],this._notify(t,i,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const $t="transparent",ee={boolean:(t,i,h)=>h>.5?i:t,color(t,i,h){const d=ns(t||$t),u=d.valid&&ns(i||$t);return u&&u.valid?u.mix(d,h).hexString():i},number:(t,i,h)=>t+(i-t)*h};class In{constructor(t,i,h,d){const u=i[h];d=Zt([t.to,d,u,t.from]);const b=Zt([t.from,u,d]);this._active=!0,this._fn=t.fn||ee[t.type||typeof b],this._easing=B[t.easing]||B.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=i,this._prop=h,this._from=b,this._to=d,this._promises=void 0}active(){return this._active}update(t,i,h){if(this._active){this._notify(!1);const d=this._target[this._prop],u=h-this._start,b=this._duration-u;this._start=h,this._duration=Math.floor(Math.max(b,t.duration)),this._total+=u,this._loop=!!t.loop,this._to=Zt([t.to,i,d,t.from]),this._from=Zt([t.from,d,i])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const i=t-this._start,h=this._duration,d=this._prop,u=this._from,b=this._loop,_=this._to;let y;if(this._active=u!==_&&(b||i<h),!this._active)return this._target[d]=_,void this._notify(!0);i<0?this._target[d]=u:(y=i/h%2,y=b&&y>1?2-y:y,y=this._easing(Math.min(1,Math.max(0,y))),this._target[d]=this._fn(u,_,y))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((i,h)=>{t.push({res:i,rej:h})}))}_notify(t){const i=t?"res":"rej",h=this._promises||[];for(let t=0;t<h.length;t++)h[t][i]()}}at.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const se=Object.keys(at.animation);at.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),at.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),at.describe("animations",{_fallback:"animation"}),at.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class Ni{constructor(t,i){this._chart=t,this._properties=new Map,this.configure(i)}configure(t){if(!D(t))return;const i=this._properties;Object.getOwnPropertyNames(t).forEach((h=>{const d=t[h];if(!D(d))return;const u={};for(const t of se)u[t]=d[t];(z(d.properties)&&d.properties||[h]).forEach((t=>{(t===h||!i.has(t))&&i.set(t,u)}))}))}_animateOptions(t,i){const h=i.options,d=function sa(t,i){if(!i)return;let h=t.options;if(!h)return void(t.options=i);return h.$shared&&(t.options=h=Object.assign({},h,{$shared:!1,$animations:{}})),h}(t,h);if(!d)return[];const u=this._createAnimations(d,h);return h.$shared&&function ia(t,i){const h=[],d=Object.keys(i);for(let i=0;i<d.length;i++){const u=t[d[i]];u&&u.active()&&h.push(u.wait())}return Promise.all(h)}(t.options.$animations,h).then((()=>{t.options=h}),(()=>{})),u}_createAnimations(t,i){const h=this._properties,d=[],u=t.$animations||(t.$animations={}),b=Object.keys(i),_=Date.now();let y;for(y=b.length-1;y>=0;--y){const w=b[y];if("$"===w.charAt(0))continue;if("options"===w){d.push(...this._animateOptions(t,i));continue}const S=i[w];let P=u[w];const O=h.get(w);if(P){if(O&&P.active()){P.update(O,S,_);continue}P.cancel()}O&&O.duration?(u[w]=P=new In(O,t,w,S),d.push(P)):t[w]=S}return d}update(t,i){if(0===this._properties.size)return void Object.assign(t,i);const h=this._createAnimations(t,i);return h.length?(jt.add(this._chart,h),!0):void 0}}function ps(t,i){const h=t&&t.options||{},d=h.reverse,u=void 0===h.min?i:0,b=void 0===h.max?i:0;return{start:d?b:u,end:d?u:b}}function zn(t,i){const h=[],d=t._getSortedDatasetMetas(i);let u,b;for(u=0,b=d.length;u<b;++u)h.push(d[u].index);return h}function ms(t,i,h,d={}){const u=t.keys,b="single"===d.mode;let _,y,w,S;if(null!==i){for(_=0,y=u.length;_<y;++_){if(w=+u[_],w===h){if(d.all)continue;break}S=t.values[w],N(S)&&(b||0===i||R(i)===R(S))&&(i+=S)}return i}}function bs(t,i){const h=t&&t.options.stacked;return h||void 0===h&&void 0!==i.stack}function ca(t,i,h){const d=t[i]||(t[i]={});return d[h]||(d[h]={})}function xs(t,i,h,d){for(const u of i.getMatchingVisibleMetas(d).reverse()){const i=t[u.index];if(h&&i>0||!h&&i<0)return u.index}return null}function _s(t,i){const{chart:h,_cachedMeta:d}=t,u=h._stacks||(h._stacks={}),{iScale:b,vScale:_,index:y}=d,w=b.axis,S=_.axis,P=function aa(t,i,h){return`${t.id}.${i.id}.${h.stack||h.type}`}(b,_,d),O=i.length;let A;for(let t=0;t<O;++t){const h=i[t],{[w]:b,[S]:O}=h;A=(h._stacks||(h._stacks={}))[S]=ca(u,P,b),A[y]=O,A._top=xs(A,_,!0,d.type),A._bottom=xs(A,_,!1,d.type)}}function li(t,i){const h=t.scales;return Object.keys(h).filter((t=>h[t].axis===i)).shift()}function Yt(t,i){const h=t.controller.index,d=t.vScale&&t.vScale.axis;if(d){i=i||t._parsed;for(const t of i){const i=t._stacks;if(!i||void 0===i[d]||void 0===i[d][h])return;delete i[d][h]}}}const ci=t=>"reset"===t||"none"===t,ys=(t,i)=>i?t:Object.assign({},t);class it{constructor(t,i){this.chart=t,this._ctx=t.ctx,this.index=i,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=bs(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Yt(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,i=this._cachedMeta,h=this.getDataset(),n=(t,i,h,d)=>"x"===t?i:"r"===t?d:h,d=i.xAxisID=C(h.xAxisID,li(t,"x")),u=i.yAxisID=C(h.yAxisID,li(t,"y")),b=i.rAxisID=C(h.rAxisID,li(t,"r")),_=i.indexAxis,y=i.iAxisID=n(_,d,u,b),w=i.vAxisID=n(_,u,d,b);i.xScale=this.getScaleForId(d),i.yScale=this.getScaleForId(u),i.rScale=this.getScaleForId(b),i.iScale=this.getScaleForId(y),i.vScale=this.getScaleForId(w)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const i=this._cachedMeta;return t===i.iScale?i.vScale:i.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Zi(this._data,this),t._stacked&&Yt(t)}_dataCheck(){const t=this.getDataset(),i=t.data||(t.data=[]),h=this._data;if(D(i))this._data=function ra(t){const i=Object.keys(t),h=new Array(i.length);let d,u,b;for(d=0,u=i.length;d<u;++d)b=i[d],h[d]={x:b,y:t[b]};return h}(i);else if(h!==i){if(h){Zi(h,this);const t=this._cachedMeta;Yt(t),t._parsed=[]}i&&Object.isExtensible(i)&&function Eo(t,i){t._chartjs?t._chartjs.listeners.push(i):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[i]}}),F.forEach((i=>{const h="_onData"+Oi(i),d=t[i];Object.defineProperty(t,i,{configurable:!0,enumerable:!1,value(...i){const u=d.apply(this,i);return t._chartjs.listeners.forEach((t=>{"function"==typeof t[h]&&t[h](...i)})),u}})})))}(i,this),this._syncList=[],this._data=i}}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const i=this._cachedMeta,h=this.getDataset();let d=!1;this._dataCheck();const u=i._stacked;i._stacked=bs(i.vScale,i),i.stack!==h.stack&&(d=!0,Yt(i),i.stack=h.stack),this._resyncElements(t),(d||u!==i._stacked)&&_s(this,i._parsed)}configure(){const t=this.chart.config,i=t.datasetScopeKeys(this._type),h=t.getOptionScopes(this.getDataset(),i,!0);this.options=t.createResolver(h,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,i){const{_cachedMeta:h,_data:d}=this,{iScale:u,_stacked:b}=h,_=u.axis;let y,w,S,P=0===t&&i===d.length||h._sorted,O=t>0&&h._parsed[t-1];if(!1===this._parsing)h._parsed=d,h._sorted=!0,S=d;else{S=z(d[t])?this.parseArrayData(h,d,t,i):D(d[t])?this.parseObjectData(h,d,t,i):this.parsePrimitiveData(h,d,t,i);const f=()=>null===w[_]||O&&w[_]<O[_];for(y=0;y<i;++y)h._parsed[y+t]=w=S[y],P&&(f()&&(P=!1),O=w);h._sorted=P}b&&_s(this,S)}parsePrimitiveData(t,i,h,d){const{iScale:u,vScale:b}=t,_=u.axis,y=b.axis,w=u.getLabels(),S=u===b,P=new Array(d);let O,A,L;for(O=0,A=d;O<A;++O)L=O+h,P[O]={[_]:S||u.parse(w[L],L),[y]:b.parse(i[L],L)};return P}parseArrayData(t,i,h,d){const{xScale:u,yScale:b}=t,_=new Array(d);let y,w,S,P;for(y=0,w=d;y<w;++y)S=y+h,P=i[S],_[y]={x:u.parse(P[0],S),y:b.parse(P[1],S)};return _}parseObjectData(t,i,h,d){const{xScale:u,yScale:b}=t,{xAxisKey:_="x",yAxisKey:y="y"}=this._parsing,w=new Array(d);let S,P,O,A;for(S=0,P=d;S<P;++S)O=S+h,A=i[O],w[S]={x:u.parse(_t(A,_),O),y:b.parse(_t(A,y),O)};return w}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,i,h){const d=this.chart,u=this._cachedMeta,b=i[t.axis];return ms({keys:zn(d,!0),values:i._stacks[t.axis]},b,u.index,{mode:h})}updateRangeFromParsed(t,i,h,d){const u=h[i.axis];let b=null===u?NaN:u;const _=d&&h._stacks[i.axis];d&&_&&(d.values=_,b=ms(d,u,this._cachedMeta.index)),t.min=Math.min(t.min,b),t.max=Math.max(t.max,b)}getMinMax(t,i){const h=this._cachedMeta,d=h._parsed,u=h._sorted&&t===h.iScale,b=d.length,_=this._getOtherScale(t),y=((t,i,h)=>t&&!i.hidden&&i._stacked&&{keys:zn(h,!0),values:null})(i,h,this.chart),w={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:S,max:P}=function la(t){const{min:i,max:h,minDefined:d,maxDefined:u}=t.getUserBounds();return{min:d?i:Number.NEGATIVE_INFINITY,max:u?h:Number.POSITIVE_INFINITY}}(_);let O,A;function g(){A=d[O];const i=A[_.axis];return!N(A[t.axis])||S>i||P<i}for(O=0;O<b&&(g()||(this.updateRangeFromParsed(w,t,A,y),!u));++O);if(u)for(O=b-1;O>=0;--O)if(!g()){this.updateRangeFromParsed(w,t,A,y);break}return w}getAllParsedValues(t){const i=this._cachedMeta._parsed,h=[];let d,u,b;for(d=0,u=i.length;d<u;++d)b=i[d][t.axis],N(b)&&h.push(b);return h}getMaxOverflow(){return!1}getLabelAndValue(t){const i=this._cachedMeta,h=i.iScale,d=i.vScale,u=this.getParsed(t);return{label:h?""+h.getLabelForValue(u[h.axis]):"",value:d?""+d.getLabelForValue(u[d.axis]):""}}_update(t){const i=this._cachedMeta;this.update(t||"default"),i._clip=function oa(t){let i,h,d,u;return D(t)?(i=t.top,h=t.right,d=t.bottom,u=t.left):i=h=d=u=t,{top:i,right:h,bottom:d,left:u,disabled:!1===t}}(C(this.options.clip,function na(t,i,h){if(!1===h)return!1;const d=ps(t,h),u=ps(i,h);return{top:u.end,right:d.end,bottom:u.start,left:d.start}}(i.xScale,i.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,i=this.chart,h=this._cachedMeta,d=h.data||[],u=i.chartArea,b=[],_=this._drawStart||0,y=this._drawCount||d.length-_,w=this.options.drawActiveElementsOnTop;let S;for(h.dataset&&h.dataset.draw(t,u,_,y),S=_;S<_+y;++S){const i=d[S];i.hidden||(i.active&&w?b.push(i):i.draw(t,u))}for(S=0;S<b.length;++S)b[S].draw(t,u)}getStyle(t,i){const h=i?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(h):this.resolveDataElementOptions(t||0,h)}getContext(t,i,h){const d=this.getDataset();let u;if(t>=0&&t<this._cachedMeta.data.length){const i=this._cachedMeta.data[t];u=i.$context||(i.$context=function da(t,i,h){return vt(t,{active:!1,dataIndex:i,parsed:void 0,raw:void 0,element:h,index:i,mode:"default",type:"data"})}(this.getContext(),t,i)),u.parsed=this.getParsed(t),u.raw=d.data[t],u.index=u.dataIndex=t}else u=this.$context||(this.$context=function ha(t,i){return vt(t,{active:!1,dataset:void 0,datasetIndex:i,index:i,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),u.dataset=d,u.index=u.datasetIndex=this.index;return u.active=!!i,u.mode=h,u}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,i){return this._resolveElementOptions(this.dataElementType.id,i,t)}_resolveElementOptions(t,i="default",h){const d="active"===i,u=this._cachedDataOpts,b=t+"-"+i,_=u[b],y=this.enableOptionSharing&&et(h);if(_)return ys(_,y);const w=this.chart.config,S=w.datasetElementScopeKeys(this._type,t),P=d?[`${t}Hover`,"hover",t,""]:[t,""],O=w.getOptionScopes(this.getDataset(),S),A=Object.keys(at.elements[t]),L=w.resolveNamedOptions(O,A,(()=>this.getContext(h,d)),P);return L.$shared&&(L.$shared=y,u[b]=Object.freeze(ys(L,y))),L}_resolveAnimations(t,i,h){const d=this.chart,u=this._cachedDataOpts,b=`animation-${i}`,_=u[b];if(_)return _;let y;if(!1!==d.options.animation){const d=this.chart.config,u=d.datasetAnimationScopeKeys(this._type,i),b=d.getOptionScopes(this.getDataset(),u);y=d.createResolver(b,this.getContext(t,h,i))}const w=new Ni(d,y&&y.animations);return y&&y._cacheable&&(u[b]=Object.freeze(w)),w}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,i){return!i||ci(t)||this.chart._animationsDisabled}_getSharedOptions(t,i){const h=this.resolveDataElementOptions(t,i),d=this._sharedOptions,u=this.getSharedOptions(h),b=this.includeOptions(i,u)||u!==d;return this.updateSharedOptions(u,i,h),{sharedOptions:u,includeOptions:b}}updateElement(t,i,h,d){ci(d)?Object.assign(t,h):this._resolveAnimations(i,d).update(t,h)}updateSharedOptions(t,i,h){t&&!ci(i)&&this._resolveAnimations(void 0,i).update(t,h)}_setStyle(t,i,h,d){t.active=d;const u=this.getStyle(i,d);this._resolveAnimations(i,h,d).update(t,{options:!d&&this.getSharedOptions(u)||u})}removeHoverStyle(t,i,h){this._setStyle(t,h,"active",!1)}setHoverStyle(t,i,h){this._setStyle(t,h,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const i=this._data,h=this._cachedMeta.data;for(const[t,i,h]of this._syncList)this[t](i,h);this._syncList=[];const d=h.length,u=i.length,b=Math.min(u,d);b&&this.parse(0,b),u>d?this._insertElements(d,u-d,t):u<d&&this._removeElements(u,d-u)}_insertElements(t,i,h=!0){const d=this._cachedMeta,u=d.data,b=t+i;let _;const l=t=>{for(t.length+=i,_=t.length-1;_>=b;_--)t[_]=t[_-i]};for(l(u),_=t;_<b;++_)u[_]=new this.dataElementType;this._parsing&&l(d._parsed),this.parse(t,i),h&&this.updateElements(u,t,i,"reset")}updateElements(t,i,h,d){}_removeElements(t,i){const h=this._cachedMeta;if(this._parsing){const d=h._parsed.splice(t,i);h._stacked&&Yt(h,d)}h.data.splice(t,i)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[i,h,d]=t;this[i](h,d)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,i){i&&this._sync(["_removeElements",t,i]);const h=arguments.length-2;h&&this._sync(["_insertElements",t,h])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function ga(t){const i=t.iScale,h=function fa(t,i){if(!t._cache.$bar){const h=t.getMatchingVisibleMetas(i);let d=[];for(let i=0,u=h.length;i<u;i++)d=d.concat(h[i].controller.getAllParsedValues(t));t._cache.$bar=un(d.sort(((t,i)=>t-i)))}return t._cache.$bar}(i,t.type);let d,u,b,_,y=i._length;const l=()=>{32767===b||-32768===b||(et(_)&&(y=Math.min(y,Math.abs(b-_)||y)),_=b)};for(d=0,u=h.length;d<u;++d)b=i.getPixelForValue(h[d]),l();for(_=void 0,d=0,u=i.ticks.length;d<u;++d)b=i.getPixelForTick(d),l();return y}function Bn(t,i,h,d){return z(t)?function ba(t,i,h,d){const u=h.parse(t[0],d),b=h.parse(t[1],d),_=Math.min(u,b),y=Math.max(u,b);let w=_,S=y;Math.abs(_)>Math.abs(y)&&(w=y,S=_),i[h.axis]=S,i._custom={barStart:w,barEnd:S,start:u,end:b,min:_,max:y}}(t,i,h,d):i[h.axis]=h.parse(t,d),i}function vs(t,i,h,d){const u=t.iScale,b=t.vScale,_=u.getLabels(),y=u===b,w=[];let S,P,O,A;for(S=h,P=h+d;S<P;++S)A=i[S],O={},O[u.axis]=y||u.parse(_[S],S),w.push(Bn(A,O,b,S));return w}function hi(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function ya(t,i,h,d){let u=i.borderSkipped;const b={};if(!u)return void(t.borderSkipped=b);if(!0===u)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:_,end:y,reverse:w,top:S,bottom:P}=function _a(t){let i,h,d,u,b;return t.horizontal?(i=t.base>t.x,h="left",d="right"):(i=t.base<t.y,h="bottom",d="top"),i?(u="end",b="start"):(u="start",b="end"),{start:h,end:d,reverse:i,top:u,bottom:b}}(t);"middle"===u&&h&&(t.enableBorderRadius=!0,(h._top||0)===d?u=S:(h._bottom||0)===d?u=P:(b[Ms(P,_,y,w)]=!0,u=S)),b[Ms(u,_,y,w)]=!0,t.borderSkipped=b}function Ms(t,i,h,d){return d?(t=function va(t,i,h){return t===i?h:t===h?i:t}(t,i,h),t=ks(t,h,i)):t=ks(t,i,h),t}function ks(t,i,h){return"start"===t?i:"end"===t?h:t}function Ma(t,{inflateAmount:i},h){t.inflateAmount="auto"===i?1===h?.33:0:i}it.defaults={},it.prototype.datasetElementType=null,it.prototype.dataElementType=null;class ue extends it{parsePrimitiveData(t,i,h,d){return vs(t,i,h,d)}parseArrayData(t,i,h,d){return vs(t,i,h,d)}parseObjectData(t,i,h,d){const{iScale:u,vScale:b}=t,{xAxisKey:_="x",yAxisKey:y="y"}=this._parsing,w="x"===u.axis?_:y,S="x"===b.axis?_:y,P=[];let O,A,L,R;for(O=h,A=h+d;O<A;++O)R=i[O],L={},L[u.axis]=u.parse(_t(R,w),O),P.push(Bn(_t(R,S),L,b,O));return P}updateRangeFromParsed(t,i,h,d){super.updateRangeFromParsed(t,i,h,d);const u=h._custom;u&&i===this._cachedMeta.vScale&&(t.min=Math.min(t.min,u.min),t.max=Math.max(t.max,u.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const i=this._cachedMeta,{iScale:h,vScale:d}=i,u=this.getParsed(t),b=u._custom,_=hi(b)?"["+b.start+", "+b.end+"]":""+d.getLabelForValue(u[d.axis]);return{label:""+h.getLabelForValue(u[h.axis]),value:_}}initialize(){this.enableOptionSharing=!0,super.initialize();this._cachedMeta.stack=this.getDataset().stack}update(t){const i=this._cachedMeta;this.updateElements(i.data,0,i.data.length,t)}updateElements(t,i,h,d){const u="reset"===d,{index:b,_cachedMeta:{vScale:_}}=this,y=_.getBasePixel(),w=_.isHorizontal(),S=this._getRuler(),{sharedOptions:P,includeOptions:O}=this._getSharedOptions(i,d);for(let A=i;A<i+h;A++){const i=this.getParsed(A),h=u||T(i[_.axis])?{base:y,head:y}:this._calculateBarValuePixels(A),L=this._calculateBarIndexPixels(A,S),R=(i._stacks||{})[_.axis],F={horizontal:w,base:h.base,enableBorderRadius:!R||hi(i._custom)||b===R._top||b===R._bottom,x:w?h.head:L.center,y:w?L.center:h.head,height:w?L.size:Math.abs(h.size),width:w?Math.abs(h.size):L.size};O&&(F.options=P||this.resolveDataElementOptions(A,t[A].active?"active":d));const V=F.options||t[A].options;ya(F,V,R,b),Ma(F,V,S.ratio),this.updateElement(t[A],A,F,d)}}_getStacks(t,i){const{iScale:h}=this._cachedMeta,d=h.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),u=h.options.stacked,b=[],a=t=>{const h=t.controller.getParsed(i),d=h&&h[t.vScale.axis];if(T(d)||isNaN(d))return!0};for(const h of d)if((void 0===i||!a(h))&&((!1===u||-1===b.indexOf(h.stack)||void 0===u&&void 0===h.stack)&&b.push(h.stack),h.index===t))break;return b.length||b.push(void 0),b}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,i,h){const d=this._getStacks(t,h),u=void 0!==i?d.indexOf(i):-1;return-1===u?d.length-1:u}_getRuler(){const t=this.options,i=this._cachedMeta,h=i.iScale,d=[];let u,b;for(u=0,b=i.data.length;u<b;++u)d.push(h.getPixelForValue(this.getParsed(u)[h.axis],u));const _=t.barThickness;return{min:_||ga(i),pixels:d,start:h._startPixel,end:h._endPixel,stackCount:this._getStackCount(),scale:h,grouped:t.grouped,ratio:_?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:i,_stacked:h},options:{base:d,minBarLength:u}}=this,b=d||0,_=this.getParsed(t),y=_._custom,w=hi(y);let S,P,O=_[i.axis],A=0,L=h?this.applyStack(i,_,h):O;L!==O&&(A=L-O,L=O),w&&(O=y.barStart,L=y.barEnd-y.barStart,0!==O&&R(O)!==R(y.barEnd)&&(A=0),A+=O);const F=T(d)||w?A:d;let V=i.getPixelForValue(F);if(S=this.chart.getDataVisibility(t)?i.getPixelForValue(A+L):V,P=S-V,Math.abs(P)<u){P=function xa(t,i,h){return 0!==t?R(t):(i.isHorizontal()?1:-1)*(i.min>=h?1:-1)}(P,i,b)*u,O===b&&(V-=P/2);const t=i.getPixelForDecimal(0),h=i.getPixelForDecimal(1),d=Math.min(t,h),_=Math.max(t,h);V=Math.max(Math.min(V,_),d),S=V+P}if(V===i.getPixelForValue(b)){const t=R(P)*i.getLineWidthForValue(b)/2;V+=t,P-=t}return{size:P,base:V,head:S,center:S+P/2}}_calculateBarIndexPixels(t,i){const h=i.scale,d=this.options,u=d.skipNull,b=C(d.maxBarThickness,1/0);let _,y;if(i.grouped){const h=u?this._getStackCount(t):i.stackCount,w="flex"===d.barThickness?function ma(t,i,h,d){const u=i.pixels,b=u[t];let _=t>0?u[t-1]:null,y=t<u.length-1?u[t+1]:null;const w=h.categoryPercentage;null===_&&(_=b-(null===y?i.end-i.start:y-b)),null===y&&(y=b+b-_);const S=b-(b-Math.min(_,y))/2*w;return{chunk:Math.abs(y-_)/2*w/d,ratio:h.barPercentage,start:S}}(t,i,d,h):function pa(t,i,h,d){const u=h.barThickness;let b,_;return T(u)?(b=i.min*h.categoryPercentage,_=h.barPercentage):(b=u*d,_=1),{chunk:b/d,ratio:_,start:i.pixels[t]-b/2}}(t,i,d,h),S=this._getStackIndex(this.index,this._cachedMeta.stack,u?t:void 0);_=w.start+w.chunk*S+w.chunk/2,y=Math.min(b,w.chunk*w.ratio)}else _=h.getPixelForValue(this.getParsed(t)[h.axis],t),y=Math.min(b,i.min*i.ratio);return{base:_-y/2,head:_+y/2,center:_,size:y}}draw(){const t=this._cachedMeta,i=t.vScale,h=t.data,d=h.length;let u=0;for(;u<d;++u)null!==this.getParsed(u)[i.axis]&&h[u].draw(this._ctx)}}ue.id="bar",ue.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},ue.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class fe extends it{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,i,h,d){const u=super.parsePrimitiveData(t,i,h,d);for(let t=0;t<u.length;t++)u[t]._custom=this.resolveDataElementOptions(t+h).radius;return u}parseArrayData(t,i,h,d){const u=super.parseArrayData(t,i,h,d);for(let t=0;t<u.length;t++){const d=i[h+t];u[t]._custom=C(d[2],this.resolveDataElementOptions(t+h).radius)}return u}parseObjectData(t,i,h,d){const u=super.parseObjectData(t,i,h,d);for(let t=0;t<u.length;t++){const d=i[h+t];u[t]._custom=C(d&&d.r&&+d.r,this.resolveDataElementOptions(t+h).radius)}return u}getMaxOverflow(){const t=this._cachedMeta.data;let i=0;for(let h=t.length-1;h>=0;--h)i=Math.max(i,t[h].size(this.resolveDataElementOptions(h))/2);return i>0&&i}getLabelAndValue(t){const i=this._cachedMeta,{xScale:h,yScale:d}=i,u=this.getParsed(t),b=h.getLabelForValue(u.x),_=d.getLabelForValue(u.y),y=u._custom;return{label:i.label,value:"("+b+", "+_+(y?", "+y:"")+")"}}update(t){const i=this._cachedMeta.data;this.updateElements(i,0,i.length,t)}updateElements(t,i,h,d){const u="reset"===d,{iScale:b,vScale:_}=this._cachedMeta,{sharedOptions:y,includeOptions:w}=this._getSharedOptions(i,d),S=b.axis,P=_.axis;for(let O=i;O<i+h;O++){const i=t[O],h=!u&&this.getParsed(O),A={},L=A[S]=u?b.getPixelForDecimal(.5):b.getPixelForValue(h[S]),R=A[P]=u?_.getBasePixel():_.getPixelForValue(h[P]);A.skip=isNaN(L)||isNaN(R),w&&(A.options=y||this.resolveDataElementOptions(O,i.active?"active":d),u&&(A.options.radius=0)),this.updateElement(i,O,A,d)}}resolveDataElementOptions(t,i){const h=this.getParsed(t);let d=super.resolveDataElementOptions(t,i);d.$shared&&(d=Object.assign({},d,{$shared:!1}));const u=d.radius;return"active"!==i&&(d.radius=0),d.radius+=C(h&&h._custom,u),d}}fe.id="bubble",fe.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},fe.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Lt extends it{constructor(t,i){super(t,i),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,i){const h=this.getDataset().data,d=this._cachedMeta;if(!1===this._parsing)d._parsed=h;else{let u,b,o=t=>+h[t];if(D(h[t])){const{key:t="value"}=this._parsing;o=i=>+_t(h[i],t)}for(u=t,b=t+i;u<b;++u)d._parsed[u]=o(u)}}_getRotation(){return nt(this.options.rotation-90)}_getCircumference(){return nt(this.options.circumference)}_getRotationExtents(){let t=_,i=-_;for(let h=0;h<this.chart.data.datasets.length;++h)if(this.chart.isDatasetVisible(h)){const d=this.chart.getDatasetMeta(h).controller,u=d._getRotation(),b=d._getCircumference();t=Math.min(t,u),i=Math.max(i,u+b)}return{rotation:t,circumference:i-t}}update(t){const i=this.chart,{chartArea:h}=i,d=this._cachedMeta,u=d.data,y=this.getMaxBorderWidth()+this.getMaxOffset(u)+this.options.spacing,w=Math.max((Math.min(h.width,h.height)-y)/2,0),S=Math.min(((t,i)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:t/i)(this.options.cutout,w),1),O=this._getRingWeight(this.index),{circumference:A,rotation:L}=this._getRotationExtents(),{ratioX:R,ratioY:F,offsetX:V,offsetY:B}=function ka(t,i,h){let d=1,u=1,y=0,w=0;if(i<_){const _=t,S=_+i,O=Math.cos(_),A=Math.sin(_),L=Math.cos(S),R=Math.sin(S),f=(t,i,d)=>oe(t,_,S,!0)?1:Math.max(i,i*h,d,d*h),g=(t,i,d)=>oe(t,_,S,!0)?-1:Math.min(i,i*h,d,d*h),F=f(0,O,L),V=f(P,A,R),B=g(b,O,L),W=g(b+P,A,R);d=(F-B)/2,u=(V-W)/2,y=-(F+B)/2,w=-(V+W)/2}return{ratioX:d,ratioY:u,offsetX:y,offsetY:w}}(L,A,S),W=(h.width-y)/R,H=(h.height-y)/F,j=Math.max(Math.min(W,H)/2,0),X=an(this.options.radius,j),q=(X-Math.max(X*S,0))/this._getVisibleDatasetWeightTotal();this.offsetX=V*X,this.offsetY=B*X,d.total=this.calculateTotal(),this.outerRadius=X-q*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-q*O,0),this.updateElements(u,0,u.length,t)}_circumference(t,i){const h=this.options,d=this._cachedMeta,u=this._getCircumference();return i&&h.animation.animateRotate||!this.chart.getDataVisibility(t)||null===d._parsed[t]||d.data[t].hidden?0:this.calculateCircumference(d._parsed[t]*u/_)}updateElements(t,i,h,d){const u="reset"===d,b=this.chart,_=b.chartArea,y=b.options.animation,w=(_.left+_.right)/2,S=(_.top+_.bottom)/2,P=u&&y.animateScale,O=P?0:this.innerRadius,A=P?0:this.outerRadius,{sharedOptions:L,includeOptions:R}=this._getSharedOptions(i,d);let F,V=this._getRotation();for(F=0;F<i;++F)V+=this._circumference(F,u);for(F=i;F<i+h;++F){const i=this._circumference(F,u),h=t[F],b={x:w+this.offsetX,y:S+this.offsetY,startAngle:V,endAngle:V+i,circumference:i,outerRadius:A,innerRadius:O};R&&(b.options=L||this.resolveDataElementOptions(F,h.active?"active":d)),V+=i,this.updateElement(h,F,b,d)}}calculateTotal(){const t=this._cachedMeta,i=t.data;let h,d=0;for(h=0;h<i.length;h++){const u=t._parsed[h];null!==u&&!isNaN(u)&&this.chart.getDataVisibility(h)&&!i[h].hidden&&(d+=Math.abs(u))}return d}calculateCircumference(t){const i=this._cachedMeta.total;return i>0&&!isNaN(t)?_*(Math.abs(t)/i):0}getLabelAndValue(t){const i=this._cachedMeta,h=this.chart,d=h.data.labels||[],u=de(i._parsed[t],h.options.locale);return{label:d[t]||"",value:u}}getMaxBorderWidth(t){let i=0;const h=this.chart;let d,u,b,_,y;if(!t)for(d=0,u=h.data.datasets.length;d<u;++d)if(h.isDatasetVisible(d)){b=h.getDatasetMeta(d),t=b.data,_=b.controller;break}if(!t)return 0;for(d=0,u=t.length;d<u;++d)y=_.resolveDataElementOptions(d),"inner"!==y.borderAlign&&(i=Math.max(i,y.borderWidth||0,y.hoverBorderWidth||0));return i}getMaxOffset(t){let i=0;for(let h=0,d=t.length;h<d;++h){const t=this.resolveDataElementOptions(h);i=Math.max(i,t.offset||0,t.hoverOffset||0)}return i}_getRingWeightOffset(t){let i=0;for(let h=0;h<t;++h)this.chart.isDatasetVisible(h)&&(i+=this._getRingWeight(h));return i}_getRingWeight(t){return Math.max(C(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Lt.id="doughnut",Lt.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Lt.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Lt.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const i=t.data;if(i.labels.length&&i.datasets.length){const{labels:{pointStyle:h}}=t.legend.options;return i.labels.map(((i,d)=>{const u=t.getDatasetMeta(0).controller.getStyle(d);return{text:i,fillStyle:u.backgroundColor,strokeStyle:u.borderColor,lineWidth:u.borderWidth,pointStyle:h,hidden:!t.getDataVisibility(d),index:d}}))}return[]}},onClick(t,i,h){h.chart.toggleDataVisibility(i.index),h.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let i=t.label;const h=": "+t.formattedValue;return z(i)?(i=i.slice(),i[0]+=h):i+=h,i}}}}};class ge extends it{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const i=this._cachedMeta,{dataset:h,data:d=[],_dataset:u}=i,b=this.chart._animationsDisabled;let{start:_,count:y}=pn(i,d,b);this._drawStart=_,this._drawCount=y,mn(i)&&(_=0,y=d.length),h._chart=this.chart,h._datasetIndex=this.index,h._decimated=!!u._decimated,h.points=d;const w=this.resolveDatasetElementOptions(t);this.options.showLine||(w.borderWidth=0),w.segment=this.options.segment,this.updateElement(h,void 0,{animated:!b,options:w},t),this.updateElements(d,_,y,t)}updateElements(t,i,h,d){const u="reset"===d,{iScale:b,vScale:_,_stacked:y,_dataset:w}=this._cachedMeta,{sharedOptions:S,includeOptions:P}=this._getSharedOptions(i,d),O=b.axis,A=_.axis,{spanGaps:L,segment:R}=this.options,F=Bt(L)?L:Number.POSITIVE_INFINITY,V=this.chart._animationsDisabled||u||"none"===d;let B=i>0&&this.getParsed(i-1);for(let L=i;L<i+h;++L){const i=t[L],h=this.getParsed(L),W=V?i:{},H=T(h[A]),j=W[O]=b.getPixelForValue(h[O],L),X=W[A]=u||H?_.getBasePixel():_.getPixelForValue(y?this.applyStack(_,h,y):h[A],L);W.skip=isNaN(j)||isNaN(X)||H,W.stop=L>0&&Math.abs(h[O]-B[O])>F,R&&(W.parsed=h,W.raw=w.data[L]),P&&(W.options=S||this.resolveDataElementOptions(L,i.active?"active":d)),V||this.updateElement(i,L,W,d),B=h}}getMaxOverflow(){const t=this._cachedMeta,i=t.dataset,h=i.options&&i.options.borderWidth||0,d=t.data||[];if(!d.length)return h;const u=d[0].size(this.resolveDataElementOptions(0)),b=d[d.length-1].size(this.resolveDataElementOptions(d.length-1));return Math.max(h,u,b)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}ge.id="line",ge.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},ge.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class pe extends it{constructor(t,i){super(t,i),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const i=this._cachedMeta,h=this.chart,d=h.data.labels||[],u=de(i._parsed[t].r,h.options.locale);return{label:d[t]||"",value:u}}parseObjectData(t,i,h,d){return Dn.bind(this)(t,i,h,d)}update(t){const i=this._cachedMeta.data;this._updateRadius(),this.updateElements(i,0,i.length,t)}getMinMax(){const t=this._cachedMeta,i={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,h)=>{const d=this.getParsed(h).r;!isNaN(d)&&this.chart.getDataVisibility(h)&&(d<i.min&&(i.min=d),d>i.max&&(i.max=d))})),i}_updateRadius(){const t=this.chart,i=t.chartArea,h=t.options,d=Math.min(i.right-i.left,i.bottom-i.top),u=Math.max(d/2,0),b=(u-Math.max(h.cutoutPercentage?u/100*h.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=u-b*this.index,this.innerRadius=this.outerRadius-b}updateElements(t,i,h,d){const u="reset"===d,_=this.chart,y=_.options.animation,w=this._cachedMeta.rScale,S=w.xCenter,P=w.yCenter,O=w.getIndexAngle(0)-.5*b;let A,L=O;const R=360/this.countVisibleElements();for(A=0;A<i;++A)L+=this._computeAngle(A,d,R);for(A=i;A<i+h;A++){const i=t[A];let h=L,b=L+this._computeAngle(A,d,R),F=_.getDataVisibility(A)?w.getDistanceFromCenterForValue(this.getParsed(A).r):0;L=b,u&&(y.animateScale&&(F=0),y.animateRotate&&(h=b=O));const V={x:S,y:P,innerRadius:0,outerRadius:F,startAngle:h,endAngle:b,options:this.resolveDataElementOptions(A,i.active?"active":d)};this.updateElement(i,A,V,d)}}countVisibleElements(){const t=this._cachedMeta;let i=0;return t.data.forEach(((t,h)=>{!isNaN(this.getParsed(h).r)&&this.chart.getDataVisibility(h)&&i++})),i}_computeAngle(t,i,h){return this.chart.getDataVisibility(t)?nt(this.resolveDataElementOptions(t,i).angle||h):0}}pe.id="polarArea",pe.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},pe.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const i=t.data;if(i.labels.length&&i.datasets.length){const{labels:{pointStyle:h}}=t.legend.options;return i.labels.map(((i,d)=>{const u=t.getDatasetMeta(0).controller.getStyle(d);return{text:i,fillStyle:u.backgroundColor,strokeStyle:u.borderColor,lineWidth:u.borderWidth,pointStyle:h,hidden:!t.getDataVisibility(d),index:d}}))}return[]}},onClick(t,i,h){h.chart.toggleDataVisibility(i.index),h.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class qe extends Lt{}qe.id="pie",qe.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class me extends it{getLabelAndValue(t){const i=this._cachedMeta.vScale,h=this.getParsed(t);return{label:i.getLabels()[t],value:""+i.getLabelForValue(h[i.axis])}}parseObjectData(t,i,h,d){return Dn.bind(this)(t,i,h,d)}update(t){const i=this._cachedMeta,h=i.dataset,d=i.data||[],u=i.iScale.getLabels();if(h.points=d,"resize"!==t){const i=this.resolveDatasetElementOptions(t);this.options.showLine||(i.borderWidth=0);const b={_loop:!0,_fullLoop:u.length===d.length,options:i};this.updateElement(h,void 0,b,t)}this.updateElements(d,0,d.length,t)}updateElements(t,i,h,d){const u=this._cachedMeta.rScale,b="reset"===d;for(let _=i;_<i+h;_++){const i=t[_],h=this.resolveDataElementOptions(_,i.active?"active":d),y=u.getPointPositionForValue(_,this.getParsed(_).r),w=b?u.xCenter:y.x,S=b?u.yCenter:y.y,P={x:w,y:S,angle:y.angle,skip:isNaN(w)||isNaN(S),options:h};this.updateElement(i,_,P,d)}}}me.id="radar",me.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},me.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class st{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:i,y:h}=this.getProps(["x","y"],t);return{x:i,y:h}}hasValue(){return Bt(this.x)&&Bt(this.y)}getProps(t,i){const h=this.$animations;if(!i||!h)return this;const d={};return t.forEach((t=>{d[t]=h[t]&&h[t].active()?h[t]._to:this[t]})),d}}st.defaults={},st.defaultRoutes=void 0;const le={values:t=>z(t)?t:""+t,numeric(t,i,h){if(0===t)return"0";const d=this.chart.options.locale;let u,b=t;if(h.length>1){const i=Math.max(Math.abs(h[0].value),Math.abs(h[h.length-1].value));(i<1e-4||i>1e15)&&(u="scientific"),b=function wa(t,i){let h=i.length>3?i[2].value-i[1].value:i[1].value-i[0].value;return Math.abs(h)>=1&&t!==Math.floor(t)&&(h=t-Math.floor(t)),h}(t,h)}const _=L(Math.abs(b)),y=Math.max(Math.min(-1*Math.floor(_),20),0),w={notation:u,minimumFractionDigits:y,maximumFractionDigits:y};return Object.assign(w,this.options.ticks.format),de(t,d,w)},logarithmic(t,i,h){if(0===t)return"0";const d=t/Math.pow(10,Math.floor(L(t)));return 1===d||2===d||5===d?le.numeric.call(this,t,i,h):""}};var be={formatters:le};function Sa(t,i){const h=t.options.ticks,d=h.maxTicksLimit||function Pa(t){const i=t.options.offset,h=t._tickSize(),d=t._length/h+(i?0:1),u=t._maxLength/h;return Math.floor(Math.min(d,u))}(t),u=h.major.enabled?function Da(t){const i=[];let h,d;for(h=0,d=t.length;h<d;h++)t[h].major&&i.push(h);return i}(i):[],b=u.length,_=u[0],y=u[b-1],w=[];if(b>d)return function Oa(t,i,h,d){let u,b=0,_=h[0];for(d=Math.ceil(d),u=0;u<t.length;u++)u===_&&(i.push(t[u]),b++,_=h[b*d])}(i,w,u,b/d),w;const S=function Ca(t,i,h){const d=function Aa(t){const i=t.length;let h,d;if(i<2)return!1;for(d=t[0],h=1;h<i;++h)if(t[h]-t[h-1]!==d)return!1;return d}(t),u=i.length/h;if(!d)return Math.max(u,1);const b=function Do(t){const i=[],h=Math.sqrt(t);let d;for(d=1;d<h;d++)t%d==0&&(i.push(d),i.push(t/d));return h===(0|h)&&i.push(h),i.sort(((t,i)=>t-i)).pop(),i}(d);for(let t=0,i=b.length-1;t<i;t++){const i=b[t];if(i>u)return i}return Math.max(u,1)}(u,i,d);if(b>0){let t,h;const d=b>1?Math.round((y-_)/(b-1)):null;for(Oe(i,w,S,T(d)?0:_-d,_),t=0,h=b-1;t<h;t++)Oe(i,w,S,u[t],u[t+1]);return Oe(i,w,S,y,T(d)?i.length:y+d),w}return Oe(i,w,S),w}function Oe(t,i,h,d,u){const b=C(d,0),_=Math.min(C(u,t.length),t.length);let y,w,S,P=0;for(h=Math.ceil(h),u&&(y=u-d,h=y/Math.floor(y/h)),S=b;S<0;)P++,S=Math.round(b+P*h);for(w=Math.max(b,0);w<_;w++)w===S&&(i.push(t[w]),P++,S=Math.round(b+P*h))}at.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,i)=>i.lineWidth,tickColor:(t,i)=>i.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:be.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),at.route("scale.ticks","color","","color"),at.route("scale.grid","color","","borderColor"),at.route("scale.grid","borderColor","","borderColor"),at.route("scale.title","color","","color"),at.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),at.describe("scales",{_fallback:"scale"}),at.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const ws=(t,i,h)=>"top"===i||"left"===i?t[i]+h:t[i]-h;function Ss(t,i){const h=[],d=t.length/i,u=t.length;let b=0;for(;b<u;b+=d)h.push(t[Math.floor(b)]);return h}function La(t,i,h){const d=t.ticks.length,u=Math.min(i,d-1),b=t._startPixel,_=t._endPixel,y=1e-6;let w,S=t.getPixelForTick(u);if(!(h&&(w=1===d?Math.max(S-b,_-S):0===i?(t.getPixelForTick(1)-S)/2:(S-t.getPixelForTick(u-1))/2,S+=u<i?w:-w,S<b-y||S>_+y)))return S}function Xt(t){return t.drawTicks?t.tickLength:0}function Ps(t,i){if(!t.display)return 0;const h=$(t.font,i),d=K(t.padding);return(z(t.text)?t.text.length:1)*h.lineHeight+d.height}function Ia(t,i,h){let d=Li(t);return(h&&"right"!==i||!h&&"right"===i)&&(d=(t=>"left"===t?"right":"right"===t?"left":t)(d)),d}class Mt extends st{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,i){return t}getUserBounds(){let{_userMin:t,_userMax:i,_suggestedMin:h,_suggestedMax:d}=this;return t=Q(t,Number.POSITIVE_INFINITY),i=Q(i,Number.NEGATIVE_INFINITY),h=Q(h,Number.POSITIVE_INFINITY),d=Q(d,Number.NEGATIVE_INFINITY),{min:Q(t,h),max:Q(i,d),minDefined:N(t),maxDefined:N(i)}}getMinMax(t){let i,{min:h,max:d,minDefined:u,maxDefined:b}=this.getUserBounds();if(u&&b)return{min:h,max:d};const _=this.getMatchingVisibleMetas();for(let y=0,w=_.length;y<w;++y)i=_[y].controller.getMinMax(this,t),u||(h=Math.min(h,i.min)),b||(d=Math.max(d,i.max));return h=b&&h>d?d:h,d=u&&h>d?h:d,{min:Q(h,Q(d,h)),max:Q(d,Q(h,d))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){I(this.options.beforeUpdate,[this])}update(t,i,h){const{beginAtZero:d,grace:u,ticks:b}=this.options,_=b.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=i,this._margins=h=Object.assign({left:0,right:0,top:0,bottom:0},h),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+h.left+h.right:this.height+h.top+h.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function mr(t,i,h){const{min:d,max:u}=t,b=an(i,(u-d)/2),r=(t,i)=>h&&0===t?0:t+i;return{min:r(d,-Math.abs(b)),max:r(u,b)}}(this,u,d),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const y=_<this.ticks.length;this._convertTicksToLabels(y?Ss(this.ticks,_):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),b.display&&(b.autoSkip||"auto"===b.source)&&(this.ticks=Sa(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),y&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,i,h=this.options.reverse;this.isHorizontal()?(t=this.left,i=this.right):(t=this.top,i=this.bottom,h=!h),this._startPixel=t,this._endPixel=i,this._reversePixels=h,this._length=i-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){I(this.options.afterUpdate,[this])}beforeSetDimensions(){I(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){I(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),I(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){I(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const i=this.options.ticks;let h,d,u;for(h=0,d=t.length;h<d;h++)u=t[h],u.label=I(i.callback,[u.value,h,t],this)}afterTickToLabelConversion(){I(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){I(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,i=t.ticks,h=this.ticks.length,d=i.minRotation||0,u=i.maxRotation;let b,_,y,w=d;if(!this._isVisible()||!i.display||d>=u||h<=1||!this.isHorizontal())return void(this.labelRotation=d);const S=this._getLabelSizes(),P=S.widest.width,O=S.highest.height,A=Y(this.chart.width-P,0,this.maxWidth);b=t.offset?this.maxWidth/h:A/(h-1),P+6>b&&(b=A/(h-(t.offset?.5:1)),_=this.maxHeight-Xt(t.grid)-i.padding-Ps(t.title,this.chart.options.font),y=Math.sqrt(P*P+O*O),w=Ai(Math.min(Math.asin(Y((S.highest.height+6)/b,-1,1)),Math.asin(Y(_/y,-1,1))-Math.asin(Y(O/y,-1,1)))),w=Math.max(d,Math.min(u,w))),this.labelRotation=w}afterCalculateLabelRotation(){I(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){I(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:i,options:{ticks:h,title:d,grid:u}}=this,b=this._isVisible(),_=this.isHorizontal();if(b){const b=Ps(d,i.options.font);if(_?(t.width=this.maxWidth,t.height=Xt(u)+b):(t.height=this.maxHeight,t.width=Xt(u)+b),h.display&&this.ticks.length){const{first:i,last:d,widest:u,highest:b}=this._getLabelSizes(),y=2*h.padding,w=nt(this.labelRotation),S=Math.cos(w),P=Math.sin(w);if(_){const i=h.mirror?0:P*u.width+S*b.height;t.height=Math.min(this.maxHeight,t.height+i+y)}else{const i=h.mirror?0:S*u.width+P*b.height;t.width=Math.min(this.maxWidth,t.width+i+y)}this._calculatePadding(i,d,P,S)}}this._handleMargins(),_?(this.width=this._length=i.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=i.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,i,h,d){const{ticks:{align:u,padding:b},position:_}=this.options,y=0!==this.labelRotation,w="top"!==_&&"x"===this.axis;if(this.isHorizontal()){const _=this.getPixelForTick(0)-this.left,S=this.right-this.getPixelForTick(this.ticks.length-1);let P=0,O=0;y?w?(P=d*t.width,O=h*i.height):(P=h*t.height,O=d*i.width):"start"===u?O=i.width:"end"===u?P=t.width:"inner"!==u&&(P=t.width/2,O=i.width/2),this.paddingLeft=Math.max((P-_+b)*this.width/(this.width-_),0),this.paddingRight=Math.max((O-S+b)*this.width/(this.width-S),0)}else{let h=i.height/2,d=t.height/2;"start"===u?(h=0,d=t.height):"end"===u&&(h=i.height,d=0),this.paddingTop=h+b,this.paddingBottom=d+b}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){I(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:i}=this.options;return"top"===i||"bottom"===i||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let i,h;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),i=0,h=t.length;i<h;i++)T(t[i].label)&&(t.splice(i,1),h--,i--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const i=this.options.ticks.sampleSize;let h=this.ticks;i<h.length&&(h=Ss(h,i)),this._labelSizes=t=this._computeLabelSizes(h,h.length)}return t}_computeLabelSizes(t,i){const{ctx:h,_longestTextCache:d}=this,u=[],b=[];let _,y,w,S,P,O,A,L,R,F,V,B=0,W=0;for(_=0;_<i;++_){if(S=t[_].label,P=this._resolveTickFontOptions(_),h.font=O=P.string,A=d[O]=d[O]||{data:{},gc:[]},L=P.lineHeight,R=F=0,T(S)||z(S)){if(z(S))for(y=0,w=S.length;y<w;++y)V=S[y],!T(V)&&!z(V)&&(R=Ne(h,A.data,A.gc,R,V),F+=L)}else R=Ne(h,A.data,A.gc,R,S),F=L;u.push(R),b.push(F),B=Math.max(R,B),W=Math.max(F,W)}!function Ra(t,i){E(t,(t=>{const h=t.gc,d=h.length/2;let u;if(d>i){for(u=0;u<d;++u)delete t.data[h[u]];h.splice(0,d)}}))}(d,i);const H=u.indexOf(B),j=b.indexOf(W),M=t=>({width:u[t]||0,height:b[t]||0});return{first:M(0),last:M(i-1),widest:M(H),highest:M(j),widths:u,heights:b}}getLabelForValue(t){return t}getPixelForValue(t,i){return NaN}getValueForPixel(t){}getPixelForTick(t){const i=this.ticks;return t<0||t>i.length-1?null:this.getPixelForValue(i[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const i=this._startPixel+t*this._length;return function To(t){return Y(t,-32768,32767)}(this._alignToPixels?wt(this.chart,i,0):i)}getDecimalForPixel(t){const i=(t-this._startPixel)/this._length;return this._reversePixels?1-i:i}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:i}=this;return t<0&&i<0?i:t>0&&i>0?t:0}getContext(t){const i=this.ticks||[];if(t>=0&&t<i.length){const h=i[t];return h.$context||(h.$context=function Fa(t,i,h){return vt(t,{tick:h,index:i,type:"tick"})}(this.getContext(),t,h))}return this.$context||(this.$context=function Ea(t,i){return vt(t,{scale:i,type:"scale"})}(this.chart.getContext(),this))}_tickSize(){const t=this.options.ticks,i=nt(this.labelRotation),h=Math.abs(Math.cos(i)),d=Math.abs(Math.sin(i)),u=this._getLabelSizes(),b=t.autoSkipPadding||0,_=u?u.widest.width+b:0,y=u?u.highest.height+b:0;return this.isHorizontal()?y*h>_*d?_/h:y/d:y*d<_*h?y/h:_/d}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const i=this.axis,h=this.chart,d=this.options,{grid:u,position:b}=d,_=u.offset,y=this.isHorizontal(),w=this.ticks.length+(_?1:0),S=Xt(u),P=[],O=u.setContext(this.getContext()),A=O.drawBorder?O.borderWidth:0,L=A/2,m=function(t){return wt(h,t,A)};let R,F,V,B,W,H,j,X,q,G,J,tt;if("top"===b)R=m(this.bottom),H=this.bottom-S,X=R-L,G=m(t.top)+L,tt=t.bottom;else if("bottom"===b)R=m(this.top),G=t.top,tt=m(t.bottom)-L,H=R+L,X=this.top+S;else if("left"===b)R=m(this.right),W=this.right-S,j=R-L,q=m(t.left)+L,J=t.right;else if("right"===b)R=m(this.left),q=t.left,J=m(t.right)-L,W=R+L,j=this.left+S;else if("x"===i){if("center"===b)R=m((t.top+t.bottom)/2+.5);else if(D(b)){const t=Object.keys(b)[0],i=b[t];R=m(this.chart.scales[t].getPixelForValue(i))}G=t.top,tt=t.bottom,H=R+L,X=H+S}else if("y"===i){if("center"===b)R=m((t.left+t.right)/2);else if(D(b)){const t=Object.keys(b)[0],i=b[t];R=m(this.chart.scales[t].getPixelForValue(i))}W=R-L,j=W-S,q=t.left,J=t.right}const ot=C(d.ticks.maxTicksLimit,w),at=Math.max(1,Math.ceil(w/ot));for(F=0;F<w;F+=at){const t=u.setContext(this.getContext(F)),i=t.lineWidth,d=t.color,b=t.borderDash||[],w=t.borderDashOffset,S=t.tickWidth,O=t.tickColor,A=t.tickBorderDash||[],L=t.tickBorderDashOffset;V=La(this,F,_),void 0!==V&&(B=wt(h,V,i),y?W=j=q=J=B:H=X=G=tt=B,P.push({tx1:W,ty1:H,tx2:j,ty2:X,x1:q,y1:G,x2:J,y2:tt,width:i,color:d,borderDash:b,borderDashOffset:w,tickWidth:S,tickColor:O,tickBorderDash:A,tickBorderDashOffset:L}))}return this._ticksLength=w,this._borderValue=R,P}_computeLabelItems(t){const i=this.axis,h=this.options,{position:d,ticks:u}=h,b=this.isHorizontal(),_=this.ticks,{align:y,crossAlign:w,padding:S,mirror:P}=u,O=Xt(h.grid),A=O+S,L=P?-S:A,R=-nt(this.labelRotation),F=[];let V,B,W,H,j,X,q,G,J,tt,ot,at,lt="middle";if("top"===d)X=this.bottom-L,q=this._getXAxisLabelAlignment();else if("bottom"===d)X=this.top+L,q=this._getXAxisLabelAlignment();else if("left"===d){const t=this._getYAxisLabelAlignment(O);q=t.textAlign,j=t.x}else if("right"===d){const t=this._getYAxisLabelAlignment(O);q=t.textAlign,j=t.x}else if("x"===i){if("center"===d)X=(t.top+t.bottom)/2+A;else if(D(d)){const t=Object.keys(d)[0],i=d[t];X=this.chart.scales[t].getPixelForValue(i)+A}q=this._getXAxisLabelAlignment()}else if("y"===i){if("center"===d)j=(t.left+t.right)/2-A;else if(D(d)){const t=Object.keys(d)[0],i=d[t];j=this.chart.scales[t].getPixelForValue(i)}q=this._getYAxisLabelAlignment(O).textAlign}"y"===i&&("start"===y?lt="top":"end"===y&&(lt="bottom"));const pt=this._getLabelSizes();for(V=0,B=_.length;V<B;++V){W=_[V],H=W.label;const t=u.setContext(this.getContext(V));G=this.getPixelForTick(V)+u.labelOffset,J=this._resolveTickFontOptions(V),tt=J.lineHeight,ot=z(H)?H.length:1;const i=ot/2,h=t.color,y=t.textStrokeColor,S=t.textStrokeWidth;let O,A=q;if(b?(j=G,"inner"===q&&(A=V===B-1?this.options.reverse?"left":"right":0===V?this.options.reverse?"right":"left":"center"),at="top"===d?"near"===w||0!==R?-ot*tt+tt/2:"center"===w?-pt.highest.height/2-i*tt+tt:-pt.highest.height+tt/2:"near"===w||0!==R?tt/2:"center"===w?pt.highest.height/2-i*tt:pt.highest.height-ot*tt,P&&(at*=-1)):(X=G,at=(1-ot)*tt/2),t.showLabelBackdrop){const i=K(t.backdropPadding),h=pt.heights[V],d=pt.widths[V];let u=X+at-i.top,b=j-i.left;switch(lt){case"middle":u-=h/2;break;case"bottom":u-=h}switch(q){case"center":b-=d/2;break;case"right":b-=d}O={left:b,top:u,width:d+i.width,height:h+i.height,color:t.backdropColor}}F.push({rotation:R,label:H,font:J,color:h,strokeColor:y,strokeWidth:S,textOffset:at,textAlign:A,textBaseline:lt,translation:[j,X],backdrop:O})}return F}_getXAxisLabelAlignment(){const{position:t,ticks:i}=this.options;if(-nt(this.labelRotation))return"top"===t?"left":"right";let h="center";return"start"===i.align?h="left":"end"===i.align?h="right":"inner"===i.align&&(h="inner"),h}_getYAxisLabelAlignment(t){const{position:i,ticks:{crossAlign:h,mirror:d,padding:u}}=this.options,b=t+u,_=this._getLabelSizes().widest.width;let y,w;return"left"===i?d?(w=this.right+u,"near"===h?y="left":"center"===h?(y="center",w+=_/2):(y="right",w+=_)):(w=this.right-b,"near"===h?y="right":"center"===h?(y="center",w-=_/2):(y="left",w=this.left)):"right"===i?d?(w=this.left+u,"near"===h?y="right":"center"===h?(y="center",w-=_/2):(y="left",w-=_)):(w=this.left+b,"near"===h?y="left":"center"===h?(y="center",w+=_/2):(y="right",w=this.right)):y="right",{textAlign:y,x:w}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,i=this.options.position;return"left"===i||"right"===i?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===i||"bottom"===i?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:i},left:h,top:d,width:u,height:b}=this;i&&(t.save(),t.fillStyle=i,t.fillRect(h,d,u,b),t.restore())}getLineWidthForValue(t){const i=this.options.grid;if(!this._isVisible()||!i.display)return 0;const h=this.ticks.findIndex((i=>i.value===t));return h>=0?i.setContext(this.getContext(h)).lineWidth:0}drawGrid(t){const i=this.options.grid,h=this.ctx,d=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let u,b;const a=(t,i,d)=>{!d.width||!d.color||(h.save(),h.lineWidth=d.width,h.strokeStyle=d.color,h.setLineDash(d.borderDash||[]),h.lineDashOffset=d.borderDashOffset,h.beginPath(),h.moveTo(t.x,t.y),h.lineTo(i.x,i.y),h.stroke(),h.restore())};if(i.display)for(u=0,b=d.length;u<b;++u){const t=d[u];i.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),i.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:i,options:{grid:h}}=this,d=h.setContext(this.getContext()),u=h.drawBorder?d.borderWidth:0;if(!u)return;const b=h.setContext(this.getContext(0)).lineWidth,_=this._borderValue;let y,w,S,P;this.isHorizontal()?(y=wt(t,this.left,u)-u/2,w=wt(t,this.right,b)+b/2,S=P=_):(S=wt(t,this.top,u)-u/2,P=wt(t,this.bottom,b)+b/2,y=w=_),i.save(),i.lineWidth=d.borderWidth,i.strokeStyle=d.borderColor,i.beginPath(),i.moveTo(y,S),i.lineTo(w,P),i.stroke(),i.restore()}drawLabels(t){if(!this.options.ticks.display)return;const i=this.ctx,h=this._computeLabelArea();h&&Xe(i,h);const d=this._labelItems||(this._labelItems=this._computeLabelItems(t));let u,b;for(u=0,b=d.length;u<b;++u){const t=d[u],h=t.font,b=t.label;t.backdrop&&(i.fillStyle=t.backdrop.color,i.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),Tt(i,b,0,t.textOffset,h,t)}h&&Ue(i)}drawTitle(){const{ctx:t,options:{position:i,title:h,reverse:d}}=this;if(!h.display)return;const u=$(h.font),b=K(h.padding),_=h.align;let y=u.lineHeight/2;"bottom"===i||"center"===i||D(i)?(y+=b.bottom,z(h.text)&&(y+=u.lineHeight*(h.text.length-1))):y+=b.top;const{titleX:w,titleY:S,maxWidth:O,rotation:A}=function za(t,i,h,d){const{top:u,left:b,bottom:_,right:y,chart:w}=t,{chartArea:S,scales:O}=w;let A,L,R,F=0;const V=_-u,B=y-b;if(t.isHorizontal()){if(L=U(d,b,y),D(h)){const t=Object.keys(h)[0],d=h[t];R=O[t].getPixelForValue(d)+V-i}else R="center"===h?(S.bottom+S.top)/2+V-i:ws(t,h,i);A=y-b}else{if(D(h)){const t=Object.keys(h)[0],d=h[t];L=O[t].getPixelForValue(d)-B+i}else L="center"===h?(S.left+S.right)/2-B+i:ws(t,h,i);R=U(d,_,u),F="left"===h?-P:P}return{titleX:L,titleY:R,maxWidth:A,rotation:F}}(this,y,i,_);Tt(t,h.text,0,0,u,{color:h.color,maxWidth:O,rotation:A,textAlign:Ia(_,i,d),textBaseline:"middle",translation:[w,S]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,i=t.ticks&&t.ticks.z||0,h=C(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===Mt.prototype.draw?[{z:h,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:h+1,draw:()=>{this.drawBorder()}},{z:i,draw:t=>{this.drawLabels(t)}}]:[{z:i,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const i=this.chart.getSortedVisibleDatasetMetas(),h=this.axis+"AxisID",d=[];let u,b;for(u=0,b=i.length;u<b;++u){const b=i[u];b[h]===this.id&&(!t||b.type===t)&&d.push(b)}return d}_resolveTickFontOptions(t){return $(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ae{constructor(t,i,h){this.type=t,this.scope=i,this.override=h,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const i=Object.getPrototypeOf(t);let h;(function Wa(t){return"id"in t&&"defaults"in t})(i)&&(h=this.register(i));const d=this.items,u=t.id,b=this.scope+"."+u;if(!u)throw new Error("class does not have id: "+t);return u in d||(d[u]=t,function Ba(t,i,h){const d=ne(Object.create(null),[h?at.get(h):{},at.get(i),t.defaults]);at.set(i,d),t.defaultRoutes&&function Va(t,i){Object.keys(i).forEach((h=>{const d=h.split("."),u=d.pop(),b=[t].concat(d).join("."),_=i[h].split("."),y=_.pop(),w=_.join(".");at.route(b,u,w,y)}))}(i,t.defaultRoutes),t.descriptors&&at.describe(i,t.descriptors)}(t,b,h),this.override&&at.override(t.id,t.overrides)),b}get(t){return this.items[t]}unregister(t){const i=this.items,h=t.id,d=this.scope;h in i&&delete i[h],d&&h in at[d]&&(delete at[d][h],this.override&&delete tt[h])}}var ke=new class Na{constructor(){this.controllers=new Ae(it,"datasets",!0),this.elements=new Ae(st,"elements"),this.plugins=new Ae(Object,"plugins"),this.scales=new Ae(Mt,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,i,h){[...i].forEach((i=>{const d=h||this._getRegistryForType(i);h||d.isForType(i)||d===this.plugins&&i.id?this._exec(t,d,i):E(i,(i=>{const d=h||this._getRegistryForType(i);this._exec(t,d,i)}))}))}_exec(t,i,h){const d=Oi(t);I(h["before"+d],[],h),i[t](h),I(h["after"+d],[],h)}_getRegistryForType(t){for(let i=0;i<this._typedRegistries.length;i++){const h=this._typedRegistries[i];if(h.isForType(t))return h}return this.plugins}_get(t,i,h){const d=i.get(t);if(void 0===d)throw new Error('"'+t+'" is not a registered '+h+".");return d}};class xe extends it{update(t){const i=this._cachedMeta,{data:h=[]}=i,d=this.chart._animationsDisabled;let{start:u,count:b}=pn(i,h,d);if(this._drawStart=u,this._drawCount=b,mn(i)&&(u=0,b=h.length),this.options.showLine){const{dataset:u,_dataset:b}=i;u._chart=this.chart,u._datasetIndex=this.index,u._decimated=!!b._decimated,u.points=h;const _=this.resolveDatasetElementOptions(t);_.segment=this.options.segment,this.updateElement(u,void 0,{animated:!d,options:_},t)}this.updateElements(h,u,b,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=ke.getElement("line")),super.addElements()}updateElements(t,i,h,d){const u="reset"===d,{iScale:b,vScale:_,_stacked:y,_dataset:w}=this._cachedMeta,S=this.resolveDataElementOptions(i,d),P=this.getSharedOptions(S),O=this.includeOptions(d,P),A=b.axis,L=_.axis,{spanGaps:R,segment:F}=this.options,V=Bt(R)?R:Number.POSITIVE_INFINITY,B=this.chart._animationsDisabled||u||"none"===d;let W=i>0&&this.getParsed(i-1);for(let S=i;S<i+h;++S){const i=t[S],h=this.getParsed(S),R=B?i:{},H=T(h[L]),j=R[A]=b.getPixelForValue(h[A],S),X=R[L]=u||H?_.getBasePixel():_.getPixelForValue(y?this.applyStack(_,h,y):h[L],S);R.skip=isNaN(j)||isNaN(X)||H,R.stop=S>0&&Math.abs(h[A]-W[A])>V,F&&(R.parsed=h,R.raw=w.data[S]),O&&(R.options=P||this.resolveDataElementOptions(S,i.active?"active":d)),B||this.updateElement(i,S,R,d),W=h}this.updateSharedOptions(P,d,S)}getMaxOverflow(){const t=this._cachedMeta,i=t.data||[];if(!this.options.showLine){let t=0;for(let h=i.length-1;h>=0;--h)t=Math.max(t,i[h].size(this.resolveDataElementOptions(h))/2);return t>0&&t}const h=t.dataset,d=h.options&&h.options.borderWidth||0;if(!i.length)return d;const u=i[0].size(this.resolveDataElementOptions(0)),b=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(d,u,b)/2}}xe.id="scatter",xe.defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1},xe.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Pe=Object.freeze({__proto__:null,BarController:ue,BubbleController:fe,DoughnutController:Lt,LineController:ge,PolarAreaController:pe,PieController:qe,RadarController:me,ScatterController:xe});function St(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class vi{constructor(t){this.options=t||{}}init(t){}formats(){return St()}parse(t,i){return St()}format(t,i){return St()}add(t,i,h){return St()}diff(t,i,h){return St()}startOf(t,i,h){return St()}endOf(t,i){return St()}}vi.override=function(t){Object.assign(vi.prototype,t)};var Ie={_date:vi};function Ha(t,i,h,d){const{controller:u,data:b,_sorted:_}=t,y=u._cachedMeta.iScale;if(y&&i===y.axis&&"r"!==i&&_&&b.length){const t=y._reversePixels?Lo:ft;if(!d)return t(b,i,h);if(u._sharedOptions){const d=b[0],u="function"==typeof d.getRange&&d.getRange(i);if(u){const d=t(b,i,h-u),_=t(b,i,h+u);return{lo:d.lo,hi:_.hi}}}}return{lo:0,hi:b.length-1}}function _e(t,i,h,d,u){const b=t.getSortedVisibleDatasetMetas(),_=h[i];for(let t=0,h=b.length;t<h;++t){const{index:h,data:y}=b[t],{lo:w,hi:S}=Ha(b[t],i,_,u);for(let t=w;t<=S;++t){const i=y[t];i.skip||d(i,h,t)}}}function di(t,i,h,d,u){const b=[];return!u&&!t.isPointInArea(i)||_e(t,h,i,(function(h,_,y){!u&&!re(h,t.chartArea,0)||h.inRange(i.x,i.y,d)&&b.push({element:h,datasetIndex:_,index:y})}),!0),b}function Ya(t,i,h,d,u,b){let _=[];const y=function ja(t){const i=-1!==t.indexOf("x"),h=-1!==t.indexOf("y");return function(t,d){const u=i?Math.abs(t.x-d.x):0,b=h?Math.abs(t.y-d.y):0;return Math.sqrt(Math.pow(u,2)+Math.pow(b,2))}}(h);let w=Number.POSITIVE_INFINITY;return _e(t,h,i,(function c(h,S,P){const O=h.inRange(i.x,i.y,u);if(d&&!O)return;const A=h.getCenterPoint(u);if(!b&&!t.isPointInArea(A)&&!O)return;const L=y(i,A);L<w?(_=[{element:h,datasetIndex:S,index:P}],w=L):L===w&&_.push({element:h,datasetIndex:S,index:P})})),_}function ui(t,i,h,d,u,b){return b||t.isPointInArea(i)?"r"!==h||d?Ya(t,i,h,d,u,b):function $a(t,i,h,d){let u=[];return _e(t,h,i,(function o(t,h,b){const{startAngle:_,endAngle:y}=t.getProps(["startAngle","endAngle"],d),{angle:w}=hn(t,{x:i.x,y:i.y});oe(w,_,y)&&u.push({element:t,datasetIndex:h,index:b})})),u}(t,i,h,u):[]}function Cs(t,i,h,d,u){const b=[],_="x"===h?"inXRange":"inYRange";let y=!1;return _e(t,h,i,((t,d,w)=>{t[_](i[h],u)&&(b.push({element:t,datasetIndex:d,index:w}),y=y||t.inRange(i.x,i.y,u))})),d&&!y?[]:b}var Re={evaluateInteractionItems:_e,modes:{index(t,i,h,d){const u=Pt(i,t),b=h.axis||"x",_=h.includeInvisible||!1,y=h.intersect?di(t,u,b,d,_):ui(t,u,b,!1,d,_),w=[];return y.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const i=y[0].index,h=t.data[i];h&&!h.skip&&w.push({element:h,datasetIndex:t.index,index:i})})),w):[]},dataset(t,i,h,d){const u=Pt(i,t),b=h.axis||"xy",_=h.includeInvisible||!1;let y=h.intersect?di(t,u,b,d,_):ui(t,u,b,!1,d,_);if(y.length>0){const i=y[0].datasetIndex,h=t.getDatasetMeta(i).data;y=[];for(let t=0;t<h.length;++t)y.push({element:h[t],datasetIndex:i,index:t})}return y},point:(t,i,h,d)=>di(t,Pt(i,t),h.axis||"xy",d,h.includeInvisible||!1),nearest(t,i,h,d){const u=Pt(i,t),b=h.axis||"xy",_=h.includeInvisible||!1;return ui(t,u,b,h.intersect,d,_)},x:(t,i,h,d)=>Cs(t,Pt(i,t),"x",h.intersect,d),y:(t,i,h,d)=>Cs(t,Pt(i,t),"y",h.intersect,d)}};const Ve=["left","top","right","bottom"];function Ut(t,i){return t.filter((t=>t.pos===i))}function Ds(t,i){return t.filter((t=>-1===Ve.indexOf(t.pos)&&t.box.axis===i))}function Kt(t,i){return t.sort(((t,h)=>{const d=i?h:t,u=i?t:h;return d.weight===u.weight?d.index-u.index:d.weight-u.weight}))}function Ka(t,i){const h=function Ua(t){const i={};for(const h of t){const{stack:t,pos:d,stackWeight:u}=h;if(!t||!Ve.includes(d))continue;const b=i[t]||(i[t]={count:0,placed:0,weight:0,size:0});b.count++,b.weight+=u}return i}(t),{vBoxMaxWidth:d,hBoxMaxHeight:u}=i;let b,_,y;for(b=0,_=t.length;b<_;++b){y=t[b];const{fullSize:_}=y.box,w=h[y.stack],S=w&&y.stackWeight/w.weight;y.horizontal?(y.width=S?S*d:_&&i.availableWidth,y.height=u):(y.width=d,y.height=S?S*u:_&&i.availableHeight)}return h}function Os(t,i,h,d){return Math.max(t[h],i[h])+Math.max(t[d],i[d])}function $n(t,i){t.top=Math.max(t.top,i.top),t.left=Math.max(t.left,i.left),t.bottom=Math.max(t.bottom,i.bottom),t.right=Math.max(t.right,i.right)}function Ga(t,i,h,d){const{pos:u,box:b}=h,_=t.maxPadding;if(!D(u)){h.size&&(t[u]-=h.size);const i=d[h.stack]||{size:0,count:1};i.size=Math.max(i.size,h.horizontal?b.height:b.width),h.size=i.size/i.count,t[u]+=h.size}b.getPadding&&$n(_,b.getPadding());const y=Math.max(0,i.outerWidth-Os(_,t,"left","right")),w=Math.max(0,i.outerHeight-Os(_,t,"top","bottom")),S=y!==t.w,P=w!==t.h;return t.w=y,t.h=w,h.horizontal?{same:S,other:P}:{same:P,other:S}}function Ja(t,i){const h=i.maxPadding;return function s(t){const d={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{d[t]=Math.max(i[t],h[t])})),d}(t?["left","right"]:["top","bottom"])}function Jt(t,i,h,d){const u=[];let b,_,y,w,S,P;for(b=0,_=t.length,S=0;b<_;++b){y=t[b],w=y.box,w.update(y.width||i.w,y.height||i.h,Ja(y.horizontal,i));const{same:_,other:O}=Ga(i,h,y,d);S|=_&&u.length,P=P||O,w.fullSize||u.push(y)}return S&&Jt(u,i,h,d)||P}function Te(t,i,h,d,u){t.top=h,t.left=i,t.right=i+d,t.bottom=h+u,t.width=d,t.height=u}function As(t,i,h,d){const u=h.padding;let{x:b,y:_}=i;for(const y of t){const t=y.box,w=d[y.stack]||{count:1,placed:0,weight:1},S=y.stackWeight/w.weight||1;if(y.horizontal){const d=i.w*S,b=w.size||t.height;et(w.start)&&(_=w.start),t.fullSize?Te(t,u.left,_,h.outerWidth-u.right-u.left,b):Te(t,i.left+w.placed,_,d,b),w.start=_,w.placed+=d,_=t.bottom}else{const d=i.h*S,_=w.size||t.width;et(w.start)&&(b=w.start),t.fullSize?Te(t,b,u.top,_,h.outerHeight-u.bottom-u.top):Te(t,b,i.top+w.placed,_,d),w.start=b,w.placed+=d,b=t.right}}i.x=b,i.y=_}at.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var $e={addBox(t,i){t.boxes||(t.boxes=[]),i.fullSize=i.fullSize||!1,i.position=i.position||"top",i.weight=i.weight||0,i._layers=i._layers||function(){return[{z:0,draw(t){i.draw(t)}}]},t.boxes.push(i)},removeBox(t,i){const h=t.boxes?t.boxes.indexOf(i):-1;-1!==h&&t.boxes.splice(h,1)},configure(t,i,h){i.fullSize=h.fullSize,i.position=h.position,i.weight=h.weight},update(t,i,h,d){if(!t)return;const u=K(t.options.layout.padding),b=Math.max(i-u.width,0),_=Math.max(h-u.height,0),y=function qa(t){const i=function Xa(t){const i=[];let h,d,u,b,_,y;for(h=0,d=(t||[]).length;h<d;++h)u=t[h],({position:b,options:{stack:_,stackWeight:y=1}}=u),i.push({index:h,box:u,pos:b,horizontal:u.isHorizontal(),weight:u.weight,stack:_&&b+_,stackWeight:y});return i}(t),h=Kt(i.filter((t=>t.box.fullSize)),!0),d=Kt(Ut(i,"left"),!0),u=Kt(Ut(i,"right")),b=Kt(Ut(i,"top"),!0),_=Kt(Ut(i,"bottom")),y=Ds(i,"x"),w=Ds(i,"y");return{fullSize:h,leftAndTop:d.concat(b),rightAndBottom:u.concat(w).concat(_).concat(y),chartArea:Ut(i,"chartArea"),vertical:d.concat(u).concat(w),horizontal:b.concat(_).concat(y)}}(t.boxes),w=y.vertical,S=y.horizontal;E(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const P=w.reduce(((t,i)=>i.box.options&&!1===i.box.options.display?t:t+1),0)||1,O=Object.freeze({outerWidth:i,outerHeight:h,padding:u,availableWidth:b,availableHeight:_,vBoxMaxWidth:b/2/P,hBoxMaxHeight:_/2}),A=Object.assign({},u);$n(A,K(d));const L=Object.assign({maxPadding:A,w:b,h:_,x:u.left,y:u.top},u),R=Ka(w.concat(S),O);Jt(y.fullSize,L,O,R),Jt(w,L,O,R),Jt(S,L,O,R)&&Jt(w,L,O,R),function Za(t){const i=t.maxPadding;function e(h){const d=Math.max(i[h]-t[h],0);return t[h]+=d,d}t.y+=e("top"),t.x+=e("left"),e("right"),e("bottom")}(L),As(y.leftAndTop,L,O,R),L.x+=L.w,L.y+=L.h,As(y.rightAndBottom,L,O,R),t.chartArea={left:L.left,top:L.top,right:L.left+L.w,bottom:L.top+L.h,height:L.h,width:L.w},E(y.chartArea,(i=>{const h=i.box;Object.assign(h,t.chartArea),h.update(L.w,L.h,{left:0,top:0,right:0,bottom:0})}))}};class Hi{acquireContext(t,i){}releaseContext(t){return!1}addEventListener(t,i,h){}removeEventListener(t,i,h){}getDevicePixelRatio(){return 1}getMaximumSize(t,i,h,d){return i=Math.max(0,i||t.width),h=h||t.height,{width:i,height:Math.max(0,d?Math.floor(i/d):h)}}isAttached(t){return!0}updateConfig(t){}}class Yn extends Hi{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Je="$chartjs",ti={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Ts=t=>null===t||""===t;const ei=!!Et&&{passive:!0};function il(t,i,h){t.canvas.removeEventListener(i,h,ei)}function je(t,i){for(const h of t)if(h===i||h.contains(i))return!0}function nl(t,i,h){const d=t.canvas,u=new MutationObserver((t=>{let i=!1;for(const h of t)i=i||je(h.addedNodes,d),i=i&&!je(h.removedNodes,d);i&&h()}));return u.observe(document,{childList:!0,subtree:!0}),u}function ol(t,i,h){const d=t.canvas,u=new MutationObserver((t=>{let i=!1;for(const h of t)i=i||je(h.removedNodes,d),i=i&&!je(h.addedNodes,d);i&&h()}));return u.observe(document,{childList:!0,subtree:!0}),u}const ii=new Map;let si=0;function Un(){const t=window.devicePixelRatio;t!==si&&(si=t,ii.forEach(((i,h)=>{h.currentDevicePixelRatio!==t&&i()})))}function ll(t,i,h){const d=t.canvas,u=d&&Wi(d);if(!u)return;const b=gn(((t,i)=>{const d=u.clientWidth;h(t,i),d<u.clientWidth&&h()}),window),_=new ResizeObserver((t=>{const i=t[0],h=i.contentRect.width,d=i.contentRect.height;0===h&&0===d||b(h,d)}));return _.observe(u),function rl(t,i){ii.size||window.addEventListener("resize",Un),ii.set(t,i)}(t,b),_}function fi(t,i,h){h&&h.disconnect(),"resize"===i&&function al(t){ii.delete(t),ii.size||window.removeEventListener("resize",Un)}(t)}function cl(t,i,h){const d=t.canvas,u=gn((i=>{null!==t.ctx&&h(function sl(t,i){const h=ti[t.type]||t.type,{x:d,y:u}=Pt(t,i);return{type:h,chart:i,native:t,x:void 0!==d?d:null,y:void 0!==u?u:null}}(i,t))}),t,(t=>{const i=t[0];return[i,i.offsetX,i.offsetY]}));return function el(t,i,h){t.addEventListener(i,h,ei)}(d,i,u),u}class Kn extends Hi{acquireContext(t,i){const h=t&&t.getContext&&t.getContext("2d");return h&&h.canvas===t?(function tl(t,i){const h=t.style,d=t.getAttribute("height"),u=t.getAttribute("width");if(t[Je]={initial:{height:d,width:u,style:{display:h.display,height:h.height,width:h.width}}},h.display=h.display||"block",h.boxSizing=h.boxSizing||"border-box",Ts(u)){const i=cs(t,"width");void 0!==i&&(t.width=i)}if(Ts(d))if(""===t.style.height)t.height=t.width/(i||2);else{const i=cs(t,"height");void 0!==i&&(t.height=i)}return t}(t,i),h):null}releaseContext(t){const i=t.canvas;if(!i[Je])return!1;const h=i[Je].initial;["height","width"].forEach((t=>{const d=h[t];T(d)?i.removeAttribute(t):i.setAttribute(t,d)}));const d=h.style||{};return Object.keys(d).forEach((t=>{i.style[t]=d[t]})),i.width=i.width,delete i[Je],!0}addEventListener(t,i,h){this.removeEventListener(t,i);const d=t.$proxies||(t.$proxies={}),u={attach:nl,detach:ol,resize:ll}[i]||cl;d[i]=u(t,i,h)}removeEventListener(t,i){const h=t.$proxies||(t.$proxies={}),d=h[i];d&&(({attach:fi,detach:fi,resize:fi}[i]||il)(t,i,d),h[i]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,i,h,d){return Br(t,i,h,d)}isAttached(t){const i=Wi(t);return!(!i||!i.isConnected)}}function qn(t){return!An()||typeof OffscreenCanvas<"u"&&t instanceof OffscreenCanvas?Yn:Kn}class hl{constructor(){this._init=[]}notify(t,i,h,d){"beforeInit"===i&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const u=d?this._descriptors(t).filter(d):this._descriptors(t),b=this._notify(u,t,i,h);return"afterDestroy"===i&&(this._notify(u,t,"stop"),this._notify(this._init,t,"uninstall")),b}_notify(t,i,h,d){d=d||{};for(const u of t){const t=u.plugin;if(!1===I(t[h],[i,d,u.options],t)&&d.cancelable)return!1}return!0}invalidate(){T(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const i=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),i}_createDescriptors(t,i){const h=t&&t.config,d=C(h.options&&h.options.plugins,{}),u=function dl(t){const i={},h=[],d=Object.keys(ke.plugins.items);for(let t=0;t<d.length;t++)h.push(ke.getPlugin(d[t]));const u=t.plugins||[];for(let t=0;t<u.length;t++){const d=u[t];-1===h.indexOf(d)&&(h.push(d),i[d.id]=!0)}return{plugins:h,localIds:i}}(h);return!1!==d||i?function fl(t,{plugins:i,localIds:h},d,u){const b=[],_=t.getContext();for(const y of i){const i=y.id,w=ul(d[i],u);null!==w&&b.push({plugin:y,options:gl(t.config,{plugin:y,local:h[i]},w,_)})}return b}(t,u,d,i):[]}_notifyStateChanges(t){const i=this._oldCache||[],h=this._cache,n=(t,i)=>t.filter((t=>!i.some((i=>t.plugin.id===i.plugin.id))));this._notify(n(i,h),t,"stop"),this._notify(n(h,i),t,"start")}}function ul(t,i){return i||!1!==t?!0===t?{}:t:null}function gl(t,{plugin:i,local:h},d,u){const b=t.pluginScopeKeys(i),_=t.getOptionScopes(d,b);return h&&i.defaults&&_.push(i.defaults),t.createResolver(_,u,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Mi(t,i){const h=at.datasets[t]||{};return((i.datasets||{})[t]||{}).indexAxis||i.indexAxis||h.indexAxis||"x"}function ki(t,i){return"x"===t||"y"===t?t:i.axis||function bl(t){return"top"===t||"bottom"===t?"x":"left"===t||"right"===t?"y":void 0}(i.position)||t.charAt(0).toLowerCase()}function Gn(t){const i=t.options||(t.options={});i.plugins=C(i.plugins,{}),i.scales=function xl(t,i){const h=tt[t.type]||{scales:{}},d=i.scales||{},u=Mi(t.type,i),b=Object.create(null),_=Object.create(null);return Object.keys(d).forEach((t=>{const i=d[t];if(!D(i))return console.error(`Invalid scale configuration for scale: ${t}`);if(i._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const y=ki(t,i),w=function ml(t,i){return t===i?"_index_":"_value_"}(y,u),S=h.scales||{};b[y]=b[y]||t,_[t]=Qt(Object.create(null),[{axis:y},i,S[y],S[w]])})),t.data.datasets.forEach((h=>{const u=h.type||t.type,y=h.indexAxis||Mi(u,i),w=(tt[u]||{}).scales||{};Object.keys(w).forEach((t=>{const i=function pl(t,i){let h=t;return"_index_"===t?h=i:"_value_"===t&&(h="x"===i?"y":"x"),h}(t,y),u=h[i+"AxisID"]||b[i]||i;_[u]=_[u]||Object.create(null),Qt(_[u],[{axis:i},d[u],w[t]])}))})),Object.keys(_).forEach((t=>{const i=_[t];Qt(i,[at.scales[i.type],at.scale])})),_}(t,i)}function Zn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const xi=new Map,_i=new Set;function Le(t,i){let h=xi.get(t);return h||(h=i(),xi.set(t,h),_i.add(h)),h}const qt=(t,i,h)=>{const d=_t(i,h);void 0!==d&&t.add(d)};class yl{constructor(t){this._config=function _l(t){return(t=t||{}).data=Zn(t.data),Gn(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Zn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Gn(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Le(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,i){return Le(`${t}.transition.${i}`,(()=>[[`datasets.${t}.transitions.${i}`,`transitions.${i}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,i){return Le(`${t}-${i}`,(()=>[[`datasets.${t}.elements.${i}`,`datasets.${t}`,`elements.${i}`,""]]))}pluginScopeKeys(t){const i=t.id;return Le(`${this.type}-plugin-${i}`,(()=>[[`plugins.${i}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,i){const h=this._scopeCache;let d=h.get(t);return(!d||i)&&(d=new Map,h.set(t,d)),d}getOptionScopes(t,i,h){const{options:d,type:u}=this,b=this._cachedScopes(t,h),_=b.get(i);if(_)return _;const y=new Set;i.forEach((i=>{t&&(y.add(t),i.forEach((i=>qt(y,t,i)))),i.forEach((t=>qt(y,d,t))),i.forEach((t=>qt(y,tt[u]||{},t))),i.forEach((t=>qt(y,at,t))),i.forEach((t=>qt(y,ot,t)))}));const w=Array.from(y);return 0===w.length&&w.push(Object.create(null)),_i.has(i)&&b.set(i,w),w}chartOptionScopes(){const{options:t,type:i}=this;return[t,tt[i]||{},at.datasets[i]||{},{type:i},at,ot]}resolveNamedOptions(t,i,h,d=[""]){const u={$shared:!0},{resolver:b,subPrefixes:_}=Es(this._resolverCache,t,d);let y=b;if(function Ml(t,i){const{isScriptable:h,isIndexable:d}=wn(t);for(const u of i){const i=h(u),b=d(u),_=(b||i)&&t[u];if(i&&(yt(_)||vl(_))||b&&z(_))return!0}return!1}(b,i)){u.$shared=!1;y=Vt(b,h=yt(h)?h():h,this.createResolver(t,h,_))}for(const t of i)u[t]=y[t];return u}createResolver(t,i,h=[""],d){const{resolver:u}=Es(this._resolverCache,t,h);return D(i)?Vt(u,i,void 0,d):u}}function Es(t,i,h){let d=t.get(i);d||(d=new Map,t.set(i,d));const u=h.join();let b=d.get(u);return b||(b={resolver:zi(i,h),subPrefixes:h.filter((t=>!t.toLowerCase().includes("hover")))},d.set(u,b)),b}const vl=t=>D(t)&&Object.getOwnPropertyNames(t).reduce(((i,h)=>i||yt(t[h])),!1);const Xi=["top","bottom","left","right","chartArea"];function Fs(t,i){return"top"===t||"bottom"===t||-1===Xi.indexOf(t)&&"x"===i}function Is(t,i){return function(h,d){return h[t]===d[t]?h[i]-d[i]:h[t]-d[t]}}function zs(t){const i=t.chart,h=i.options.animation;i.notifyPlugins("afterRender"),I(h&&h.onComplete,[t],i)}function Sl(t){const i=t.chart,h=i.options.animation;I(h&&h.onProgress,[t],i)}function Qn(t){return An()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Ki={},to=t=>{const i=Qn(t);return Object.values(Ki).filter((t=>t.canvas===i)).pop()};function Pl(t,i,h){const d=Object.keys(t);for(const u of d){const d=+u;if(d>=i){const b=t[u];delete t[u],(h>0||d>i)&&(t[d+h]=b)}}}class ji{constructor(t,i){const h=this.config=new yl(i),u=Qn(t),b=to(u);if(b)throw new Error("Canvas is already in use. Chart with ID '"+b.id+"' must be destroyed before the canvas with ID '"+b.canvas.id+"' can be reused.");const _=h.createResolver(h.chartOptionScopes(),this.getContext());this.platform=new(h.platform||qn(u)),this.platform.updateConfig(h);const y=this.platform.acquireContext(u,_.aspectRatio),w=y&&y.canvas,S=w&&w.height,P=w&&w.width;this.id=d(),this.ctx=y,this.canvas=w,this.width=P,this.height=S,this._options=_,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new hl,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function Fo(t,i){let h;return function(...d){return i?(clearTimeout(h),h=setTimeout(t,i,d)):t.apply(this,d),i}}((t=>this.update(t)),_.resizeDelay||0),this._dataChanges=[],Ki[this.id]=this,y&&w?(jt.listen(this,"complete",zs),jt.listen(this,"progress",Sl),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:i},width:h,height:d,_aspectRatio:u}=this;return T(t)?i&&u?u:d?h/d:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():ls(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return os(this.canvas,this.ctx),this}stop(){return jt.stop(this),this}resize(t,i){jt.running(this)?this._resizeBeforeDraw={width:t,height:i}:this._resize(t,i)}_resize(t,i){const h=this.options,d=this.canvas,u=h.maintainAspectRatio&&this.aspectRatio,b=this.platform.getMaximumSize(d,t,i,u),_=h.devicePixelRatio||this.platform.getDevicePixelRatio(),y=this.width?"resize":"attach";this.width=b.width,this.height=b.height,this._aspectRatio=this.aspectRatio,ls(this,_,!0)&&(this.notifyPlugins("resize",{size:b}),I(h.onResize,[this,b],this),this.attached&&this._doResize(y)&&this.render())}ensureScalesHaveIDs(){E(this.options.scales||{},((t,i)=>{t.id=i}))}buildOrUpdateScales(){const t=this.options,i=t.scales,h=this.scales,d=Object.keys(h).reduce(((t,i)=>(t[i]=!1,t)),{});let u=[];i&&(u=u.concat(Object.keys(i).map((t=>{const h=i[t],d=ki(t,h),u="r"===d,b="x"===d;return{options:h,dposition:u?"chartArea":b?"bottom":"left",dtype:u?"radialLinear":b?"category":"linear"}})))),E(u,(i=>{const u=i.options,b=u.id,_=ki(b,u),y=C(u.type,i.dtype);(void 0===u.position||Fs(u.position,_)!==Fs(i.dposition))&&(u.position=i.dposition),d[b]=!0;let w=null;if(b in h&&h[b].type===y)w=h[b];else{w=new(ke.getScale(y))({id:b,type:y,ctx:this.ctx,chart:this}),h[w.id]=w}w.init(u,t)})),E(d,((t,i)=>{t||delete h[i]})),E(h,(t=>{$e.configure(this,t,t.options),$e.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,i=this.data.datasets.length,h=t.length;if(t.sort(((t,i)=>t.index-i.index)),h>i){for(let t=i;t<h;++t)this._destroyDatasetMeta(t);t.splice(i,h-i)}this._sortedMetasets=t.slice(0).sort(Is("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:i}}=this;t.length>i.length&&delete this._stacks,t.forEach(((t,h)=>{0===i.filter((i=>i===t._dataset)).length&&this._destroyDatasetMeta(h)}))}buildOrUpdateControllers(){const t=[],i=this.data.datasets;let h,d;for(this._removeUnreferencedMetasets(),h=0,d=i.length;h<d;h++){const d=i[h];let u=this.getDatasetMeta(h);const b=d.type||this.config.type;if(u.type&&u.type!==b&&(this._destroyDatasetMeta(h),u=this.getDatasetMeta(h)),u.type=b,u.indexAxis=d.indexAxis||Mi(b,this.options),u.order=d.order||0,u.index=h,u.label=""+d.label,u.visible=this.isDatasetVisible(h),u.controller)u.controller.updateIndex(h),u.controller.linkScales();else{const i=ke.getController(b),{datasetElementType:d,dataElementType:_}=at.datasets[b];Object.assign(i.prototype,{dataElementType:ke.getElement(_),datasetElementType:d&&ke.getElement(d)}),u.controller=new i(this,h),t.push(u.controller)}}return this._updateMetasets(),t}_resetElements(){E(this.data.datasets,((t,i)=>{this.getDatasetMeta(i).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const i=this.config;i.update();const h=this._options=i.createResolver(i.chartOptionScopes(),this.getContext()),d=this._animationsDisabled=!h.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const u=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let b=0;for(let t=0,i=this.data.datasets.length;t<i;t++){const{controller:i}=this.getDatasetMeta(t),h=!d&&-1===u.indexOf(i);i.buildOrUpdateElements(h),b=Math.max(+i.getMaxOverflow(),b)}b=this._minPadding=h.layout.autoPadding?b:0,this._updateLayout(b),d||E(u,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Is("z","_idx"));const{_active:_,_lastEvent:y}=this;y?this._eventHandler(y,!0):_.length&&this._updateHoverStyles(_,_,!0),this.render()}_updateScales(){E(this.scales,(t=>{$e.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,i=new Set(Object.keys(this._listeners)),h=new Set(t.events);(!Ui(i,h)||!!this._responsiveListeners!==t.responsive)&&(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,i=this._getUniformDataChanges()||[];for(const{method:h,start:d,count:u}of i){Pl(t,d,"_removeElements"===h?-u:u)}}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const i=this.data.datasets.length,s=i=>new Set(t.filter((t=>t[0]===i)).map(((t,i)=>i+","+t.splice(1).join(",")))),h=s(0);for(let t=1;t<i;t++)if(!Ui(h,s(t)))return;return Array.from(h).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;$e.update(this,this.width,this.height,t);const i=this.chartArea,h=i.width<=0||i.height<=0;this._layers=[],E(this.boxes,(t=>{h&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,i)=>{t._idx=i})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,i=this.data.datasets.length;t<i;++t)this.getDatasetMeta(t).controller.configure();for(let i=0,h=this.data.datasets.length;i<h;++i)this._updateDataset(i,yt(t)?t({datasetIndex:i}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,i){const h=this.getDatasetMeta(t),d={meta:h,index:t,mode:i,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",d)&&(h.controller._update(i),d.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",d))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(jt.has(this)?this.attached&&!jt.running(this)&&jt.start(this):(this.draw(),zs({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:i}=this._resizeBeforeDraw;this._resize(t,i),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0||!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const i=this._layers;for(t=0;t<i.length&&i[t].z<=0;++t)i[t].draw(this.chartArea);for(this._drawDatasets();t<i.length;++t)i[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const i=this._sortedMetasets,h=[];let d,u;for(d=0,u=i.length;d<u;++d){const u=i[d];(!t||u.visible)&&h.push(u)}return h}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let i=t.length-1;i>=0;--i)this._drawDataset(t[i]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const i=this.ctx,h=t._clip,d=!h.disabled,u=this.chartArea,b={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",b)&&(d&&Xe(i,{left:!1===h.left?0:u.left-h.left,right:!1===h.right?this.width:u.right+h.right,top:!1===h.top?0:u.top-h.top,bottom:!1===h.bottom?this.height:u.bottom+h.bottom}),t.controller.draw(),d&&Ue(i),b.cancelable=!1,this.notifyPlugins("afterDatasetDraw",b))}isPointInArea(t){return re(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,i,h,d){const u=Re.modes[i];return"function"==typeof u?u(this,t,h,d):[]}getDatasetMeta(t){const i=this.data.datasets[t],h=this._metasets;let d=h.filter((t=>t&&t._dataset===i)).pop();return d||(d={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:i&&i.order||0,index:t,_dataset:i,_parsed:[],_sorted:!1},h.push(d)),d}getContext(){return this.$context||(this.$context=vt(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const i=this.data.datasets[t];if(!i)return!1;const h=this.getDatasetMeta(t);return"boolean"==typeof h.hidden?!h.hidden:!i.hidden}setDatasetVisibility(t,i){this.getDatasetMeta(t).hidden=!i}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,i,h){const d=h?"show":"hide",u=this.getDatasetMeta(t),b=u.controller._resolveAnimations(void 0,d);et(i)?(u.data[i].hidden=!h,this.update()):(this.setDatasetVisibility(t,h),b.update(u,{visible:h}),this.update((i=>i.datasetIndex===t?d:void 0)))}hide(t,i){this._updateVisibility(t,i,!1)}show(t,i){this._updateVisibility(t,i,!0)}_destroyDatasetMeta(t){const i=this._metasets[t];i&&i.controller&&i.controller._destroy(),delete this._metasets[t]}_stop(){let t,i;for(this.stop(),jt.remove(this),t=0,i=this.data.datasets.length;t<i;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:i}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),os(t,i),this.platform.releaseContext(i),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete Ki[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,i=this.platform,s=(h,d)=>{i.addEventListener(this,h,d),t[h]=d},n=(t,i,h)=>{t.offsetX=i,t.offsetY=h,this._eventHandler(t)};E(this.options.events,(t=>s(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,i=this.platform,s=(h,d)=>{i.addEventListener(this,h,d),t[h]=d},n=(h,d)=>{t[h]&&(i.removeEventListener(this,h,d),delete t[h])},o=(t,i)=>{this.canvas&&this.resize(t,i)};let h;const a=()=>{n("attach",a),this.attached=!0,this.resize(),s("resize",o),s("detach",h)};h=()=>{this.attached=!1,n("resize",o),this._stop(),this._resize(0,0),s("attach",a)},i.isAttached(this.canvas)?a():h()}unbindEvents(){E(this._listeners,((t,i)=>{this.platform.removeEventListener(this,i,t)})),this._listeners={},E(this._responsiveListeners,((t,i)=>{this.platform.removeEventListener(this,i,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,i,h){const d=h?"set":"remove";let u,b,_,y;for("dataset"===i&&(u=this.getDatasetMeta(t[0].datasetIndex),u.controller["_"+d+"DatasetHoverStyle"]()),_=0,y=t.length;_<y;++_){b=t[_];const i=b&&this.getDatasetMeta(b.datasetIndex).controller;i&&i[d+"HoverStyle"](b.element,b.datasetIndex,b.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const i=this._active||[],h=t.map((({datasetIndex:t,index:i})=>{const h=this.getDatasetMeta(t);if(!h)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:h.data[i],index:i}}));!ze(h,i)&&(this._active=h,this._lastEvent=null,this._updateHoverStyles(h,i))}notifyPlugins(t,i,h){return this._plugins.notify(this,t,i,h)}_updateHoverStyles(t,i,h){const d=this.options.hover,o=(t,i)=>t.filter((t=>!i.some((i=>t.datasetIndex===i.datasetIndex&&t.index===i.index)))),u=o(i,t),b=h?t:o(t,i);u.length&&this.updateHoverStyle(u,d.mode,!1),b.length&&d.mode&&this.updateHoverStyle(b,d.mode,!0)}_eventHandler(t,i){const h={event:t,replay:i,cancelable:!0,inChartArea:this.isPointInArea(t)},n=i=>(i.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",h,n))return;const d=this._handleEvent(t,i,h.inChartArea);return h.cancelable=!1,this.notifyPlugins("afterEvent",h,n),(d||h.changed)&&this.render(),this}_handleEvent(t,i,h){const{_active:d=[],options:u}=this,b=i,_=this._getActiveElements(t,d,h,b),y=function So(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),w=function Cl(t,i,h,d){return h&&"mouseout"!==t.type?d?i:t:null}(t,this._lastEvent,h,y);h&&(this._lastEvent=null,I(u.onHover,[t,_,this],this),y&&I(u.onClick,[t,_,this],this));const S=!ze(_,d);return(S||i)&&(this._active=_,this._updateHoverStyles(_,d,i)),this._lastEvent=w,S}_getActiveElements(t,i,h,d){if("mouseout"===t.type)return[];if(!h)return i;const u=this.options.hover;return this.getElementsAtEventForMode(t,u.mode,u,d)}}const Bs=()=>E(ji.instances,(t=>t._plugins.invalidate())),es=!0;function eo(t,i,h){const{startAngle:d,pixelMargin:u,x:b,y:_,outerRadius:y,innerRadius:w}=i;let S=u/y;t.beginPath(),t.arc(b,_,y,d-S,h+S),w>u?(S=u/w,t.arc(b,_,w,h+S,d-S,!0)):t.arc(b,_,u,h+P,d-P),t.closePath(),t.clip()}function Ol(t,i,h,d){const u=function Dl(t){return Ii(t,["outerStart","outerEnd","innerStart","innerEnd"])}(t.options.borderRadius),b=(h-i)/2,_=Math.min(b,d*i/2),a=t=>{const i=(h-Math.min(b,t))*d/2;return Y(t,0,Math.min(b,i))};return{outerStart:a(u.outerStart),outerEnd:a(u.outerEnd),innerStart:Y(u.innerStart,0,_),innerEnd:Y(u.innerEnd,0,_)}}function It(t,i,h,d){return{x:h+t*Math.cos(i),y:d+t*Math.sin(i)}}function wi(t,i,h,d,u,_){const{x:y,y:w,startAngle:S,pixelMargin:O,innerRadius:A}=i,L=Math.max(i.outerRadius+d+h-O,0),R=A>0?A+d+h+O:0;let F=0;const V=u-S;if(d){const t=((A>0?A-d:0)+(L>0?L-d:0))/2;F=(V-(0!==t?V*t/(t+d):V))/2}const B=(V-Math.max(.001,V*L-h/b)/L)/2,W=S+B+F,H=u-B-F,{outerStart:j,outerEnd:X,innerStart:q,innerEnd:G}=Ol(i,R,L,H-W),J=L-j,tt=L-X,ot=W+j/J,at=H-X/tt,lt=R+q,pt=R+G,kt=W+q/lt,At=H-G/pt;if(t.beginPath(),_){if(t.arc(y,w,L,ot,at),X>0){const i=It(tt,at,y,w);t.arc(i.x,i.y,X,at,H+P)}const i=It(pt,H,y,w);if(t.lineTo(i.x,i.y),G>0){const i=It(pt,At,y,w);t.arc(i.x,i.y,G,H+P,At+Math.PI)}if(t.arc(y,w,R,H-G/R,W+q/R,!0),q>0){const i=It(lt,kt,y,w);t.arc(i.x,i.y,q,kt+Math.PI,W-P)}const h=It(J,W,y,w);if(t.lineTo(h.x,h.y),j>0){const i=It(J,ot,y,w);t.arc(i.x,i.y,j,W-P,ot)}}else{t.moveTo(y,w);const i=Math.cos(ot)*L+y,h=Math.sin(ot)*L+w;t.lineTo(i,h);const d=Math.cos(at)*L+y,u=Math.sin(at)*L+w;t.lineTo(d,u)}t.closePath()}function Ll(t,i,h,d,u,b){const{options:y}=i,{borderWidth:w,borderJoinStyle:S}=y,P="inner"===y.borderAlign;w&&(P?(t.lineWidth=2*w,t.lineJoin=S||"round"):(t.lineWidth=w,t.lineJoin=S||"bevel"),i.fullCircles&&function Tl(t,i,h){const{x:d,y:u,startAngle:b,pixelMargin:y,fullCircles:w}=i,S=Math.max(i.outerRadius-y,0),P=i.innerRadius+y;let O;for(h&&eo(t,i,b+_),t.beginPath(),t.arc(d,u,P,b+_,b,!0),O=0;O<w;++O)t.stroke();for(t.beginPath(),t.arc(d,u,S,b,b+_),O=0;O<w;++O)t.stroke()}(t,i,P),P&&eo(t,i,u),wi(t,i,h,d,u,b),t.stroke())}Object.defineProperties(ji,{defaults:{enumerable:es,value:at},instances:{enumerable:es,value:Ki},overrides:{enumerable:es,value:tt},registry:{enumerable:es,value:ke},version:{enumerable:es,value:"3.9.1"},getChart:{enumerable:es,value:to},register:{enumerable:es,value:(...t)=>{ke.add(...t),Bs()}},unregister:{enumerable:es,value:(...t)=>{ke.remove(...t),Bs()}}});class ye extends st{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,i,h){const d=this.getProps(["x","y"],h),{angle:u,distance:b}=hn(d,{x:t,y:i}),{startAngle:y,endAngle:w,innerRadius:S,outerRadius:P,circumference:O}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],h),A=this.options.spacing/2,L=C(O,w-y)>=_||oe(u,y,w),R=ut(b,S+A,P+A);return L&&R}getCenterPoint(t){const{x:i,y:h,startAngle:d,endAngle:u,innerRadius:b,outerRadius:_}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:y,spacing:w}=this.options,S=(d+u)/2,P=(b+_+w+y)/2;return{x:i+Math.cos(S)*P,y:h+Math.sin(S)*P}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:i,circumference:h}=this,d=(i.offset||0)/2,u=(i.spacing||0)/2,y=i.circular;if(this.pixelMargin="inner"===i.borderAlign?.33:0,this.fullCircles=h>_?Math.floor(h/_):0,0===h||this.innerRadius<0||this.outerRadius<0)return;t.save();let w=0;if(d){w=d/2;const i=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(i)*w,Math.sin(i)*w),this.circumference>=b&&(w=d)}t.fillStyle=i.backgroundColor,t.strokeStyle=i.borderColor;const S=function Al(t,i,h,d,u){const{fullCircles:b,startAngle:y,circumference:w}=i;let S=i.endAngle;if(b){wi(t,i,h,d,y+_,u);for(let i=0;i<b;++i)t.fill();isNaN(w)||(S=y+w%_,w%_==0&&(S+=_))}return wi(t,i,h,d,S,u),t.fill(),S}(t,this,w,u,y);Ll(t,this,w,u,S,y),t.restore()}}function io(t,i,h=i){t.lineCap=C(h.borderCapStyle,i.borderCapStyle),t.setLineDash(C(h.borderDash,i.borderDash)),t.lineDashOffset=C(h.borderDashOffset,i.borderDashOffset),t.lineJoin=C(h.borderJoinStyle,i.borderJoinStyle),t.lineWidth=C(h.borderWidth,i.borderWidth),t.strokeStyle=C(h.borderColor,i.borderColor)}function Rl(t,i,h){t.lineTo(h.x,h.y)}function so(t,i,h={}){const d=t.length,{start:u=0,end:b=d-1}=h,{start:_,end:y}=i,w=Math.max(u,_),S=Math.min(b,y),P=u<_&&b<_||u>y&&b>y;return{count:d,start:w,loop:i.loop,ilen:S<w&&!P?d+S-w:S-w}}function Fl(t,i,h,d){const{points:u,options:b}=i,{count:_,start:y,loop:w,ilen:S}=so(u,h,d),P=function El(t){return t.stepped?lr:t.tension||"monotone"===t.cubicInterpolationMode?cr:Rl}(b);let O,A,L,{move:R=!0,reverse:F}=d||{};for(O=0;O<=S;++O)A=u[(y+(F?S-O:O))%_],!A.skip&&(R?(t.moveTo(A.x,A.y),R=!1):P(t,L,A,F,b.stepped),L=A);return w&&(A=u[(y+(F?S:0))%_],P(t,L,A,F,b.stepped)),!!w}function Il(t,i,h,d){const u=i.points,{count:b,start:_,ilen:y}=so(u,h,d),{move:w=!0,reverse:S}=d||{};let P,O,A,L,R,F,V=0,B=0;const x=t=>(_+(S?y-t:t))%b,v=()=>{L!==R&&(t.lineTo(V,R),t.lineTo(V,L),t.lineTo(V,F))};for(w&&(O=u[x(0)],t.moveTo(O.x,O.y)),P=0;P<=y;++P){if(O=u[x(P)],O.skip)continue;const i=O.x,h=O.y,d=0|i;d===A?(h<L?L=h:h>R&&(R=h),V=(B*V+i)/++B):(v(),t.lineTo(i,h),A=d,B=0,L=R=h),F=h}v()}function Si(t){const i=t.options,h=i.borderDash&&i.borderDash.length;return t._decimated||t._loop||i.tension||"monotone"===i.cubicInterpolationMode||i.stepped||h?Fl:Il}ye.id="arc",ye.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0},ye.defaultRoutes={backgroundColor:"backgroundColor"};const is="function"==typeof Path2D;function Nl(t,i,h,d){is&&!i.options.segment?function Bl(t,i,h,d){let u=i._path;u||(u=i._path=new Path2D,i.path(u,h,d)&&u.closePath()),io(t,i.options),t.stroke(u)}(t,i,h,d):function Vl(t,i,h,d){const{segments:u,options:b}=i,_=Si(i);for(const y of u)io(t,b,y.style),t.beginPath(),_(t,i,y,{start:h,end:h+d-1})&&t.closePath(),t.stroke()}(t,i,h,d)}class gt extends st{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,i){const h=this.options;if((h.tension||"monotone"===h.cubicInterpolationMode)&&!h.stepped&&!this._pointsUpdated){const d=h.spanGaps?this._loop:this._fullLoop;Lr(this._points,h,t,d,i),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function Kr(t,i){const h=t.points,d=t.options.spanGaps,u=h.length;if(!u)return[];const b=!!t._loop,{start:_,end:y}=function Xr(t,i,h,d){let u=0,b=i-1;if(h&&!d)for(;u<i&&!t[u].skip;)u++;for(;u<i&&t[u].skip;)u++;for(u%=i,h&&(b+=u);b>u&&t[b%i].skip;)b--;return b%=i,{start:u,end:b}}(h,u,b,d);return us(t,!0===d?[{start:_,end:y,loop:b}]:function Ur(t,i,h,d){const u=t.length,b=[];let _,y=i,w=t[i];for(_=i+1;_<=h;++_){const h=t[_%u];h.skip||h.stop?w.skip||(d=!1,b.push({start:i%u,end:(_-1)%u,loop:d}),i=y=h.stop?_:null):(y=_,w.skip&&(i=_)),w=h}return null!==y&&b.push({start:i%u,end:y%u,loop:d}),b}(h,_,y<_?y+u:y,!!t._fullLoop&&0===_&&y===u-1),h,i)}(this,this.options.segment))}first(){const t=this.segments,i=this.points;return t.length&&i[t[0].start]}last(){const t=this.segments,i=this.points,h=t.length;return h&&i[t[h-1].end]}interpolate(t,i){const h=this.options,d=t[i],u=this.points,b=Fn(this,{property:i,start:d,end:d});if(!b.length)return;const _=[],y=function zl(t){return t.stepped?Wr:t.tension||"monotone"===t.cubicInterpolationMode?Nr:Ct}(h);let w,S;for(w=0,S=b.length;w<S;++w){const{start:S,end:P}=b[w],O=u[S],A=u[P];if(O===A){_.push(O);continue}const L=y(O,A,Math.abs((d-O[i])/(A[i]-O[i])),h.stepped);L[i]=t[i],_.push(L)}return 1===_.length?_[0]:_}pathSegment(t,i,h){return Si(this)(t,this,i,h)}path(t,i,h){const d=this.segments,u=Si(this);let b=this._loop;i=i||0,h=h||this.points.length-i;for(const _ of d)b&=u(t,this,_,{start:i,end:i+h-1});return!!b}draw(t,i,h,d){const u=this.options||{};(this.points||[]).length&&u.borderWidth&&(t.save(),Nl(t,this,h,d),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Vs(t,i,h,d){const u=t.options,{[h]:b}=t.getProps([h],d);return Math.abs(i-b)<u.radius+u.hitRadius}gt.id="line",gt.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},gt.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},gt.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class ve extends st{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,i,h){const d=this.options,{x:u,y:b}=this.getProps(["x","y"],h);return Math.pow(t-u,2)+Math.pow(i-b,2)<Math.pow(d.hitRadius+d.radius,2)}inXRange(t,i){return Vs(this,t,"x",i)}inYRange(t,i){return Vs(this,t,"y",i)}getCenterPoint(t){const{x:i,y:h}=this.getProps(["x","y"],t);return{x:i,y:h}}size(t){let i=(t=t||this.options||{}).radius||0;i=Math.max(i,i&&t.hoverRadius||0);return 2*(i+(i&&t.borderWidth||0))}draw(t,i){const h=this.options;this.skip||h.radius<.1||!re(this,i,this.size(h)/2)||(t.strokeStyle=h.borderColor,t.lineWidth=h.borderWidth,t.fillStyle=h.backgroundColor,yi(t,h,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function no(t,i){const{x:h,y:d,base:u,width:b,height:_}=t.getProps(["x","y","base","width","height"],i);let y,w,S,P,O;return t.horizontal?(O=_/2,y=Math.min(h,u),w=Math.max(h,u),S=d-O,P=d+O):(O=b/2,y=h-O,w=h+O,S=Math.min(d,u),P=Math.max(d,u)),{left:y,top:S,right:w,bottom:P}}function bt(t,i,h,d){return t?0:Y(i,h,d)}function $l(t){const i=no(t),h=i.right-i.left,d=i.bottom-i.top,u=function Hl(t,i,h){const d=t.options.borderWidth,u=t.borderSkipped,b=kn(d);return{t:bt(u.top,b.top,0,h),r:bt(u.right,b.right,0,i),b:bt(u.bottom,b.bottom,0,h),l:bt(u.left,b.left,0,i)}}(t,h/2,d/2),b=function jl(t,i,h){const{enableBorderRadius:d}=t.getProps(["enableBorderRadius"]),u=t.options.borderRadius,b=Dt(u),_=Math.min(i,h),y=t.borderSkipped,w=d||D(u);return{topLeft:bt(!w||y.top||y.left,b.topLeft,0,_),topRight:bt(!w||y.top||y.right,b.topRight,0,_),bottomLeft:bt(!w||y.bottom||y.left,b.bottomLeft,0,_),bottomRight:bt(!w||y.bottom||y.right,b.bottomRight,0,_)}}(t,h/2,d/2);return{outer:{x:i.left,y:i.top,w:h,h:d,radius:b},inner:{x:i.left+u.l,y:i.top+u.t,w:h-u.l-u.r,h:d-u.t-u.b,radius:{topLeft:Math.max(0,b.topLeft-Math.max(u.t,u.l)),topRight:Math.max(0,b.topRight-Math.max(u.t,u.r)),bottomLeft:Math.max(0,b.bottomLeft-Math.max(u.b,u.l)),bottomRight:Math.max(0,b.bottomRight-Math.max(u.b,u.r))}}}}function gi(t,i,h,d){const u=null===i,b=null===h,_=t&&!(u&&b)&&no(t,d);return _&&(u||ut(i,_.left,_.right))&&(b||ut(h,_.top,_.bottom))}function Xl(t,i){t.rect(i.x,i.y,i.w,i.h)}function pi(t,i,h={}){const d=t.x!==h.x?-i:0,u=t.y!==h.y?-i:0,b=(t.x+t.w!==h.x+h.w?i:0)-d,_=(t.y+t.h!==h.y+h.h?i:0)-u;return{x:t.x+d,y:t.y+u,w:t.w+b,h:t.h+_,radius:t.radius}}ve.id="point",ve.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},ve.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Me extends st{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:i,options:{borderColor:h,backgroundColor:d}}=this,{inner:u,outer:b}=$l(this),_=function Yl(t){return t.topLeft||t.topRight||t.bottomLeft||t.bottomRight}(b.radius)?ae:Xl;t.save(),(b.w!==u.w||b.h!==u.h)&&(t.beginPath(),_(t,pi(b,i,u)),t.clip(),_(t,pi(u,-i,b)),t.fillStyle=h,t.fill("evenodd")),t.beginPath(),_(t,pi(u,i)),t.fillStyle=d,t.fill(),t.restore()}inRange(t,i,h){return gi(this,t,i,h)}inXRange(t,i){return gi(this,t,null,i)}inYRange(t,i){return gi(this,null,t,i)}getCenterPoint(t){const{x:i,y:h,base:d,horizontal:u}=this.getProps(["x","y","base","horizontal"],t);return{x:u?(i+d)/2:i,y:u?h:(h+d)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Me.id="bar",Me.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Me.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var hs=Object.freeze({__proto__:null,ArcElement:ye,LineElement:gt,PointElement:ve,BarElement:Me});function ro(t){if(t._decimated){const i=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:i})}}function Ws(t){t.data.datasets.forEach((t=>{ro(t)}))}var gs={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,i,h)=>{if(!h.enabled)return void Ws(t);const d=t.width;t.data.datasets.forEach(((i,u)=>{const{_data:b,indexAxis:_}=i,y=t.getDatasetMeta(u),w=b||i.data;if("y"===Zt([_,t.options.indexAxis])||!y.controller.supportsDecimation)return;const S=t.scales[y.xAxisID];if("linear"!==S.type&&"time"!==S.type||t.options.parsing)return;let{start:P,count:O}=function ql(t,i){const h=i.length;let d,u=0;const{iScale:b}=t,{min:_,max:y,minDefined:w,maxDefined:S}=b.getUserBounds();return w&&(u=Y(ft(i,b.axis,_).lo,0,h-1)),d=S?Y(ft(i,b.axis,y).hi+1,u,h)-u:h-u,{start:u,count:d}}(y,w);if(O<=(h.threshold||4*d))return void ro(i);let A;switch(T(b)&&(i._data=w,delete i.data,Object.defineProperty(i,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),h.algorithm){case"lttb":A=function Ul(t,i,h,d,u){const b=u.samples||d;if(b>=h)return t.slice(i,i+h);const _=[],y=(h-2)/(b-2);let w=0;const S=i+h-1;let P,O,A,L,R,F=i;for(_[w++]=t[F],P=0;P<b-2;P++){let d,u=0,b=0;const S=Math.floor((P+1)*y)+1+i,V=Math.min(Math.floor((P+2)*y)+1,h)+i,B=V-S;for(d=S;d<V;d++)u+=t[d].x,b+=t[d].y;u/=B,b/=B;const W=Math.floor(P*y)+1+i,H=Math.min(Math.floor((P+1)*y)+1,h)+i,{x:j,y:X}=t[F];for(A=L=-1,d=W;d<H;d++)L=.5*Math.abs((j-u)*(t[d].y-X)-(j-t[d].x)*(b-X)),L>A&&(A=L,O=t[d],R=d);_[w++]=O,F=R}return _[w++]=t[S],_}(w,P,O,d,h);break;case"min-max":A=function Kl(t,i,h,d){let u,b,_,y,w,S,P,O,A,L,R=0,F=0;const V=[],B=i+h-1,W=t[i].x,H=t[B].x-W;for(u=i;u<i+h;++u){b=t[u],_=(b.x-W)/H*d,y=b.y;const i=0|_;if(i===w)y<A?(A=y,S=u):y>L&&(L=y,P=u),R=(F*R+b.x)/++F;else{const h=u-1;if(!T(S)&&!T(P)){const i=Math.min(S,P),d=Math.max(S,P);i!==O&&i!==h&&V.push({...t[i],x:R}),d!==O&&d!==h&&V.push({...t[d],x:R})}u>0&&h!==O&&V.push(t[h]),V.push(b),w=i,F=0,A=L=y,S=P=O=u}}return V}(w,P,O,d);break;default:throw new Error(`Unsupported decimation algorithm '${h.algorithm}'`)}i._decimated=A}))},destroy(t){Ws(t)}};function Pi(t,i,h,d){if(d)return;let u=i[t],b=h[t];return"angle"===t&&(u=Z(u),b=Z(b)),{property:t,start:u,end:b}}function $i(t,i,h){for(;i>t;i--){const t=h[i];if(!isNaN(t.x)&&!isNaN(t.y))break}return i}function Ns(t,i,h,d){return t&&i?d(t[h],i[h]):t?t[h]:i?i[h]:0}function lo(t,i){let h=[],d=!1;return z(t)?(d=!0,h=t):h=function Zl(t,i){const{x:h=null,y:d=null}=t||{},u=i.points,b=[];return i.segments.forEach((({start:t,end:i})=>{i=$i(t,i,u);const _=u[t],y=u[i];null!==d?(b.push({x:_.x,y:d}),b.push({x:y.x,y:d})):null!==h&&(b.push({x:h,y:_.y}),b.push({x:h,y:y.y}))})),b}(t,i),h.length?new gt({points:h,options:{tension:0},_loop:d,_fullLoop:d}):null}function Hs(t){return t&&!1!==t.fill}function Jl(t,i,h){let d=t[i].fill;const u=[i];let b;if(!h)return d;for(;!1!==d&&-1===u.indexOf(d);){if(!N(d))return d;if(b=t[d],!b)return!1;if(b.visible)return d;u.push(d),d=b.fill}return!1}function Ql(t,i,h){const d=function sc(t){const i=t.options,h=i.fill;let d=C(h&&h.target,h);return void 0===d&&(d=!!i.backgroundColor),!1!==d&&null!==d&&(!0===d?"origin":d)}(t);if(D(d))return!isNaN(d.value)&&d;let u=parseFloat(d);return N(u)&&Math.floor(u)===u?function tc(t,i,h,d){return("-"===t||"+"===t)&&(h=i+h),!(h===i||h<0||h>=d)&&h}(d[0],i,u,h):["origin","start","end","stack","shape"].indexOf(d)>=0&&d}function rc(t,i,h){const d=[];for(let u=0;u<h.length;u++){const b=h[u],{first:_,last:y,point:w}=ac(b,i,"x");if(!(!w||_&&y))if(_)d.unshift(w);else if(t.push(w),!y)break}t.push(...d)}function ac(t,i,h){const d=t.interpolate(i,h);if(!d)return{};const u=d[h],b=t.segments,_=t.points;let y=!1,w=!1;for(let t=0;t<b.length;t++){const i=b[t],d=_[i.start][h],S=_[i.end][h];if(ut(u,d,S)){y=u===d,w=u===S;break}}return{first:y,last:w,point:d}}class co{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,i,h){const{x:d,y:u,radius:b}=this;return i=i||{start:0,end:_},t.arc(d,u,b,i.end,i.start,!0),!h.bounds}interpolate(t){const{x:i,y:h,radius:d}=this,u=t.angle;return{x:i+Math.cos(u)*d,y:h+Math.sin(u)*d,angle:u}}}function lc(t){const{chart:i,fill:h,line:d}=t;if(N(h))return function cc(t,i){const h=t.getDatasetMeta(i);return h&&t.isDatasetVisible(i)?h.dataset:null}(i,h);if("stack"===h)return function nc(t){const{scale:i,index:h,line:d}=t,u=[],b=d.segments,_=d.points,y=function oc(t,i){const h=[],d=t.getMatchingVisibleMetas("line");for(let t=0;t<d.length;t++){const u=d[t];if(u.index===i)break;u.hidden||h.unshift(u.dataset)}return h}(i,h);y.push(lo({x:null,y:i.bottom},d));for(let t=0;t<b.length;t++){const i=b[t];for(let t=i.start;t<=i.end;t++)rc(u,_[t],y)}return new gt({points:u,options:{}})}(t);if("shape"===h)return!0;const u=function hc(t){return(t.scale||{}).getPointPositionForValue?function uc(t){const{scale:i,fill:h}=t,d=i.options,u=i.getLabels().length,b=d.reverse?i.max:i.min,_=function ic(t,i,h){let d;return d="start"===t?h:"end"===t?i.options.reverse?i.min:i.max:D(t)?t.value:i.getBaseValue(),d}(h,i,b),y=[];if(d.grid.circular){const t=i.getPointPositionForValue(0,b);return new co({x:t.x,y:t.y,radius:i.getDistanceFromCenterForValue(_)})}for(let t=0;t<u;++t)y.push(i.getPointPositionForValue(t,_));return y}(t):function dc(t){const{scale:i={},fill:h}=t,d=function ec(t,i){let h=null;return"start"===t?h=i.bottom:"end"===t?h=i.top:D(t)?h=i.getPixelForValue(t.value):i.getBasePixel&&(h=i.getBasePixel()),h}(h,i);if(N(d)){const t=i.isHorizontal();return{x:t?d:null,y:t?null:d}}return null}(t)}(t);return u instanceof co?u:lo(u,d)}function mi(t,i,h){const d=lc(i),{line:u,scale:b,axis:_}=i,y=u.options,w=y.fill,S=y.backgroundColor,{above:P=S,below:O=S}=w||{};d&&u.points.length&&(Xe(t,h),function fc(t,i){const{line:h,target:d,above:u,below:b,area:_,scale:y}=i,w=h._loop?"angle":i.axis;t.save(),"x"===w&&b!==u&&(js(t,d,_.top),$s(t,{line:h,target:d,color:u,scale:y,property:w}),t.restore(),t.save(),js(t,d,_.bottom)),$s(t,{line:h,target:d,color:b,scale:y,property:w}),t.restore()}(t,{line:u,target:d,above:P,below:O,area:h,scale:b,axis:_}),Ue(t))}function js(t,i,h){const{segments:d,points:u}=i;let b=!0,_=!1;t.beginPath();for(const y of d){const{start:d,end:w}=y,S=u[d],P=u[$i(d,w,u)];b?(t.moveTo(S.x,S.y),b=!1):(t.lineTo(S.x,h),t.lineTo(S.x,S.y)),_=!!i.pathSegment(t,y,{move:_}),_?t.closePath():t.lineTo(P.x,h)}t.lineTo(i.first().x,h),t.closePath(),t.clip()}function $s(t,i){const{line:h,target:d,property:u,color:b,scale:_}=i,y=function Gl(t,i,h){const d=t.segments,u=t.points,b=i.points,_=[];for(const t of d){let{start:d,end:y}=t;y=$i(d,y,u);const w=Pi(h,u[d],u[y],t.loop);if(!i.segments){_.push({source:t,target:w,start:u[d],end:u[y]});continue}const S=Fn(i,w);for(const i of S){const d=Pi(h,b[i.start],b[i.end],i.loop),y=En(t,u,d);for(const t of y)_.push({source:t,target:i,start:{[h]:Ns(w,d,"start",Math.max)},end:{[h]:Ns(w,d,"end",Math.min)}})}}return _}(h,d,u);for(const{source:i,target:w,start:S,end:P}of y){const{style:{backgroundColor:y=b}={}}=i,O=!0!==d;t.save(),t.fillStyle=y,gc(t,_,O&&Pi(u,S,P)),t.beginPath();const A=!!h.pathSegment(t,i);let L;if(O){A?t.closePath():Ys(t,d,P,u);const i=!!d.pathSegment(t,w,{move:A,reverse:!0});L=A&&i,L||Ys(t,d,S,u)}t.closePath(),t.fill(L?"evenodd":"nonzero"),t.restore()}}function gc(t,i,h){const{top:d,bottom:u}=i.chart.chartArea,{property:b,start:_,end:y}=h||{};"x"===b&&(t.beginPath(),t.rect(_,d,y-_,u-d),t.clip())}function Ys(t,i,h,d){const u=i.interpolate(h,d);u&&t.lineTo(u.x,u.y)}var Ls={id:"filler",afterDatasetsUpdate(t,i,h){const d=(t.data.datasets||[]).length,u=[];let b,_,y,w;for(_=0;_<d;++_)b=t.getDatasetMeta(_),y=b.dataset,w=null,y&&y.options&&y instanceof gt&&(w={visible:t.isDatasetVisible(_),index:_,fill:Ql(y,_,d),chart:t,axis:b.controller.options.indexAxis,scale:b.vScale,line:y}),b.$filler=w,u.push(w);for(_=0;_<d;++_)w=u[_],w&&!1!==w.fill&&(w.fill=Jl(u,_,h.propagate))},beforeDraw(t,i,h){const d="beforeDraw"===h.drawTime,u=t.getSortedVisibleDatasetMetas(),b=t.chartArea;for(let i=u.length-1;i>=0;--i){const h=u[i].$filler;h&&(h.line.updateControlPoints(b,h.axis),d&&h.fill&&mi(t.ctx,h,b))}},beforeDatasetsDraw(t,i,h){if("beforeDatasetsDraw"!==h.drawTime)return;const d=t.getSortedVisibleDatasetMetas();for(let i=d.length-1;i>=0;--i){const h=d[i].$filler;Hs(h)&&mi(t.ctx,h,t.chartArea)}},beforeDatasetDraw(t,i,h){const d=i.meta.$filler;!Hs(d)||"beforeDatasetDraw"!==h.drawTime||mi(t.ctx,d,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Xs=(t,i)=>{let{boxHeight:h=i,boxWidth:d=i}=t;return t.usePointStyle&&(h=Math.min(h,i),d=t.pointStyleWidth||Math.min(d,i)),{boxWidth:d,boxHeight:h,itemHeight:Math.max(i,h)}};class Us extends st{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,i,h){this.maxWidth=t,this.maxHeight=i,this._margins=h,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let i=I(t.generateLabels,[this.chart],this)||[];t.filter&&(i=i.filter((i=>t.filter(i,this.chart.data)))),t.sort&&(i=i.sort(((i,h)=>t.sort(i,h,this.chart.data)))),this.options.reverse&&i.reverse(),this.legendItems=i}fit(){const{options:t,ctx:i}=this;if(!t.display)return void(this.width=this.height=0);const h=t.labels,d=$(h.font),u=d.size,b=this._computeTitleHeight(),{boxWidth:_,itemHeight:y}=Xs(h,u);let w,S;i.font=d.string,this.isHorizontal()?(w=this.maxWidth,S=this._fitRows(b,u,_,y)+10):(S=this.maxHeight,w=this._fitCols(b,u,_,y)+10),this.width=Math.min(w,t.maxWidth||this.maxWidth),this.height=Math.min(S,t.maxHeight||this.maxHeight)}_fitRows(t,i,h,d){const{ctx:u,maxWidth:b,options:{labels:{padding:_}}}=this,y=this.legendHitBoxes=[],w=this.lineWidths=[0],S=d+_;let P=t;u.textAlign="left",u.textBaseline="middle";let O=-1,A=-S;return this.legendItems.forEach(((t,L)=>{const R=h+i/2+u.measureText(t.text).width;(0===L||w[w.length-1]+R+2*_>b)&&(P+=S,w[w.length-(L>0?0:1)]=0,A+=S,O++),y[L]={left:0,top:A,row:O,width:R,height:d},w[w.length-1]+=R+_})),P}_fitCols(t,i,h,d){const{ctx:u,maxHeight:b,options:{labels:{padding:_}}}=this,y=this.legendHitBoxes=[],w=this.columnSizes=[],S=b-t;let P=_,O=0,A=0,L=0,R=0;return this.legendItems.forEach(((t,b)=>{const F=h+i/2+u.measureText(t.text).width;b>0&&A+d+2*_>S&&(P+=O+_,w.push({width:O,height:A}),L+=O+_,R++,O=A=0),y[b]={left:L,top:A,col:R,width:F,height:d},O=Math.max(O,F),A+=d+_})),P+=O,w.push({width:O,height:A}),P}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:i,options:{align:h,labels:{padding:d},rtl:u}}=this,b=zt(u,this.left,this.width);if(this.isHorizontal()){let u=0,_=U(h,this.left+d,this.right-this.lineWidths[u]);for(const y of i)u!==y.row&&(u=y.row,_=U(h,this.left+d,this.right-this.lineWidths[u])),y.top+=this.top+t+d,y.left=b.leftForLtr(b.x(_),y.width),_+=y.width+d}else{let u=0,_=U(h,this.top+t+d,this.bottom-this.columnSizes[u].height);for(const y of i)y.col!==u&&(u=y.col,_=U(h,this.top+t+d,this.bottom-this.columnSizes[u].height)),y.top=_,y.left+=this.left+d,y.left=b.leftForLtr(b.x(y.left),y.width),_+=y.height+d}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Xe(t,this),this._draw(),Ue(t)}}_draw(){const{options:t,columnSizes:i,lineWidths:h,ctx:d}=this,{align:u,labels:b}=t,_=at.color,y=zt(t.rtl,this.left,this.width),w=$(b.font),{color:S,padding:P}=b,O=w.size,A=O/2;let L;this.drawTitle(),d.textAlign=y.textAlign("left"),d.textBaseline="middle",d.lineWidth=.5,d.font=w.string;const{boxWidth:R,boxHeight:F,itemHeight:V}=Xs(b,O),B=this.isHorizontal(),W=this._computeTitleHeight();L=B?{x:U(u,this.left+P,this.right-h[0]),y:this.top+P+W,line:0}:{x:this.left+P,y:U(u,this.top+W+P,this.bottom-i[0].height),line:0},Tn(this.ctx,t.textDirection);const H=V+P;this.legendItems.forEach(((j,X)=>{d.strokeStyle=j.fontColor||S,d.fillStyle=j.fontColor||S;const q=d.measureText(j.text).width,G=y.textAlign(j.textAlign||(j.textAlign=b.textAlign)),J=R+A+q;let tt=L.x,ot=L.y;y.setWidth(this.width),B?X>0&&tt+J+P>this.right&&(ot=L.y+=H,L.line++,tt=L.x=U(u,this.left+P,this.right-h[L.line])):X>0&&ot+H>this.bottom&&(tt=L.x=tt+i[L.line].width+P,L.line++,ot=L.y=U(u,this.top+W+P,this.bottom-i[L.line].height));(function(t,i,h){if(isNaN(R)||R<=0||isNaN(F)||F<0)return;d.save();const u=C(h.lineWidth,1);if(d.fillStyle=C(h.fillStyle,_),d.lineCap=C(h.lineCap,"butt"),d.lineDashOffset=C(h.lineDashOffset,0),d.lineJoin=C(h.lineJoin,"miter"),d.lineWidth=u,d.strokeStyle=C(h.strokeStyle,_),d.setLineDash(C(h.lineDash,[])),b.usePointStyle){const _={radius:F*Math.SQRT2/2,pointStyle:h.pointStyle,rotation:h.rotation,borderWidth:u},w=y.xPlus(t,R/2);Mn(d,_,w,i+A,b.pointStyleWidth&&R)}else{const b=i+Math.max((O-F)/2,0),_=y.leftForLtr(t,R),w=Dt(h.borderRadius);d.beginPath(),Object.values(w).some((t=>0!==t))?ae(d,{x:_,y:b,w:R,h:F,radius:w}):d.rect(_,b,R,F),d.fill(),0!==u&&d.stroke()}d.restore()})(y.x(tt),ot,j),tt=((t,i,h,d)=>t===(d?"left":"right")?h:"center"===t?(i+h)/2:i)(G,tt+R+A,B?tt+J:this.right,t.rtl),function(t,i,h){Tt(d,h.text,t,i+V/2,w,{strikethrough:h.hidden,textAlign:y.textAlign(h.textAlign)})}(y.x(tt),ot,j),B?L.x+=J+P:L.y+=H})),Ln(this.ctx,t.textDirection)}drawTitle(){const t=this.options,i=t.title,h=$(i.font),d=K(i.padding);if(!i.display)return;const u=zt(t.rtl,this.left,this.width),b=this.ctx,_=i.position,y=h.size/2,w=d.top+y;let S,P=this.left,O=this.width;if(this.isHorizontal())O=Math.max(...this.lineWidths),S=this.top+w,P=U(t.align,P,this.right-O);else{const i=this.columnSizes.reduce(((t,i)=>Math.max(t,i.height)),0);S=w+U(t.align,this.top,this.bottom-i-t.labels.padding-this._computeTitleHeight())}const A=U(_,P,P+O);b.textAlign=u.textAlign(Li(_)),b.textBaseline="middle",b.strokeStyle=i.color,b.fillStyle=i.color,b.font=h.string,Tt(b,i.text,A,S,h)}_computeTitleHeight(){const t=this.options.title,i=$(t.font),h=K(t.padding);return t.display?i.lineHeight+h.height:0}_getLegendItemAt(t,i){let h,d,u;if(ut(t,this.left,this.right)&&ut(i,this.top,this.bottom))for(u=this.legendHitBoxes,h=0;h<u.length;++h)if(d=u[h],ut(t,d.left,d.left+d.width)&&ut(i,d.top,d.top+d.height))return this.legendItems[h];return null}handleEvent(t){const i=this.options;if(!function mc(t,i){return!(("mousemove"!==t&&"mouseout"!==t||!i.onHover&&!i.onLeave)&&(!i.onClick||"click"!==t&&"mouseup"!==t))}(t.type,i))return;const h=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const d=this._hoveredItem,u=((t,i)=>null!==t&&null!==i&&t.datasetIndex===i.datasetIndex&&t.index===i.index)(d,h);d&&!u&&I(i.onLeave,[t,d,this],this),this._hoveredItem=h,h&&!u&&I(i.onHover,[t,h,this],this)}else h&&I(i.onClick,[t,h,this],this)}}var Rs={id:"legend",_element:Us,start(t,i,h){const d=t.legend=new Us({ctx:t.ctx,options:h,chart:t});$e.configure(t,d,h),$e.addBox(t,d)},stop(t){$e.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,i,h){const d=t.legend;$e.configure(t,d,h),d.options=h},afterUpdate(t){const i=t.legend;i.buildLabels(),i.adjustHitBoxes()},afterEvent(t,i){i.replay||t.legend.handleEvent(i.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,i,h){const d=i.datasetIndex,u=h.chart;u.isDatasetVisible(d)?(u.hide(d),i.hidden=!0):(u.show(d),i.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const i=t.data.datasets,{labels:{usePointStyle:h,pointStyle:d,textAlign:u,color:b}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const _=t.controller.getStyle(h?0:void 0),y=K(_.borderWidth);return{text:i[t.index].label,fillStyle:_.backgroundColor,fontColor:b,hidden:!t.visible,lineCap:_.borderCapStyle,lineDash:_.borderDash,lineDashOffset:_.borderDashOffset,lineJoin:_.borderJoinStyle,lineWidth:(y.width+y.height)/4,strokeStyle:_.borderColor,pointStyle:d||_.pointStyle,rotation:_.rotation,textAlign:u||_.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Yi extends st{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,i){const h=this.options;if(this.left=0,this.top=0,!h.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=i;const d=z(h.text)?h.text.length:1;this._padding=K(h.padding);const u=d*$(h.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=u:this.width=u}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:i,left:h,bottom:d,right:u,options:_}=this,y=_.align;let w,S,P,O=0;return this.isHorizontal()?(S=U(y,h,u),P=i+t,w=u-h):("left"===_.position?(S=h+t,P=U(y,d,i),O=-.5*b):(S=u-t,P=U(y,i,d),O=.5*b),w=d-i),{titleX:S,titleY:P,maxWidth:w,rotation:O}}draw(){const t=this.ctx,i=this.options;if(!i.display)return;const h=$(i.font),d=h.lineHeight/2+this._padding.top,{titleX:u,titleY:b,maxWidth:_,rotation:y}=this._drawArgs(d);Tt(t,i.text,0,0,h,{color:i.color,maxWidth:_,rotation:y,textAlign:Li(i.align),textBaseline:"middle",translation:[u,b]})}}var dn={id:"title",_element:Yi,start(t,i,h){!function bc(t,i){const h=new Yi({ctx:t.ctx,options:i,chart:t});$e.configure(t,h,i),$e.addBox(t,h),t.titleBlock=h}(t,h)},stop(t){const i=t.titleBlock;$e.removeBox(t,i),delete t.titleBlock},beforeUpdate(t,i,h){const d=t.titleBlock;$e.configure(t,d,h),d.options=h},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const fn=new WeakMap;var Vn={id:"subtitle",start(t,i,h){const d=new Yi({ctx:t.ctx,options:h,chart:t});$e.configure(t,d,h),$e.addBox(t,d),fn.set(t,d)},stop(t){$e.removeBox(t,fn.get(t)),fn.delete(t)},beforeUpdate(t,i,h){const d=fn.get(t);$e.configure(t,d,h),d.options=h},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Nn={average(t){if(!t.length)return!1;let i,h,d=0,u=0,b=0;for(i=0,h=t.length;i<h;++i){const h=t[i].element;if(h&&h.hasValue()){const t=h.tooltipPosition();d+=t.x,u+=t.y,++b}}return{x:d/b,y:u/b}},nearest(t,i){if(!t.length)return!1;let h,d,u,b=i.x,_=i.y,y=Number.POSITIVE_INFINITY;for(h=0,d=t.length;h<d;++h){const d=t[h].element;if(d&&d.hasValue()){const t=bi(i,d.getCenterPoint());t<y&&(y=t,u=d)}}if(u){const t=u.tooltipPosition();b=t.x,_=t.y}return{x:b,y:_}}};function rt(t,i){return i&&(z(i)?Array.prototype.push.apply(t,i):t.push(i)),t}function ht(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function xc(t,i){const{element:h,datasetIndex:d,index:u}=i,b=t.getDatasetMeta(d).controller,{label:_,value:y}=b.getLabelAndValue(u);return{chart:t,label:_,parsed:b.getParsed(u),raw:t.data.datasets[d].data[u],formattedValue:y,dataset:b.getDataset(),dataIndex:u,datasetIndex:d,element:h}}function Ks(t,i){const h=t.chart.ctx,{body:d,footer:u,title:b}=t,{boxWidth:_,boxHeight:y}=i,w=$(i.bodyFont),S=$(i.titleFont),P=$(i.footerFont),O=b.length,A=u.length,L=d.length,R=K(i.padding);let F=R.height,V=0,B=d.reduce(((t,i)=>t+i.before.length+i.lines.length+i.after.length),0);if(B+=t.beforeBody.length+t.afterBody.length,O&&(F+=O*S.lineHeight+(O-1)*i.titleSpacing+i.titleMarginBottom),B){F+=L*(i.displayColors?Math.max(y,w.lineHeight):w.lineHeight)+(B-L)*w.lineHeight+(B-1)*i.bodySpacing}A&&(F+=i.footerMarginTop+A*P.lineHeight+(A-1)*i.footerSpacing);let W=0;const v=function(t){V=Math.max(V,h.measureText(t).width+W)};return h.save(),h.font=S.string,E(t.title,v),h.font=w.string,E(t.beforeBody.concat(t.afterBody),v),W=i.displayColors?_+2+i.boxPadding:0,E(d,(t=>{E(t.before,v),E(t.lines,v),E(t.after,v)})),W=0,h.font=P.string,E(t.footer,v),h.restore(),V+=R.width,{width:V,height:F}}function vc(t,i,h,d){const{x:u,width:b}=h,{width:_,chartArea:{left:y,right:w}}=t;let S="center";return"center"===d?S=u<=(y+w)/2?"left":"right":u<=b/2?S="left":u>=_-b/2&&(S="right"),function yc(t,i,h,d){const{x:u,width:b}=d,_=h.caretSize+h.caretPadding;if("left"===t&&u+b+_>i.width||"right"===t&&u-b-_<0)return!0}(S,t,i,h)&&(S="center"),S}function qs(t,i,h){const d=h.yAlign||i.yAlign||function _c(t,i){const{y:h,height:d}=i;return h<d/2?"top":h>t.height-d/2?"bottom":"center"}(t,h);return{xAlign:h.xAlign||i.xAlign||vc(t,i,h,d),yAlign:d}}function Gs(t,i,h,d){const{caretSize:u,caretPadding:b,cornerRadius:_}=t,{xAlign:y,yAlign:w}=h,S=u+b,{topLeft:P,topRight:O,bottomLeft:A,bottomRight:L}=Dt(_);let R=function Mc(t,i){let{x:h,width:d}=t;return"right"===i?h-=d:"center"===i&&(h-=d/2),h}(i,y);const F=function kc(t,i,h){let{y:d,height:u}=t;return"top"===i?d+=h:d-="bottom"===i?u+h:u/2,d}(i,w,S);return"center"===w?"left"===y?R+=S:"right"===y&&(R-=S):"left"===y?R-=Math.max(P,A)+u:"right"===y&&(R+=Math.max(O,L)+u),{x:Y(R,0,d.width-i.width),y:Y(F,0,d.height-i.height)}}function Ee(t,i,h){const d=K(h.padding);return"center"===i?t.x+t.width/2:"right"===i?t.x+t.width-d.right:t.x+d.left}function Zs(t){return rt([],ht(t))}function Js(t,i){const h=i&&i.dataset&&i.dataset.tooltip&&i.dataset.tooltip.callbacks;return h?t.override(h):t}class Ci extends st{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const i=this.chart,h=this.options.setContext(this.getContext()),d=h.enabled&&i.options.animation&&h.animations,u=new Ni(this.chart,d);return d._cacheable&&(this._cachedAnimations=Object.freeze(u)),u}getContext(){return this.$context||(this.$context=function wc(t,i,h){return vt(t,{tooltip:i,tooltipItems:h,type:"tooltip"})}(this.chart.getContext(),this,this._tooltipItems))}getTitle(t,i){const{callbacks:h}=i,d=h.beforeTitle.apply(this,[t]),u=h.title.apply(this,[t]),b=h.afterTitle.apply(this,[t]);let _=[];return _=rt(_,ht(d)),_=rt(_,ht(u)),_=rt(_,ht(b)),_}getBeforeBody(t,i){return Zs(i.callbacks.beforeBody.apply(this,[t]))}getBody(t,i){const{callbacks:h}=i,d=[];return E(t,(t=>{const i={before:[],lines:[],after:[]},u=Js(h,t);rt(i.before,ht(u.beforeLabel.call(this,t))),rt(i.lines,u.label.call(this,t)),rt(i.after,ht(u.afterLabel.call(this,t))),d.push(i)})),d}getAfterBody(t,i){return Zs(i.callbacks.afterBody.apply(this,[t]))}getFooter(t,i){const{callbacks:h}=i,d=h.beforeFooter.apply(this,[t]),u=h.footer.apply(this,[t]),b=h.afterFooter.apply(this,[t]);let _=[];return _=rt(_,ht(d)),_=rt(_,ht(u)),_=rt(_,ht(b)),_}_createItems(t){const i=this._active,h=this.chart.data,d=[],u=[],b=[];let _,y,w=[];for(_=0,y=i.length;_<y;++_)w.push(xc(this.chart,i[_]));return t.filter&&(w=w.filter(((i,d,u)=>t.filter(i,d,u,h)))),t.itemSort&&(w=w.sort(((i,d)=>t.itemSort(i,d,h)))),E(w,(i=>{const h=Js(t.callbacks,i);d.push(h.labelColor.call(this,i)),u.push(h.labelPointStyle.call(this,i)),b.push(h.labelTextColor.call(this,i))})),this.labelColors=d,this.labelPointStyles=u,this.labelTextColors=b,this.dataPoints=w,w}update(t,i){const h=this.options.setContext(this.getContext()),d=this._active;let u,b=[];if(d.length){const t=Nn[h.position].call(this,d,this._eventPosition);b=this._createItems(h),this.title=this.getTitle(b,h),this.beforeBody=this.getBeforeBody(b,h),this.body=this.getBody(b,h),this.afterBody=this.getAfterBody(b,h),this.footer=this.getFooter(b,h);const i=this._size=Ks(this,h),_=Object.assign({},t,i),y=qs(this.chart,h,_),w=Gs(h,_,y,this.chart);this.xAlign=y.xAlign,this.yAlign=y.yAlign,u={opacity:1,x:w.x,y:w.y,width:i.width,height:i.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(u={opacity:0});this._tooltipItems=b,this.$context=void 0,u&&this._resolveAnimations().update(this,u),t&&h.external&&h.external.call(this,{chart:this.chart,tooltip:this,replay:i})}drawCaret(t,i,h,d){const u=this.getCaretPosition(t,h,d);i.lineTo(u.x1,u.y1),i.lineTo(u.x2,u.y2),i.lineTo(u.x3,u.y3)}getCaretPosition(t,i,h){const{xAlign:d,yAlign:u}=this,{caretSize:b,cornerRadius:_}=h,{topLeft:y,topRight:w,bottomLeft:S,bottomRight:P}=Dt(_),{x:O,y:A}=t,{width:L,height:R}=i;let F,V,B,W,H,j;return"center"===u?(H=A+R/2,"left"===d?(F=O,V=F-b,W=H+b,j=H-b):(F=O+L,V=F+b,W=H-b,j=H+b),B=F):(V="left"===d?O+Math.max(y,S)+b:"right"===d?O+L-Math.max(w,P)-b:this.caretX,"top"===u?(W=A,H=W-b,F=V-b,B=V+b):(W=A+R,H=W+b,F=V+b,B=V-b),j=W),{x1:F,x2:V,x3:B,y1:W,y2:H,y3:j}}drawTitle(t,i,h){const d=this.title,u=d.length;let b,_,y;if(u){const w=zt(h.rtl,this.x,this.width);for(t.x=Ee(this,h.titleAlign,h),i.textAlign=w.textAlign(h.titleAlign),i.textBaseline="middle",b=$(h.titleFont),_=h.titleSpacing,i.fillStyle=h.titleColor,i.font=b.string,y=0;y<u;++y)i.fillText(d[y],w.x(t.x),t.y+b.lineHeight/2),t.y+=b.lineHeight+_,y+1===u&&(t.y+=h.titleMarginBottom-_)}}_drawColorBox(t,i,h,d,u){const b=this.labelColors[h],_=this.labelPointStyles[h],{boxHeight:y,boxWidth:w,boxPadding:S}=u,P=$(u.bodyFont),O=Ee(this,"left",u),A=d.x(O),L=y<P.lineHeight?(P.lineHeight-y)/2:0,R=i.y+L;if(u.usePointStyle){const i={radius:Math.min(w,y)/2,pointStyle:_.pointStyle,rotation:_.rotation,borderWidth:1},h=d.leftForLtr(A,w)+w/2,S=R+y/2;t.strokeStyle=u.multiKeyBackground,t.fillStyle=u.multiKeyBackground,yi(t,i,h,S),t.strokeStyle=b.borderColor,t.fillStyle=b.backgroundColor,yi(t,i,h,S)}else{t.lineWidth=D(b.borderWidth)?Math.max(...Object.values(b.borderWidth)):b.borderWidth||1,t.strokeStyle=b.borderColor,t.setLineDash(b.borderDash||[]),t.lineDashOffset=b.borderDashOffset||0;const i=d.leftForLtr(A,w-S),h=d.leftForLtr(d.xPlus(A,1),w-S-2),_=Dt(b.borderRadius);Object.values(_).some((t=>0!==t))?(t.beginPath(),t.fillStyle=u.multiKeyBackground,ae(t,{x:i,y:R,w,h:y,radius:_}),t.fill(),t.stroke(),t.fillStyle=b.backgroundColor,t.beginPath(),ae(t,{x:h,y:R+1,w:w-2,h:y-2,radius:_}),t.fill()):(t.fillStyle=u.multiKeyBackground,t.fillRect(i,R,w,y),t.strokeRect(i,R,w,y),t.fillStyle=b.backgroundColor,t.fillRect(h,R+1,w-2,y-2))}t.fillStyle=this.labelTextColors[h]}drawBody(t,i,h){const{body:d}=this,{bodySpacing:u,bodyAlign:b,displayColors:_,boxHeight:y,boxWidth:w,boxPadding:S}=h,P=$(h.bodyFont);let O=P.lineHeight,A=0;const L=zt(h.rtl,this.x,this.width),p=function(h){i.fillText(h,L.x(t.x+A),t.y+O/2),t.y+=O+u},R=L.textAlign(b);let F,V,B,W,H,j,X;for(i.textAlign=b,i.textBaseline="middle",i.font=P.string,t.x=Ee(this,R,h),i.fillStyle=h.bodyColor,E(this.beforeBody,p),A=_&&"right"!==R?"center"===b?w/2+S:w+2+S:0,W=0,j=d.length;W<j;++W){for(F=d[W],V=this.labelTextColors[W],i.fillStyle=V,E(F.before,p),B=F.lines,_&&B.length&&(this._drawColorBox(i,t,W,L,h),O=Math.max(P.lineHeight,y)),H=0,X=B.length;H<X;++H)p(B[H]),O=P.lineHeight;E(F.after,p)}A=0,O=P.lineHeight,E(this.afterBody,p),t.y-=u}drawFooter(t,i,h){const d=this.footer,u=d.length;let b,_;if(u){const y=zt(h.rtl,this.x,this.width);for(t.x=Ee(this,h.footerAlign,h),t.y+=h.footerMarginTop,i.textAlign=y.textAlign(h.footerAlign),i.textBaseline="middle",b=$(h.footerFont),i.fillStyle=h.footerColor,i.font=b.string,_=0;_<u;++_)i.fillText(d[_],y.x(t.x),t.y+b.lineHeight/2),t.y+=b.lineHeight+h.footerSpacing}}drawBackground(t,i,h,d){const{xAlign:u,yAlign:b}=this,{x:_,y}=t,{width:w,height:S}=h,{topLeft:P,topRight:O,bottomLeft:A,bottomRight:L}=Dt(d.cornerRadius);i.fillStyle=d.backgroundColor,i.strokeStyle=d.borderColor,i.lineWidth=d.borderWidth,i.beginPath(),i.moveTo(_+P,y),"top"===b&&this.drawCaret(t,i,h,d),i.lineTo(_+w-O,y),i.quadraticCurveTo(_+w,y,_+w,y+O),"center"===b&&"right"===u&&this.drawCaret(t,i,h,d),i.lineTo(_+w,y+S-L),i.quadraticCurveTo(_+w,y+S,_+w-L,y+S),"bottom"===b&&this.drawCaret(t,i,h,d),i.lineTo(_+A,y+S),i.quadraticCurveTo(_,y+S,_,y+S-A),"center"===b&&"left"===u&&this.drawCaret(t,i,h,d),i.lineTo(_,y+P),i.quadraticCurveTo(_,y,_+P,y),i.closePath(),i.fill(),d.borderWidth>0&&i.stroke()}_updateAnimationTarget(t){const i=this.chart,h=this.$animations,d=h&&h.x,u=h&&h.y;if(d||u){const h=Nn[t.position].call(this,this._active,this._eventPosition);if(!h)return;const b=this._size=Ks(this,t),_=Object.assign({},h,this._size),y=qs(i,t,_),w=Gs(t,_,y,i);(d._to!==w.x||u._to!==w.y)&&(this.xAlign=y.xAlign,this.yAlign=y.yAlign,this.width=b.width,this.height=b.height,this.caretX=h.x,this.caretY=h.y,this._resolveAnimations().update(this,w))}}_willRender(){return!!this.opacity}draw(t){const i=this.options.setContext(this.getContext());let h=this.opacity;if(!h)return;this._updateAnimationTarget(i);const d={width:this.width,height:this.height},u={x:this.x,y:this.y};h=Math.abs(h)<.001?0:h;const b=K(i.padding),_=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;i.enabled&&_&&(t.save(),t.globalAlpha=h,this.drawBackground(u,t,d,i),Tn(t,i.textDirection),u.y+=b.top,this.drawTitle(u,t,i),this.drawBody(u,t,i),this.drawFooter(u,t,i),Ln(t,i.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,i){const h=this._active,d=t.map((({datasetIndex:t,index:i})=>{const h=this.chart.getDatasetMeta(t);if(!h)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:h.data[i],index:i}})),u=!ze(h,d),b=this._positionChanged(d,i);(u||b)&&(this._active=d,this._eventPosition=i,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,i,h=!0){if(i&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const d=this.options,u=this._active||[],b=this._getActiveElements(t,u,i,h),_=this._positionChanged(b,t),y=i||!ze(b,u)||_;return y&&(this._active=b,(d.enabled||d.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,i))),y}_getActiveElements(t,i,h,d){const u=this.options;if("mouseout"===t.type)return[];if(!d)return i;const b=this.chart.getElementsAtEventForMode(t,u.mode,u,h);return u.reverse&&b.reverse(),b}_positionChanged(t,i){const{caretX:h,caretY:d,options:u}=this,b=Nn[u.position].call(this,t,i);return!1!==b&&(h!==b.x||d!==b.y)}}Ci.positioners=Nn;var Wn={id:"tooltip",_element:Ci,positioners:Nn,afterInit(t,i,h){h&&(t.tooltip=new Ci({chart:t,options:h}))},beforeUpdate(t,i,h){t.tooltip&&t.tooltip.initialize(h)},reset(t,i,h){t.tooltip&&t.tooltip.initialize(h)},afterDraw(t){const i=t.tooltip;if(i&&i._willRender()){const h={tooltip:i};if(!1===t.notifyPlugins("beforeTooltipDraw",h))return;i.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",h)}},afterEvent(t,i){if(t.tooltip){const h=i.replay;t.tooltip.handleEvent(i.event,h,i.inChartArea)&&(i.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,i)=>i.bodyFont.size,boxWidth:(t,i)=>i.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:ct,title(t){if(t.length>0){const i=t[0],h=i.chart.data.labels,d=h?h.length:0;if(this&&this.options&&"dataset"===this.options.mode)return i.dataset.label||"";if(i.label)return i.label;if(d>0&&i.dataIndex<d)return h[i.dataIndex]}return""},afterTitle:ct,beforeBody:ct,beforeLabel:ct,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let i=t.dataset.label||"";i&&(i+=": ");const h=t.formattedValue;return T(h)||(i+=h),i},labelColor(t){const i=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:i.borderColor,backgroundColor:i.backgroundColor,borderWidth:i.borderWidth,borderDash:i.borderDash,borderDashOffset:i.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const i=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:i.pointStyle,rotation:i.rotation}},afterLabel:ct,afterBody:ct,beforeFooter:ct,footer:ct,afterFooter:ct}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Hn=Object.freeze({__proto__:null,Decimation:gs,Filler:Ls,Legend:Rs,SubTitle:Vn,Title:dn,Tooltip:Wn});function Pc(t,i,h,d){const u=t.indexOf(i);if(-1===u)return((t,i,h,d)=>("string"==typeof i?(h=t.push(i)-1,d.unshift({index:h,label:i})):isNaN(i)&&(h=null),h))(t,i,h,d);return u!==t.lastIndexOf(i)?h:u}class ce extends Mt{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const i=this._addedLabels;if(i.length){const t=this.getLabels();for(const{index:h,label:d}of i)t[h]===d&&t.splice(h,1);this._addedLabels=[]}super.init(t)}parse(t,i){if(T(t))return null;const h=this.getLabels();return((t,i)=>null===t?null:Y(Math.round(t),0,i))(i=isFinite(i)&&h[i]===t?i:Pc(h,t,C(i,t),this._addedLabels),h.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:i}=this.getUserBounds();let{min:h,max:d}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(h=0),i||(d=this.getLabels().length-1)),this.min=h,this.max=d}buildTicks(){const t=this.min,i=this.max,h=this.options.offset,d=[];let u=this.getLabels();u=0===t&&i===u.length-1?u:u.slice(t,i+1),this._valueRange=Math.max(u.length-(h?0:1),1),this._startValue=this.min-(h?.5:0);for(let h=t;h<=i;h++)d.push({value:h});return d}getLabelForValue(t){const i=this.getLabels();return t>=0&&t<i.length?i[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const i=this.ticks;return t<0||t>i.length-1?null:this.getPixelForValue(i[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Dc(t,i){const h=[],{bounds:d,step:u,min:b,max:_,precision:y,count:w,maxTicks:S,maxDigits:P,includeBounds:O}=t,A=u||1,L=S-1,{min:R,max:F}=i,V=!T(b),B=!T(_),W=!T(w),H=(F-R)/(P+1);let j,X,q,G,J=qi((F-R)/L/A)*A;if(J<1e-14&&!V&&!B)return[{value:R},{value:F}];G=Math.ceil(F/J)-Math.floor(R/J),G>L&&(J=qi(G*J/L/A)*A),T(y)||(j=Math.pow(10,y),J=Math.ceil(J*j)/j),"ticks"===d?(X=Math.floor(R/J)*J,q=Math.ceil(F/J)*J):(X=R,q=F),V&&B&&u&&function Oo(t,i){const h=Math.round(t);return h-i<=t&&h+i>=t}((_-b)/u,J/1e3)?(G=Math.round(Math.min((_-b)/J,S)),J=(_-b)/G,X=b,q=_):W?(X=V?b:X,q=B?_:q,G=w-1,J=(q-X)/G):(G=(q-X)/J,G=te(G,Math.round(G),J/1e3)?Math.round(G):Math.ceil(G));const tt=Math.max(Gi(J),Gi(X));j=Math.pow(10,T(y)?tt:y),X=Math.round(X*j)/j,q=Math.round(q*j)/j;let ot=0;for(V&&(O&&X!==b?(h.push({value:b}),X<b&&ot++,te(Math.round((X+ot*J)*j)/j,b,Qs(b,H,t))&&ot++):X<b&&ot++);ot<G;++ot)h.push({value:Math.round((X+ot*J)*j)/j});return B&&O&&q!==_?h.length&&te(h[h.length-1].value,_,Qs(_,H,t))?h[h.length-1].value=_:h.push({value:_}):(!B||q===_)&&h.push({value:q}),h}function Qs(t,i,{horizontal:h,minRotation:d}){const u=nt(d),b=(h?Math.sin(u):Math.cos(u))||.001,_=.75*i*(""+t).length;return Math.min(i/b,_)}ce.id="category",ce.defaults={ticks:{callback:ce.prototype.getLabelForValue}};class Ye extends Mt{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,i){return T(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:i,maxDefined:h}=this.getUserBounds();let{min:d,max:u}=this;const r=t=>d=i?d:t,a=t=>u=h?u:t;if(t){const t=R(d),i=R(u);t<0&&i<0?a(0):t>0&&i>0&&r(0)}if(d===u){let i=1;(u>=Number.MAX_SAFE_INTEGER||d<=Number.MIN_SAFE_INTEGER)&&(i=Math.abs(.05*u)),a(u+i),t||r(d-i)}this.min=d,this.max=u}getTickLimit(){const t=this.options.ticks;let i,{maxTicksLimit:h,stepSize:d}=t;return d?(i=Math.ceil(this.max/d)-Math.floor(this.min/d)+1,i>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${d} would result generating up to ${i} ticks. Limiting to 1000.`),i=1e3)):(i=this.computeTickLimit(),h=h||11),h&&(i=Math.min(h,i)),i}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,i=t.ticks;let h=this.getTickLimit();h=Math.max(2,h);const d=Dc({maxTicks:h,bounds:t.bounds,min:t.min,max:t.max,precision:i.precision,step:i.stepSize,count:i.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:i.minRotation||0,includeBounds:!1!==i.includeBounds},this._range||this);return"ticks"===t.bounds&&cn(d,this,"value"),t.reverse?(d.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),d}configure(){const t=this.ticks;let i=this.min,h=this.max;if(super.configure(),this.options.offset&&t.length){const d=(h-i)/Math.max(t.length-1,1)/2;i-=d,h+=d}this._startValue=i,this._endValue=h,this._valueRange=h-i}getLabelForValue(t){return de(t,this.chart.options.locale,this.options.ticks.format)}}class Ge extends Ye{determineDataLimits(){const{min:t,max:i}=this.getMinMax(!0);this.min=N(t)?t:0,this.max=N(i)?i:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),i=t?this.width:this.height,h=nt(this.options.ticks.minRotation),d=(t?Math.sin(h):Math.cos(h))||.001,u=this._resolveTickFontOptions(0);return Math.ceil(i/Math.min(40,u.lineHeight/d))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function tn(t){return t/Math.pow(10,Math.floor(L(t)))==1}Ge.id="linear",Ge.defaults={ticks:{callback:be.formatters.numeric}};class Ze extends Mt{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,i){const h=Ye.prototype.parse.apply(this,[t,i]);if(0!==h)return N(h)&&h>0?h:null;this._zero=!0}determineDataLimits(){const{min:t,max:i}=this.getMinMax(!0);this.min=N(t)?Math.max(0,t):null,this.max=N(i)?Math.max(0,i):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:i}=this.getUserBounds();let h=this.min,d=this.max;const o=i=>h=t?h:i,r=t=>d=i?d:t,a=(t,i)=>Math.pow(10,Math.floor(L(t))+i);h===d&&(h<=0?(o(1),r(10)):(o(a(h,-1)),r(a(d,1)))),h<=0&&o(a(d,-1)),d<=0&&r(a(h,1)),this._zero&&this.min!==this._suggestedMin&&h===a(this.min,0)&&o(a(h,-1)),this.min=h,this.max=d}buildTicks(){const t=this.options,i=function Oc(t,i){const h=Math.floor(L(i.max)),d=Math.ceil(i.max/Math.pow(10,h)),u=[];let b=Q(t.min,Math.pow(10,Math.floor(L(i.min)))),_=Math.floor(L(b)),y=Math.floor(b/Math.pow(10,_)),w=_<0?Math.pow(10,Math.abs(_)):1;do{u.push({value:b,major:tn(b)}),++y,10===y&&(y=1,++_,w=_>=0?1:w),b=Math.round(y*Math.pow(10,_)*w)/w}while(_<h||_===h&&y<d);const S=Q(t.max,b);return u.push({value:S,major:tn(b)}),u}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&cn(i,this,"value"),t.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}getLabelForValue(t){return void 0===t?"0":de(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=L(t),this._valueRange=L(this.max)-L(t)}getPixelForValue(t){return(void 0===t||0===t)&&(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(L(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const i=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+i*this._valueRange)}}function Di(t){const i=t.ticks;if(i.display&&t.display){const t=K(i.backdropPadding);return C(i.font&&i.font.size,at.font.size)+t.height}return 0}function Ac(t,i,h){return h=z(h)?h:[h],{w:ar(t,i.string,h),h:h.length*i.lineHeight}}function en(t,i,h,d,u){return t===d||t===u?{start:i-h/2,end:i+h/2}:t<d||t>u?{start:i-h,end:i}:{start:i,end:i+h}}function Tc(t){const i={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},h=Object.assign({},i),d=[],u=[],_=t._pointLabels.length,y=t.options.pointLabels,w=y.centerPointLabels?b/_:0;for(let b=0;b<_;b++){const _=y.setContext(t.getPointLabelContext(b));u[b]=_.padding;const S=t.getPointPosition(b,t.drawingArea+u[b],w),P=$(_.font),O=Ac(t.ctx,P,t._pointLabels[b]);d[b]=O;const A=Z(t.getIndexAngle(b)+w),L=Math.round(Ai(A));Lc(h,i,A,en(L,S.x,O.w,0,180),en(L,S.y,O.h,90,270))}t.setCenterPoint(i.l-h.l,h.r-i.r,i.t-h.t,h.b-i.b),t._pointLabelItems=function Rc(t,i,h){const d=[],u=t._pointLabels.length,_=t.options,y=Di(_)/2,w=t.drawingArea,S=_.pointLabels.centerPointLabels?b/u:0;for(let b=0;b<u;b++){const u=t.getPointPosition(b,w+y+h[b],S),_=Math.round(Ai(Z(u.angle+P))),O=i[b],A=Ic(u.y,O.h,_),L=Ec(_),R=Fc(u.x,O.w,L);d.push({x:u.x,y:A,textAlign:L,left:R,top:A,right:R+O.w,bottom:A+O.h})}return d}(t,d,u)}function Lc(t,i,h,d,u){const b=Math.abs(Math.sin(h)),_=Math.abs(Math.cos(h));let y=0,w=0;d.start<i.l?(y=(i.l-d.start)/b,t.l=Math.min(t.l,i.l-y)):d.end>i.r&&(y=(d.end-i.r)/b,t.r=Math.max(t.r,i.r+y)),u.start<i.t?(w=(i.t-u.start)/_,t.t=Math.min(t.t,i.t-w)):u.end>i.b&&(w=(u.end-i.b)/_,t.b=Math.max(t.b,i.b+w))}function Ec(t){return 0===t||180===t?"center":t<180?"left":"right"}function Fc(t,i,h){return"right"===h?t-=i:"center"===h&&(t-=i/2),t}function Ic(t,i,h){return 90===h||270===h?t-=i/2:(h>270||h<90)&&(t-=i),t}function bo(t,i,h,d){const{ctx:u}=t;if(h)u.arc(t.xCenter,t.yCenter,i,0,_);else{let h=t.getPointPosition(0,i);u.moveTo(h.x,h.y);for(let b=1;b<d;b++)h=t.getPointPosition(b,i),u.lineTo(h.x,h.y)}}Ze.id="logarithmic",Ze.defaults={ticks:{callback:be.formatters.logarithmic,major:{enabled:!0}}};class Nt extends Ye{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=K(Di(this.options)/2),i=this.width=this.maxWidth-t.width,h=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+i/2+t.left),this.yCenter=Math.floor(this.top+h/2+t.top),this.drawingArea=Math.floor(Math.min(i,h)/2)}determineDataLimits(){const{min:t,max:i}=this.getMinMax(!1);this.min=N(t)&&!isNaN(t)?t:0,this.max=N(i)&&!isNaN(i)?i:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Di(this.options))}generateTickLabels(t){Ye.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,i)=>{const h=I(this.options.pointLabels.callback,[t,i],this);return h||0===h?h:""})).filter(((t,i)=>this.chart.getDataVisibility(i)))}fit(){const t=this.options;t.display&&t.pointLabels.display?Tc(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,i,h,d){this.xCenter+=Math.floor((t-i)/2),this.yCenter+=Math.floor((h-d)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,i,h,d))}getIndexAngle(t){return Z(t*(_/(this._pointLabels.length||1))+nt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(T(t))return NaN;const i=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*i:(t-this.min)*i}getValueForDistanceFromCenter(t){if(T(t))return NaN;const i=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-i:this.min+i}getPointLabelContext(t){const i=this._pointLabels||[];if(t>=0&&t<i.length){const h=i[t];return function Vc(t,i,h){return vt(t,{label:h,index:i,type:"pointLabel"})}(this.getContext(),t,h)}}getPointPosition(t,i,h=0){const d=this.getIndexAngle(t)-P+h;return{x:Math.cos(d)*i+this.xCenter,y:Math.sin(d)*i+this.yCenter,angle:d}}getPointPositionForValue(t,i){return this.getPointPosition(t,this.getDistanceFromCenterForValue(i))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:i,top:h,right:d,bottom:u}=this._pointLabelItems[t];return{left:i,top:h,right:d,bottom:u}}drawBackground(){const{backgroundColor:t,grid:{circular:i}}=this.options;if(t){const h=this.ctx;h.save(),h.beginPath(),bo(this,this.getDistanceFromCenterForValue(this._endValue),i,this._pointLabels.length),h.closePath(),h.fillStyle=t,h.fill(),h.restore()}}drawGrid(){const t=this.ctx,i=this.options,{angleLines:h,grid:d}=i,u=this._pointLabels.length;let b,_,y;if(i.pointLabels.display&&function zc(t,i){const{ctx:h,options:{pointLabels:d}}=t;for(let u=i-1;u>=0;u--){const i=d.setContext(t.getPointLabelContext(u)),b=$(i.font),{x:_,y,textAlign:w,left:S,top:P,right:O,bottom:A}=t._pointLabelItems[u],{backdropColor:L}=i;if(!T(L)){const t=Dt(i.borderRadius),d=K(i.backdropPadding);h.fillStyle=L;const u=S-d.left,b=P-d.top,_=O-S+d.width,y=A-P+d.height;Object.values(t).some((t=>0!==t))?(h.beginPath(),ae(h,{x:u,y:b,w:_,h:y,radius:t}),h.fill()):h.fillRect(u,b,_,y)}Tt(h,t._pointLabels[u],_,y+b.lineHeight/2,b,{color:i.color,textAlign:w,textBaseline:"middle"})}}(this,u),d.display&&this.ticks.forEach(((t,i)=>{if(0!==i){_=this.getDistanceFromCenterForValue(t.value);!function Bc(t,i,h,d){const u=t.ctx,b=i.circular,{color:_,lineWidth:y}=i;!b&&!d||!_||!y||h<0||(u.save(),u.strokeStyle=_,u.lineWidth=y,u.setLineDash(i.borderDash),u.lineDashOffset=i.borderDashOffset,u.beginPath(),bo(t,h,b,d),u.closePath(),u.stroke(),u.restore())}(this,d.setContext(this.getContext(i-1)),_,u)}})),h.display){for(t.save(),b=u-1;b>=0;b--){const d=h.setContext(this.getPointLabelContext(b)),{color:u,lineWidth:w}=d;!w||!u||(t.lineWidth=w,t.strokeStyle=u,t.setLineDash(d.borderDash),t.lineDashOffset=d.borderDashOffset,_=this.getDistanceFromCenterForValue(i.ticks.reverse?this.min:this.max),y=this.getPointPosition(b,_),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(y.x,y.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,i=this.options,h=i.ticks;if(!h.display)return;const d=this.getIndexAngle(0);let u,b;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(d),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((d,_)=>{if(0===_&&!i.reverse)return;const y=h.setContext(this.getContext(_)),w=$(y.font);if(u=this.getDistanceFromCenterForValue(this.ticks[_].value),y.showLabelBackdrop){t.font=w.string,b=t.measureText(d.label).width,t.fillStyle=y.backdropColor;const i=K(y.backdropPadding);t.fillRect(-b/2-i.left,-u-w.size/2-i.top,b+i.width,w.size+i.height)}Tt(t,d.label,0,-u,w,{color:y.color})})),t.restore()}drawTitle(){}}Nt.id="radialLinear",Nt.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:be.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},Nt.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Nt.descriptors={angleLines:{_fallback:"grid"}};const jn={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Xn=Object.keys(jn);function Wc(t,i){return t-i}function sn(t,i){if(T(i))return null;const h=t._adapter,{parser:d,round:u,isoWeekday:b}=t._parseOpts;let _=i;return"function"==typeof d&&(_=d(_)),N(_)||(_="string"==typeof d?h.parse(_,d):h.parse(_)),null===_?null:(u&&(_="week"!==u||!Bt(b)&&!0!==b?h.startOf(_,u):h.startOf(_,"isoWeek",b)),+_)}function nn(t,i,h,d){const u=Xn.length;for(let b=Xn.indexOf(t);b<u-1;++b){const t=jn[Xn[b]],u=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((h-i)/(u*t.size))<=d)return Xn[b]}return Xn[u-1]}function on(t,i,h){if(h){if(h.length){const{lo:d,hi:u}=Ti(h,i);t[h[d]>=i?h[d]:h[u]]=!0}}else t[i]=!0}function rn(t,i,h){const d=[],u={},b=i.length;let _,y;for(_=0;_<b;++_)y=i[_],u[y]=_,d.push({value:y,major:!1});return 0!==b&&h?function jc(t,i,h,d){const u=t._adapter,b=+u.startOf(i[0].value,d),_=i[i.length-1].value;let y,w;for(y=b;y<=_;y=+u.add(y,1,d))w=h[y],w>=0&&(i[w].major=!0);return i}(t,d,u,h):d}class Ht extends Mt{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,i){const h=t.time||(t.time={}),d=this._adapter=new Ie._date(t.adapters.date);d.init(i),Qt(h.displayFormats,d.formats()),this._parseOpts={parser:h.parser,round:h.round,isoWeekday:h.isoWeekday},super.init(t),this._normalized=i.normalized}parse(t,i){return void 0===t?null:sn(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,i=this._adapter,h=t.time.unit||"day";let{min:d,max:u,minDefined:b,maxDefined:_}=this.getUserBounds();function l(t){!b&&!isNaN(t.min)&&(d=Math.min(d,t.min)),!_&&!isNaN(t.max)&&(u=Math.max(u,t.max))}(!b||!_)&&(l(this._getLabelBounds()),("ticks"!==t.bounds||"labels"!==t.ticks.source)&&l(this.getMinMax(!1))),d=N(d)&&!isNaN(d)?d:+i.startOf(Date.now(),h),u=N(u)&&!isNaN(u)?u:+i.endOf(Date.now(),h)+1,this.min=Math.min(d,u-1),this.max=Math.max(d+1,u)}_getLabelBounds(){const t=this.getLabelTimestamps();let i=Number.POSITIVE_INFINITY,h=Number.NEGATIVE_INFINITY;return t.length&&(i=t[0],h=t[t.length-1]),{min:i,max:h}}buildTicks(){const t=this.options,i=t.time,h=t.ticks,d="labels"===h.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&d.length&&(this.min=this._userMin||d[0],this.max=this._userMax||d[d.length-1]);const u=this.min,b=function Ro(t,i,h){let d=0,u=t.length;for(;d<u&&t[d]<i;)d++;for(;u>d&&t[u-1]>h;)u--;return d>0||u<t.length?t.slice(d,u):t}(d,u,this.max);return this._unit=i.unit||(h.autoSkip?nn(i.minUnit,this.min,this.max,this._getLabelCapacity(u)):function Nc(t,i,h,d,u){for(let b=Xn.length-1;b>=Xn.indexOf(h);b--){const h=Xn[b];if(jn[h].common&&t._adapter.diff(u,d,h)>=i-1)return h}return Xn[h?Xn.indexOf(h):0]}(this,b.length,i.minUnit,this.min,this.max)),this._majorUnit=h.major.enabled&&"year"!==this._unit?function Hc(t){for(let i=Xn.indexOf(t)+1,h=Xn.length;i<h;++i)if(jn[Xn[i]].common)return Xn[i]}(this._unit):void 0,this.initOffsets(d),t.reverse&&b.reverse(),rn(this,b,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t){let i,h,d=0,u=0;this.options.offset&&t.length&&(i=this.getDecimalForValue(t[0]),d=1===t.length?1-i:(this.getDecimalForValue(t[1])-i)/2,h=this.getDecimalForValue(t[t.length-1]),u=1===t.length?h:(h-this.getDecimalForValue(t[t.length-2]))/2);const b=t.length<3?.5:.25;d=Y(d,0,b),u=Y(u,0,b),this._offsets={start:d,end:u,factor:1/(d+1+u)}}_generate(){const t=this._adapter,i=this.min,h=this.max,d=this.options,u=d.time,b=u.unit||nn(u.minUnit,i,h,this._getLabelCapacity(i)),_=C(u.stepSize,1),y="week"===b&&u.isoWeekday,w=Bt(y)||!0===y,S={};let P,O,A=i;if(w&&(A=+t.startOf(A,"isoWeek",y)),A=+t.startOf(A,w?"day":b),t.diff(h,i,b)>1e5*_)throw new Error(i+" and "+h+" are too far apart with stepSize of "+_+" "+b);const L="data"===d.ticks.source&&this.getDataTimestamps();for(P=A,O=0;P<h;P=+t.add(P,_,b),O++)on(S,P,L);return(P===h||"ticks"===d.bounds||1===O)&&on(S,P,L),Object.keys(S).sort(((t,i)=>t-i)).map((t=>+t))}getLabelForValue(t){const i=this._adapter,h=this.options.time;return h.tooltipFormat?i.format(t,h.tooltipFormat):i.format(t,h.displayFormats.datetime)}_tickFormatFunction(t,i,h,d){const u=this.options,b=u.time.displayFormats,_=this._unit,y=this._majorUnit,w=_&&b[_],S=y&&b[y],P=h[i],O=y&&S&&P&&P.major,A=this._adapter.format(t,d||(O?S:w)),L=u.ticks.callback;return L?I(L,[A,i,h],this):A}generateTickLabels(t){let i,h,d;for(i=0,h=t.length;i<h;++i)d=t[i],d.label=this._tickFormatFunction(d.value,i,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const i=this._offsets,h=this.getDecimalForValue(t);return this.getPixelForDecimal((i.start+h)*i.factor)}getValueForPixel(t){const i=this._offsets,h=this.getDecimalForPixel(t)/i.factor-i.end;return this.min+h*(this.max-this.min)}_getLabelSize(t){const i=this.options.ticks,h=this.ctx.measureText(t).width,d=nt(this.isHorizontal()?i.maxRotation:i.minRotation),u=Math.cos(d),b=Math.sin(d),_=this._resolveTickFontOptions(0).size;return{w:h*u+_*b,h:h*b+_*u}}_getLabelCapacity(t){const i=this.options.time,h=i.displayFormats,d=h[i.unit]||h.millisecond,u=this._tickFormatFunction(t,0,rn(this,[t],this._majorUnit),d),b=this._getLabelSize(u),_=Math.floor(this.isHorizontal()?this.width/b.w:this.height/b.h)-1;return _>0?_:1}getDataTimestamps(){let t,i,h=this._cache.data||[];if(h.length)return h;const d=this.getMatchingVisibleMetas();if(this._normalized&&d.length)return this._cache.data=d[0].controller.getAllParsedValues(this);for(t=0,i=d.length;t<i;++t)h=h.concat(d[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(h)}getLabelTimestamps(){const t=this._cache.labels||[];let i,h;if(t.length)return t;const d=this.getLabels();for(i=0,h=d.length;i<h;++i)t.push(sn(this,d[i]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return un(t.sort(Wc))}}function Fe(t,i,h){let d,u,b,_,y=0,w=t.length-1;h?(i>=t[y].pos&&i<=t[w].pos&&({lo:y,hi:w}=ft(t,"pos",i)),({pos:d,time:b}=t[y]),({pos:u,time:_}=t[w])):(i>=t[y].time&&i<=t[w].time&&({lo:y,hi:w}=ft(t,"time",i)),({time:d,pos:b}=t[y]),({time:u,pos:_}=t[w]));const S=u-d;return S?b+(_-b)*(i-d)/S:b}Ht.id="time",Ht.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Qe extends Ht{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),i=this._table=this.buildLookupTable(t);this._minPos=Fe(i,this.min),this._tableRange=Fe(i,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:i,max:h}=this,d=[],u=[];let b,_,y,w,S;for(b=0,_=t.length;b<_;++b)w=t[b],w>=i&&w<=h&&d.push(w);if(d.length<2)return[{time:i,pos:0},{time:h,pos:1}];for(b=0,_=d.length;b<_;++b)S=d[b+1],y=d[b-1],w=d[b],Math.round((S+y)/2)!==w&&u.push({time:w,pos:b/(_-1)});return u}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const i=this.getDataTimestamps(),h=this.getLabelTimestamps();return t=i.length&&h.length?this.normalize(i.concat(h)):i.length?i:h,t=this._cache.all=t,t}getDecimalForValue(t){return(Fe(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const i=this._offsets,h=this.getDecimalForPixel(t)/i.factor-i.end;return Fe(this._table,h*this._tableRange+this._minPos,!0)}}Qe.id="timeseries",Qe.defaults=Ht.defaults;var Jn=Object.freeze({__proto__:null,CategoryScale:ce,LinearScale:Ge,LogarithmicScale:Ze,RadialLinearScale:Nt,TimeScale:Ht,TimeSeriesScale:Qe});const oo=[Pe,hs,Hn,Jn],ao=Object.freeze(Object.defineProperty({__proto__:null,Animation:In,Animations:Ni,ArcElement:ye,BarController:ue,BarElement:Me,BasePlatform:Hi,BasicPlatform:Yn,BubbleController:fe,CategoryScale:ce,Chart:ji,DatasetController:it,Decimation:gs,DomPlatform:Kn,DoughnutController:Lt,Element:st,Filler:Ls,Interaction:Re,Legend:Rs,LineController:ge,LineElement:gt,LinearScale:Ge,LogarithmicScale:Ze,PieController:qe,PointElement:ve,PolarAreaController:pe,RadarController:me,RadialLinearScale:Nt,Scale:Mt,ScatterController:xe,SubTitle:Vn,Ticks:be,TimeScale:Ht,TimeSeriesScale:Qe,Title:dn,Tooltip:Wn,_adapters:Ie,_detectPlatform:qn,animator:jt,controllers:Pe,defaults:at,elements:hs,layouts:$e,plugins:Hn,registerables:oo,registry:ke,scales:Jn},Symbol.toStringTag,{value:"Module"}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,