"use strict";(self.webpackChunkwizarr=self.webpackChunkwizarr||[]).push([[309],{309:(t,r,e)=>{var n=e(697),o=function(){if(typeof window<"u"){if(window.devicePixelRatio)return window.devicePixelRatio;var t=window.screen;if(t)return(t.deviceXDPI||1)/(t.logicalXDPI||1)}return 1}(),m_toTextLines=function(t){var r,e=[];for(t=[].concat(t);t.length;)"string"==typeof(r=t.pop())?e.unshift.apply(e,r.split("\n")):Array.isArray(r)?t.push.apply(t,r):(0,n.i)(t)||e.unshift(""+r);return e},m_textSize=function(t,r,e){var n,o=[].concat(r),i=o.length,a=t.font,l=0;for(t.font=e.string,n=0;n<i;++n)l=Math.max(t.measureText(o[n]).width,l);return t.font=a,{height:i*e.lineHeight,width:l}},m_bound=function(t,r,e){return Math.max(t,Math.min(r,e))};
/*!
 * chartjs-plugin-datalabels v2.2.0
 * https://chartjs-plugin-datalabels.netlify.app
 * (c) 2017-2022 chartjs-plugin-datalabels contributors
 * Released under the MIT license
 */function A(t,r){var e=r.x,n=r.y;if(null===e)return{x:0,y:-1};if(null===n)return{x:1,y:0};var o=t.x-e,i=t.y-n,a=Math.sqrt(o*o+i*i);return{x:a?o/a:0,y:a?i/a:-1}}var i=0,a=1,l=2,c=4,h=8;function M(t,r,e){var n=i;return t<e.left?n|=a:t>e.right&&(n|=l),r<e.top?n|=h:r>e.bottom&&(n|=c),n}function P(t,r){var e,n,o=r.anchor,i=t;return r.clamp&&(i=function ie(t,r){for(var e,n,o,i=t.x0,u=t.y0,s=t.x1,y=t.y1,d=M(i,u,r),f=M(s,y,r);d|f&&!(d&f);)(e=d||f)&h?(n=i+(s-i)*(r.top-u)/(y-u),o=r.top):e&c?(n=i+(s-i)*(r.bottom-u)/(y-u),o=r.bottom):e&l?(o=u+(y-u)*(r.right-i)/(s-i),n=r.right):e&a&&(o=u+(y-u)*(r.left-i)/(s-i),n=r.left),e===d?d=M(i=n,u=o,r):f=M(s=n,y=o,r);return{x0:i,x1:s,y0:u,y1:y}}(i,r.area)),"start"===o?(e=i.x0,n=i.y0):"end"===o?(e=i.x1,n=i.y1):(e=(i.x0+i.x1)/2,n=(i.y0+i.y1)/2),function ae(t,r,e,n,o){switch(o){case"center":e=n=0;break;case"bottom":e=0,n=1;break;case"right":e=1,n=0;break;case"left":e=-1,n=0;break;case"top":e=0,n=-1;break;case"start":e=-e,n=-n;break;case"end":break;default:o*=Math.PI/180,e=Math.cos(o),n=Math.sin(o)}return{x:t,y:r,vx:e,vy:n}}(e,n,t.vx,t.vy,r.align)}var u={arc:function(t,r){var e=(t.startAngle+t.endAngle)/2,n=Math.cos(e),o=Math.sin(e),i=t.innerRadius,a=t.outerRadius;return P({x0:t.x+n*i,y0:t.y+o*i,x1:t.x+n*a,y1:t.y+o*a,vx:n,vy:o},r)},point:function(t,r){var e=A(t,r.origin),n=e.x*t.options.radius,o=e.y*t.options.radius;return P({x0:t.x-n,y0:t.y-o,x1:t.x+n,y1:t.y+o,vx:e.x,vy:e.y},r)},bar:function(t,r){var e=A(t,r.origin),n=t.x,o=t.y,i=0,a=0;return t.horizontal?(n=Math.min(t.x,t.base),i=Math.abs(t.base-t.x)):(o=Math.min(t.y,t.base),a=Math.abs(t.base-t.y)),P({x0:n,y0:o+a,x1:n+i,y1:o,vx:e.x,vy:e.y},r)},fallback:function(t,r){var e=A(t,r.origin);return P({x0:t.x,y0:t.y,x1:t.x+(t.width||0),y1:t.y+(t.height||0),vx:e.x,vy:e.y},r)}},x=function(t){return Math.round(t*o)/o};function oe(t,r){var e=r.chart.getDatasetMeta(r.datasetIndex).vScale;if(!e)return null;if(void 0!==e.xCenter&&void 0!==e.yCenter)return{x:e.xCenter,y:e.yCenter};var n=e.getBasePixel();return t.horizontal?{x:n,y:null}:{x:null,y:n}}function se(t){return t instanceof n.A?u.arc:t instanceof n.P?u.point:t instanceof n.B?u.bar:u.fallback}function ue(t,r,e){var n=e.backgroundColor,o=e.borderColor,i=e.borderWidth;!n&&(!o||!i)||(t.beginPath(),function le(t,r,e,n,o,i){var a=Math.PI/2;if(i){var l=Math.min(i,o/2,n/2),c=r+l,h=e+l,u=r+n-l,s=e+o-l;t.moveTo(r,h),c<u&&h<s?(t.arc(c,h,l,-Math.PI,-a),t.arc(u,h,l,-a,0),t.arc(u,s,l,0,a),t.arc(c,s,l,a,Math.PI)):c<u?(t.moveTo(c,e),t.arc(u,h,l,-a,a),t.arc(c,h,l,a,Math.PI+a)):h<s?(t.arc(c,h,l,-Math.PI,0),t.arc(c,s,l,0,Math.PI)):t.arc(c,h,l,-Math.PI,Math.PI),t.closePath(),t.moveTo(r,e)}else t.rect(r,e,n,o)}(t,x(r.x)+i/2,x(r.y)+i/2,x(r.w)-i,x(r.h)-i,e.borderRadius),t.closePath(),n&&(t.fillStyle=n,t.fill()),o&&i&&(t.strokeStyle=o,t.lineWidth=i,t.lineJoin="miter",t.stroke()))}function de(t,r,e){var n=t.shadowBlur,o=e.stroked,i=x(e.x),a=x(e.y),l=x(e.w);o&&t.strokeText(r,i,a,l),e.filled&&(n&&o&&(t.shadowBlur=0),t.fillText(r,i,a,l),n&&o&&(t.shadowBlur=n))}var L=function(t,r,e,n){var o=this;o._config=t,o._index=n,o._model=null,o._rects=null,o._ctx=r,o._el=e};(0,n.m)(L.prototype,{_modelize:function(t,r,e,o){var i=this,a=i._index,l=(0,n.t)((0,n.r)([e.font,{}],o,a)),c=(0,n.r)([e.color,n.d.color],o,a);return{align:(0,n.r)([e.align,"center"],o,a),anchor:(0,n.r)([e.anchor,"center"],o,a),area:o.chart.chartArea,backgroundColor:(0,n.r)([e.backgroundColor,null],o,a),borderColor:(0,n.r)([e.borderColor,null],o,a),borderRadius:(0,n.r)([e.borderRadius,0],o,a),borderWidth:(0,n.r)([e.borderWidth,0],o,a),clamp:(0,n.r)([e.clamp,!1],o,a),clip:(0,n.r)([e.clip,!1],o,a),color:c,display:t,font:l,lines:r,offset:(0,n.r)([e.offset,4],o,a),opacity:(0,n.r)([e.opacity,1],o,a),origin:oe(i._el,o),padding:(0,n.a)((0,n.r)([e.padding,4],o,a)),positioner:se(i._el),rotation:(0,n.r)([e.rotation,0],o,a)*(Math.PI/180),size:m_textSize(i._ctx,r,l),textAlign:(0,n.r)([e.textAlign,"start"],o,a),textShadowBlur:(0,n.r)([e.textShadowBlur,0],o,a),textShadowColor:(0,n.r)([e.textShadowColor,c],o,a),textStrokeColor:(0,n.r)([e.textStrokeColor,c],o,a),textStrokeWidth:(0,n.r)([e.textStrokeWidth,0],o,a)}},update:function(t){var r,e,o,i=this,a=null,l=null,c=i._index,h=i._config,u=(0,n.r)([h.display,!0],t,c);u&&(r=t.dataset.data[c],e=(0,n.v)((0,n.c)(h.formatter,[r,t]),r),(o=(0,n.i)(e)?[]:m_toTextLines(e)).length&&(l=function ne(t){var r=t.borderWidth||0,e=t.padding,n=t.size.height,o=t.size.width,i=-o/2,a=-n/2;return{frame:{x:i-e.left-r,y:a-e.top-r,w:o+e.width+2*r,h:n+e.height+2*r},text:{x:i,y:a,w:o,h:n}}}(a=i._modelize(u,o,h,t)))),i._model=a,i._rects=l},geometry:function(){return this._rects?this._rects.frame:{}},rotation:function(){return this._model?this._model.rotation:0},visible:function(){return this._model&&this._model.opacity},model:function(){return this._model},draw:function(t,r){var e,n=t.ctx,o=this._model,i=this._rects;this.visible()&&(n.save(),o.clip&&(e=o.area,n.beginPath(),n.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),n.clip()),n.globalAlpha=m_bound(0,o.opacity,1),n.translate(x(r.x),x(r.y)),n.rotate(o.rotation),ue(n,i.frame,o),function fe(t,r,e,n){var o,i=n.textAlign,a=n.color,l=!!a,c=n.font,h=r.length,u=n.textStrokeColor,s=n.textStrokeWidth,y=u&&s;if(h&&(l||y))for(e=function ve(t,r,e){var n=e.lineHeight,o=t.w,i=t.x;return"center"===r?i+=o/2:("end"===r||"right"===r)&&(i+=o),{h:n,w:o,x:i,y:t.y+n/2}}(e,i,c),t.font=c.string,t.textAlign=i,t.textBaseline="middle",t.shadowBlur=n.textShadowBlur,t.shadowColor=n.textShadowColor,l&&(t.fillStyle=a),y&&(t.lineJoin="round",t.lineWidth=s,t.strokeStyle=u),o=0,h=r.length;o<h;++o)de(t,r[o],{stroked:y,filled:l,w:e.w,x:e.x,y:e.y+e.h*o})}(n,o.lines,i.text,o),n.restore())}});var s=Number.MIN_SAFE_INTEGER||-9007199254740991,y=Number.MAX_SAFE_INTEGER||9007199254740991;function b(t,r,e){var n=Math.cos(e),o=Math.sin(e),i=r.x,a=r.y;return{x:i+n*(t.x-i)-o*(t.y-a),y:a+o*(t.x-i)+n*(t.y-a)}}function W(t,r){var e,n,o,i,a,l=y,c=s,h=r.origin;for(e=0;e<t.length;++e)o=(n=t[e]).x-h.x,i=n.y-h.y,a=r.vx*o+r.vy*i,l=Math.min(l,a),c=Math.max(c,a);return{min:l,max:c}}function I(t,r){var e=r.x-t.x,n=r.y-t.y,o=Math.sqrt(e*e+n*n);return{vx:(r.x-t.x)/o,vy:(r.y-t.y)/o,origin:t,ln:o}}var G=function(){this._rotation=0,this._rect={x:0,y:0,w:0,h:0}};(0,n.m)(G.prototype,{center:function(){var t=this._rect;return{x:t.x+t.w/2,y:t.y+t.h/2}},update:function(t,r,e){this._rotation=e,this._rect={x:r.x+t.x,y:r.y+t.y,w:r.w,h:r.h}},contains:function(t){var r=this,e=r._rect;return!((t=b(t,r.center(),-r._rotation)).x<e.x-1||t.y<e.y-1||t.x>e.x+e.w+2||t.y>e.y+e.h+2)},intersects:function(t){var r,e,n,o=this._points(),i=t._points(),a=[I(o[0],o[1]),I(o[0],o[3])];for(this._rotation!==t._rotation&&a.push(I(i[0],i[1]),I(i[0],i[3])),r=0;r<a.length;++r)if(e=W(o,a[r]),n=W(i,a[r]),e.max<n.min||n.max<e.min)return!1;return!0},_points:function(){var t=this,r=t._rect,e=t._rotation,n=t.center();return[b({x:r.x,y:r.y},n,e),b({x:r.x+r.w,y:r.y},n,e),b({x:r.x+r.w,y:r.y+r.h},n,e),b({x:r.x,y:r.y+r.h},n,e)]}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,