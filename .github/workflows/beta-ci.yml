name: Docker Build and Push Beta

on:
    push:
        branches:
            - "v3-beta"
        paths-ignore:
            - "**.md"
            - "**/.github/**"
            - "**/.vscode/**"
    workflow_dispatch: {}

permissions:
    packages: write
    contents: write

env:
    GHCR_REGISTRY: ghcr.io
    DH_REGISTRY: docker.io
    IMAGE_NAME: wizarrrr/wizarr
    IMAGE_TAG: v3-beta

concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: true

jobs:
    bump_version:
        name: Auto Bump Version
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - name: Checkout
              uses: actions/checkout@v4

            # Bump the version
            - name: "Automated Version Bump"
              uses: "phips28/gh-action-bump-version@master"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  version-type: "pre-beta"

            # Update the latest file to match the package.json version using jq
            - name: Update latest file to match package.json version
              run: |
                  jq -r '.version' package.json > latest

            # Commit the changes
            - uses: stefanzweifel/git-auto-commit-action@v5
              with:
                  commit_message: "chore: Automated Version Bump [skip ci]"
                  file_pattern: "latest"

    before_build:
        name: Prepare for Build
        runs-on: ubuntu-latest
        steps:
            # Clear the digests from the artifacts
            - name: Clear digests
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: |
                      digests_dh
                      digests_ghcr

    build:
        name: Build Digest for Registry
        runs-on: ubuntu-latest
        needs:
            - before_build
        strategy:
            fail-fast: false
            matrix:
                platform:
                    - linux/amd64
                    - linux/arm64

        steps:
            # Checkout the repo
            - name: Checkout
              uses: actions/checkout@v4

            # Use NPM and Node.js to install dependencies
            - name: Use Node.js 18.18.2
              uses: actions/setup-node@v2
              with:
                  node-version: 18.18.2

            # Install dependencies
            - name: Install dependencies
              run: npm install

            # Set up Python and install Poetry
            - uses: actions/setup-python@v4
              with:
                  python-version: "3.10"

            # Install Poetry
            - name: Install Poetry
              run: |
                  pip install poetry==1.6.1
                  poetry config virtualenvs.create false

            # Build the Repository
            - name: Build the Repository
              run: |
                  npx nx build wizarr-backend
                  npx nx build wizarr-frontend

            # Get the Metadata from the Docker Image
            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            # Set up Docker Buildx
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # Login to GHCR
            - name: Login to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.GHCR_REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Build and push the image
            - name: Build and push by digest
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./dockerfiles/wizarr-ci/Dockerfile
                  push: true
                  platforms: ${{ matrix.platform }}
                  labels: ${{ steps.meta.outputs.labels }}
                  provenance: false
                  outputs: type=image,name=${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true

            # Export the digest for later use
            - name: Export digest
              run: |
                  mkdir -p /tmp/digests
                  digest="${{ steps.build.outputs.digest }}"
                  touch "/tmp/digests/${digest#sha256:}"

            # Upload the digest as an artifact
            - name: Upload digest
              uses: actions/upload-artifact@v3
              with:
                  name: digests_ghcr
                  path: /tmp/digests/*
                  if-no-files-found: error
                  retention-days: 1

    merge:
        name: Merge Digest to Registry
        runs-on: ubuntu-latest
        needs:
            - build
        steps:
            # Checkout the repo
            - name: Checkout
              uses: actions/checkout@v2

            # Get the Release Version from latest
            - name: Get the Release Version from latest
              id: get_version
              run: echo "::set-output name=version::$(cat latest)"

            # Download the digests from the artifacts
            - name: Download digests
              uses: actions/download-artifact@v3
              with:
                  name: digests_ghcr
                  path: /tmp/digests

            # Set up Docker Buildx
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # Get the Metadata from the Docker Image
            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            # Login to GHCR
            - name: Login to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Create manifest list and push
            - name: Create manifest list and push to Registry
              working-directory: /tmp/digests
              run: |
                  docker buildx imagetools create \
                    --tag ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
                    --tag ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}-${{ steps.get_version.outputs.version }} \
                    --tag ${{ env.DH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
                    --tag ${{ env.DH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}-${{ steps.get_version.outputs.version }} \
                    $(printf '${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

            # Inspect image
            - name: Inspect image
              run: docker buildx imagetools inspect ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    # build_dh:
    #     name: Build Digest for Docker Hub
    #     runs-on: ubuntu-latest
    #     needs:
    #         - before_build
    #     strategy:
    #         fail-fast: false
    #         matrix:
    #             platform:
    #                 - linux/amd64
    #                 - linux/arm64

    #     steps:
    #         # Checkout the repo
    #         - name: Checkout
    #           uses: actions/checkout@v4

    #         # Use NPM and Node.js to install dependencies
    #         - name: Use Node.js 18.18.2
    #           uses: actions/setup-node@v2
    #           with:
    #               node-version: 18.18.2

    #         # Install dependencies
    #         - name: Install dependencies
    #           run: npm install

    #         # Set up Python and install Poetry
    #         - uses: actions/setup-python@v4
    #           with:
    #               python-version: "3.10"

    #         # Install Poetry
    #         - name: Install Poetry
    #           run: |
    #               pip install poetry==1.6.1
    #               poetry config virtualenvs.create false

    #         # Build the Repository
    #         - name: Build the Repository
    #           run: |
    #               npx nx build wizarr-backend
    #               npx nx build wizarr-frontend

    #         # Get the Metadata from the Docker Image
    #         - name: Docker meta
    #           id: meta
    #           uses: docker/metadata-action@v5
    #           with:
    #               images: ${{ env.DH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    #         # Set up Docker Buildx
    #         - name: Set up Docker Buildx
    #           uses: docker/setup-buildx-action@v3

    #         # Login to Docker Hub
    #         - name: Login to Docker Hub
    #           uses: docker/login-action@v3
    #           with:
    #               registry: ${{ env.DH_REGISTRY }}
    #               username: ${{ secrets.DOCKERHUB_USERNAME }}
    #               password: ${{ secrets.DOCKERHUB_TOKEN }}

    #         # Build and push the image
    #         - name: Build and push by digest
    #           id: build
    #           uses: docker/build-push-action@v5
    #           with:
    #               context: .
    #               file: ./dockerfiles/wizarr-ci/Dockerfile
    #               push: true
    #               platforms: ${{ matrix.platform }}
    #               labels: ${{ steps.meta.outputs.labels }}
    #               provenance: false
    #               outputs: type=image,name=${{ env.DH_REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true
    #               cache-from: type=gha,scope=${{ matrix.platform }}-${{ env.GHCR_REGISTRY }}
    #               cache-to: type=gha,mode=max,scope=${{ matrix.platform }}-${{ env.GHCR_REGISTRY }}

    #         # Export the digest for later use
    #         - name: Export digest
    #           run: |
    #               mkdir -p /tmp/digests
    #               digest="${{ steps.build.outputs.digest }}"
    #               touch "/tmp/digests/${digest#sha256:}"

    #         # Upload the digest as an artifact
    #         - name: Upload digest
    #           uses: actions/upload-artifact@v3
    #           with:
    #               name: digests_dh
    #               path: /tmp/digests/*
    #               if-no-files-found: error
    #               retention-days: 1

    # merge_dh:
    #     name: Merge Digest for Docker Hub
    #     runs-on: ubuntu-latest
    #     needs:
    #         - build_dh
    #     steps:
    #         # Checkout the repo
    #         - name: Checkout
    #           uses: actions/checkout@v2

    #         # Get the Release Version from latest
    #         - name: Get the Release Version from latest
    #           id: get_version
    #           run: echo "::set-output name=version::$(cat latest)"

    #         # Download the digests from the artifacts
    #         - name: Download digests
    #           uses: actions/download-artifact@v3
    #           with:
    #               name: digests_dh
    #               path: /tmp/digests

    #         # Set up Docker Buildx
    #         - name: Set up Docker Buildx
    #           uses: docker/setup-buildx-action@v3

    #         # Get the Metadata from the Docker Image
    #         - name: Docker meta
    #           id: meta
    #           uses: docker/metadata-action@v5
    #           with:
    #               images: ${{ env.DH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    #         # Login to Docker Hub
    #         - name: Login to Docker Hub
    #           uses: docker/login-action@v3
    #           with:
    #               registry: docker.io
    #               username: ${{ secrets.DOCKERHUB_USERNAME }}
    #               password: ${{ secrets.DOCKERHUB_TOKEN }}

    #         # Create manifest list and push
    #         - name: Create manifest list and push to Registry
    #           working-directory: /tmp/digests
    #           run: |
    #               docker buildx imagetools create \
    #                 --tag ${{ env.DH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
    #                 --tag ${{ env.DH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}-${{ steps.get_version.outputs.version }} \
    #                 $(printf '${{ env.DH_REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

    #         # Inspect image
    #         - name: Inspect image
    #           run: docker buildx imagetools inspect ${{ env.DH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
