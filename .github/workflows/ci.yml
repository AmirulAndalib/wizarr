name: Release Docker Image CI

on:
  release:
    types: [created]

permissions:
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wizarrrr/wizarr

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v2

      # Get the Release Version
      - name: Get the Release Version
        id: get_version
        run: echo "::set-output name=version::${{ github.event.release.tag_name }}"

      # Do not build if the release is a pre-release
      - name: Only if the release is not a pre-release
        if: github.event.release.prerelease == true
        run: exit 1

      # Update .github/latest with the Release Version
      - name: Update .github/latest with the Release Version
        run: echo "${{ github.event.release.tag_name }}" > .github/latest

      # Commit the changes to .github/latest using token
      - name: Commit the changes to .github/latest
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add .github/latest
          git commit -m "Update .github/latest to ${{ github.event.release.tag_name }}"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Login to GHCR
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm64/v7,linux/arm64/v8
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
